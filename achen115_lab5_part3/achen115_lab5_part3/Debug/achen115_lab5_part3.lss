
achen115_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000164  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087c  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b7  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000278  00000000  00000000  0000127b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000410  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001938  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000197f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	62 c0       	rjmp	.+196    	; 0x160 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>
#include<stdlib.h>

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	2c 97       	sbiw	r28, 0x0c	; 12
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    DDRA = 0;	PINA = -1;
  b2:	81 e2       	ldi	r24, 0x21	; 33
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	fc 01       	movw	r30, r24
  b8:	10 82       	st	Z, r1
  ba:	80 e2       	ldi	r24, 0x20	; 32
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
    DDRB = -1;	PORTB = 0;
  c4:	84 e2       	ldi	r24, 0x24	; 36
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
  ce:	85 e2       	ldi	r24, 0x25	; 37
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	fc 01       	movw	r30, r24
  d4:	10 82       	st	Z, r1

	char states[8];
	for(int i = 0; i < 8; i++) {
  d6:	1a 82       	std	Y+2, r1	; 0x02
  d8:	19 82       	std	Y+1, r1	; 0x01
  da:	13 c0       	rjmp	.+38     	; 0x102 <main+0x64>
		states[i] = i * 31;
  dc:	99 81       	ldd	r25, Y+1	; 0x01
  de:	8f e1       	ldi	r24, 0x1F	; 31
  e0:	98 9f       	mul	r25, r24
  e2:	40 2d       	mov	r20, r0
  e4:	11 24       	eor	r1, r1
  e6:	9e 01       	movw	r18, r28
  e8:	2b 5f       	subi	r18, 0xFB	; 251
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	9a 81       	ldd	r25, Y+2	; 0x02
  f0:	82 0f       	add	r24, r18
  f2:	93 1f       	adc	r25, r19
  f4:	fc 01       	movw	r30, r24
  f6:	40 83       	st	Z, r20
    /* Replace with your application code */
    DDRA = 0;	PINA = -1;
    DDRB = -1;	PORTB = 0;

	char states[8];
	for(int i = 0; i < 8; i++) {
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	9a 81       	ldd	r25, Y+2	; 0x02
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	9a 83       	std	Y+2, r25	; 0x02
 100:	89 83       	std	Y+1, r24	; 0x01
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	9a 81       	ldd	r25, Y+2	; 0x02
 106:	08 97       	sbiw	r24, 0x08	; 8
 108:	4c f3       	brlt	.-46     	; 0xdc <main+0x3e>
		states[i] = i * 31;
	}
	char stateIndex = 0;
 10a:	1b 82       	std	Y+3, r1	; 0x03
	char pressed = 1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	8c 83       	std	Y+4, r24	; 0x04
    while (1)
    {
		if(~PINA & 1) {
 110:	80 e2       	ldi	r24, 0x20	; 32
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	81 70       	andi	r24, 0x01	; 1
 11e:	99 27       	eor	r25, r25
 120:	89 2b       	or	r24, r25
 122:	71 f4       	brne	.+28     	; 0x140 <main+0xa2>
			if(pressed) {
 124:	8c 81       	ldd	r24, Y+4	; 0x04
 126:	88 23       	and	r24, r24
 128:	61 f4       	brne	.+24     	; 0x142 <main+0xa4>
				
			} else {
				pressed = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8c 83       	std	Y+4, r24	; 0x04
				if(stateIndex != 8) {
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	88 30       	cpi	r24, 0x08	; 8
 132:	21 f0       	breq	.+8      	; 0x13c <main+0x9e>
					stateIndex++;
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	8f 5f       	subi	r24, 0xFF	; 255
 138:	8b 83       	std	Y+3, r24	; 0x03
 13a:	03 c0       	rjmp	.+6      	; 0x142 <main+0xa4>
				} else {
					stateIndex = 0;
 13c:	1b 82       	std	Y+3, r1	; 0x03
 13e:	01 c0       	rjmp	.+2      	; 0x142 <main+0xa4>
				}
			}
		} else {
			pressed = 0;
 140:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		PORTB = states[stateIndex];
 142:	85 e2       	ldi	r24, 0x25	; 37
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	2b 81       	ldd	r18, Y+3	; 0x03
 148:	22 2f       	mov	r18, r18
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	ae 01       	movw	r20, r28
 14e:	4b 5f       	subi	r20, 0xFB	; 251
 150:	5f 4f       	sbci	r21, 0xFF	; 255
 152:	24 0f       	add	r18, r20
 154:	35 1f       	adc	r19, r21
 156:	f9 01       	movw	r30, r18
 158:	20 81       	ld	r18, Z
 15a:	fc 01       	movw	r30, r24
 15c:	20 83       	st	Z, r18
    }
 15e:	d8 cf       	rjmp	.-80     	; 0x110 <main+0x72>

00000160 <_exit>:
 160:	f8 94       	cli

00000162 <__stop_program>:
 162:	ff cf       	rjmp	.-2      	; 0x162 <__stop_program>
