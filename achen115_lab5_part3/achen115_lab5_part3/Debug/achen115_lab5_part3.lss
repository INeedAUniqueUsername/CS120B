
achen115_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  000003e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000410  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088f  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000284  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001754  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001be7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	15 d0       	rcall	.+42     	; 0xee <main>
  c4:	3f c1       	rjmp	.+638    	; 0x344 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <time>:
  c8:	fc 01       	movw	r30, r24
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
  d2:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
  d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
  da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
  de:	0f be       	out	0x3f, r0	; 63
  e0:	30 97       	sbiw	r30, 0x00	; 0
  e2:	21 f0       	breq	.+8      	; 0xec <time+0x24>
  e4:	60 83       	st	Z, r22
  e6:	71 83       	std	Z+1, r23	; 0x01
  e8:	82 83       	std	Z+2, r24	; 0x02
  ea:	93 83       	std	Z+3, r25	; 0x03
  ec:	08 95       	ret

000000ee <main>:

#include <avr/io.h>
#include<stdlib.h>

int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	c5 54       	subi	r28, 0x45	; 69
  f8:	d1 09       	sbc	r29, r1
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
	srand(time(0));
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	df df       	rcall	.-66     	; 0xc8 <time>
 10a:	b4 d0       	rcall	.+360    	; 0x274 <srand>
    /* Replace with your application code */
    DDRA = 0;	PINA = -1;
 10c:	81 e2       	ldi	r24, 0x21	; 33
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	10 82       	st	Z, r1
 114:	80 e2       	ldi	r24, 0x20	; 32
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
    DDRB = -1;	PORTB = 0;
 11e:	84 e2       	ldi	r24, 0x24	; 36
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
 128:	85 e2       	ldi	r24, 0x25	; 37
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	fc 01       	movw	r30, r24
 12e:	10 82       	st	Z, r1
	char states[65];
	for(int i = 0; i < 63; i++) {
 130:	1a 82       	std	Y+2, r1	; 0x02
 132:	19 82       	std	Y+1, r1	; 0x01
		states[i] = rand()%64;
 134:	18 c0       	rjmp	.+48     	; 0x166 <main+0x78>
 136:	9b d0       	rcall	.+310    	; 0x26e <rand>
 138:	8f 73       	andi	r24, 0x3F	; 63
 13a:	90 78       	andi	r25, 0x80	; 128
 13c:	99 23       	and	r25, r25
 13e:	24 f4       	brge	.+8      	; 0x148 <main+0x5a>
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	80 6c       	ori	r24, 0xC0	; 192
 144:	9f 6f       	ori	r25, 0xFF	; 255
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	48 2f       	mov	r20, r24
 14a:	9e 01       	movw	r18, r28
 14c:	2b 5f       	subi	r18, 0xFB	; 251
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	9a 81       	ldd	r25, Y+2	; 0x02
 154:	82 0f       	add	r24, r18
 156:	93 1f       	adc	r25, r19
 158:	fc 01       	movw	r30, r24
 15a:	40 83       	st	Z, r20
	srand(time(0));
    /* Replace with your application code */
    DDRA = 0;	PINA = -1;
    DDRB = -1;	PORTB = 0;
	char states[65];
	for(int i = 0; i < 63; i++) {
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	cf 97       	sbiw	r24, 0x3f	; 63
 16c:	24 f3       	brlt	.-56     	; 0x136 <main+0x48>
		states[i] = rand()%64;
	}
	states[64] = 0;
 16e:	ce 01       	movw	r24, r28
 170:	8b 5b       	subi	r24, 0xBB	; 187
 172:	9f 4f       	sbci	r25, 0xFF	; 255
 174:	fc 01       	movw	r30, r24
 176:	10 82       	st	Z, r1
	char stateIndex = 0;
 178:	1b 82       	std	Y+3, r1	; 0x03
	char pressed = 1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	8c 83       	std	Y+4, r24	; 0x04
    while (1)
    {
		if(~PINA & 1) {
 17e:	80 e2       	ldi	r24, 0x20	; 32
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	81 70       	andi	r24, 0x01	; 1
 18c:	99 27       	eor	r25, r25
 18e:	89 2b       	or	r24, r25
 190:	b9 f4       	brne	.+46     	; 0x1c0 <main+0xd2>
			if(pressed) {
 192:	8c 81       	ldd	r24, Y+4	; 0x04
 194:	88 23       	and	r24, r24
 196:	a9 f4       	brne	.+42     	; 0x1c2 <main+0xd4>
				
			} else {
				pressed = 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	8c 83       	std	Y+4, r24	; 0x04
				if(states[stateIndex]) {
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	9e 01       	movw	r18, r28
 1a4:	2b 5f       	subi	r18, 0xFB	; 251
 1a6:	3f 4f       	sbci	r19, 0xFF	; 255
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	88 23       	and	r24, r24
 1b2:	21 f0       	breq	.+8      	; 0x1bc <main+0xce>
					stateIndex++;
 1b4:	8b 81       	ldd	r24, Y+3	; 0x03
 1b6:	8f 5f       	subi	r24, 0xFF	; 255
 1b8:	8b 83       	std	Y+3, r24	; 0x03
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <main+0xd4>
				} else {
					stateIndex = 0;
 1bc:	1b 82       	std	Y+3, r1	; 0x03
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <main+0xd4>
				}
			}
		} else {
			pressed = 0;
 1c0:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		PORTB = states[stateIndex];
 1c2:	85 e2       	ldi	r24, 0x25	; 37
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	2b 81       	ldd	r18, Y+3	; 0x03
 1c8:	22 2f       	mov	r18, r18
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	ae 01       	movw	r20, r28
 1ce:	4b 5f       	subi	r20, 0xFB	; 251
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	24 0f       	add	r18, r20
 1d4:	35 1f       	adc	r19, r21
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
    }
 1de:	cf cf       	rjmp	.-98     	; 0x17e <main+0x90>

000001e0 <do_rand>:
 1e0:	8f 92       	push	r8
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
 1f6:	68 81       	ld	r22, Y
 1f8:	79 81       	ldd	r23, Y+1	; 0x01
 1fa:	8a 81       	ldd	r24, Y+2	; 0x02
 1fc:	9b 81       	ldd	r25, Y+3	; 0x03
 1fe:	61 15       	cp	r22, r1
 200:	71 05       	cpc	r23, r1
 202:	81 05       	cpc	r24, r1
 204:	91 05       	cpc	r25, r1
 206:	21 f4       	brne	.+8      	; 0x210 <do_rand+0x30>
 208:	64 e2       	ldi	r22, 0x24	; 36
 20a:	79 ed       	ldi	r23, 0xD9	; 217
 20c:	8b e5       	ldi	r24, 0x5B	; 91
 20e:	97 e0       	ldi	r25, 0x07	; 7
 210:	2d e1       	ldi	r18, 0x1D	; 29
 212:	33 ef       	ldi	r19, 0xF3	; 243
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	50 e0       	ldi	r21, 0x00	; 0
 218:	38 d0       	rcall	.+112    	; 0x28a <__divmodsi4>
 21a:	49 01       	movw	r8, r18
 21c:	5a 01       	movw	r10, r20
 21e:	9b 01       	movw	r18, r22
 220:	ac 01       	movw	r20, r24
 222:	a7 ea       	ldi	r26, 0xA7	; 167
 224:	b1 e4       	ldi	r27, 0x41	; 65
 226:	4d d0       	rcall	.+154    	; 0x2c2 <__muluhisi3>
 228:	6b 01       	movw	r12, r22
 22a:	7c 01       	movw	r14, r24
 22c:	ac ee       	ldi	r26, 0xEC	; 236
 22e:	b4 ef       	ldi	r27, 0xF4	; 244
 230:	a5 01       	movw	r20, r10
 232:	94 01       	movw	r18, r8
 234:	52 d0       	rcall	.+164    	; 0x2da <__mulohisi3>
 236:	dc 01       	movw	r26, r24
 238:	cb 01       	movw	r24, r22
 23a:	8c 0d       	add	r24, r12
 23c:	9d 1d       	adc	r25, r13
 23e:	ae 1d       	adc	r26, r14
 240:	bf 1d       	adc	r27, r15
 242:	b7 ff       	sbrs	r27, 7
 244:	03 c0       	rjmp	.+6      	; 0x24c <do_rand+0x6c>
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	a1 09       	sbc	r26, r1
 24a:	b0 48       	sbci	r27, 0x80	; 128
 24c:	88 83       	st	Y, r24
 24e:	99 83       	std	Y+1, r25	; 0x01
 250:	aa 83       	std	Y+2, r26	; 0x02
 252:	bb 83       	std	Y+3, r27	; 0x03
 254:	9f 77       	andi	r25, 0x7F	; 127
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	df 90       	pop	r13
 260:	cf 90       	pop	r12
 262:	bf 90       	pop	r11
 264:	af 90       	pop	r10
 266:	9f 90       	pop	r9
 268:	8f 90       	pop	r8
 26a:	08 95       	ret

0000026c <rand_r>:
 26c:	b9 cf       	rjmp	.-142    	; 0x1e0 <do_rand>

0000026e <rand>:
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	b6 cf       	rjmp	.-148    	; 0x1e0 <do_rand>

00000274 <srand>:
 274:	a0 e0       	ldi	r26, 0x00	; 0
 276:	b0 e0       	ldi	r27, 0x00	; 0
 278:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 27c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 280:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 284:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 288:	08 95       	ret

0000028a <__divmodsi4>:
 28a:	05 2e       	mov	r0, r21
 28c:	97 fb       	bst	r25, 7
 28e:	16 f4       	brtc	.+4      	; 0x294 <__divmodsi4+0xa>
 290:	00 94       	com	r0
 292:	0f d0       	rcall	.+30     	; 0x2b2 <__negsi2>
 294:	57 fd       	sbrc	r21, 7
 296:	05 d0       	rcall	.+10     	; 0x2a2 <__divmodsi4_neg2>
 298:	24 d0       	rcall	.+72     	; 0x2e2 <__udivmodsi4>
 29a:	07 fc       	sbrc	r0, 7
 29c:	02 d0       	rcall	.+4      	; 0x2a2 <__divmodsi4_neg2>
 29e:	46 f4       	brtc	.+16     	; 0x2b0 <__divmodsi4_exit>
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <__negsi2>

000002a2 <__divmodsi4_neg2>:
 2a2:	50 95       	com	r21
 2a4:	40 95       	com	r20
 2a6:	30 95       	com	r19
 2a8:	21 95       	neg	r18
 2aa:	3f 4f       	sbci	r19, 0xFF	; 255
 2ac:	4f 4f       	sbci	r20, 0xFF	; 255
 2ae:	5f 4f       	sbci	r21, 0xFF	; 255

000002b0 <__divmodsi4_exit>:
 2b0:	08 95       	ret

000002b2 <__negsi2>:
 2b2:	90 95       	com	r25
 2b4:	80 95       	com	r24
 2b6:	70 95       	com	r23
 2b8:	61 95       	neg	r22
 2ba:	7f 4f       	sbci	r23, 0xFF	; 255
 2bc:	8f 4f       	sbci	r24, 0xFF	; 255
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	08 95       	ret

000002c2 <__muluhisi3>:
 2c2:	31 d0       	rcall	.+98     	; 0x326 <__umulhisi3>
 2c4:	a5 9f       	mul	r26, r21
 2c6:	90 0d       	add	r25, r0
 2c8:	b4 9f       	mul	r27, r20
 2ca:	90 0d       	add	r25, r0
 2cc:	a4 9f       	mul	r26, r20
 2ce:	80 0d       	add	r24, r0
 2d0:	91 1d       	adc	r25, r1
 2d2:	11 24       	eor	r1, r1
 2d4:	08 95       	ret

000002d6 <__mulshisi3>:
 2d6:	b7 ff       	sbrs	r27, 7
 2d8:	f4 cf       	rjmp	.-24     	; 0x2c2 <__muluhisi3>

000002da <__mulohisi3>:
 2da:	f3 df       	rcall	.-26     	; 0x2c2 <__muluhisi3>
 2dc:	82 1b       	sub	r24, r18
 2de:	93 0b       	sbc	r25, r19
 2e0:	08 95       	ret

000002e2 <__udivmodsi4>:
 2e2:	a1 e2       	ldi	r26, 0x21	; 33
 2e4:	1a 2e       	mov	r1, r26
 2e6:	aa 1b       	sub	r26, r26
 2e8:	bb 1b       	sub	r27, r27
 2ea:	fd 01       	movw	r30, r26
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <__udivmodsi4_ep>

000002ee <__udivmodsi4_loop>:
 2ee:	aa 1f       	adc	r26, r26
 2f0:	bb 1f       	adc	r27, r27
 2f2:	ee 1f       	adc	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	a2 17       	cp	r26, r18
 2f8:	b3 07       	cpc	r27, r19
 2fa:	e4 07       	cpc	r30, r20
 2fc:	f5 07       	cpc	r31, r21
 2fe:	20 f0       	brcs	.+8      	; 0x308 <__udivmodsi4_ep>
 300:	a2 1b       	sub	r26, r18
 302:	b3 0b       	sbc	r27, r19
 304:	e4 0b       	sbc	r30, r20
 306:	f5 0b       	sbc	r31, r21

00000308 <__udivmodsi4_ep>:
 308:	66 1f       	adc	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	88 1f       	adc	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	1a 94       	dec	r1
 312:	69 f7       	brne	.-38     	; 0x2ee <__udivmodsi4_loop>
 314:	60 95       	com	r22
 316:	70 95       	com	r23
 318:	80 95       	com	r24
 31a:	90 95       	com	r25
 31c:	9b 01       	movw	r18, r22
 31e:	ac 01       	movw	r20, r24
 320:	bd 01       	movw	r22, r26
 322:	cf 01       	movw	r24, r30
 324:	08 95       	ret

00000326 <__umulhisi3>:
 326:	a2 9f       	mul	r26, r18
 328:	b0 01       	movw	r22, r0
 32a:	b3 9f       	mul	r27, r19
 32c:	c0 01       	movw	r24, r0
 32e:	a3 9f       	mul	r26, r19
 330:	70 0d       	add	r23, r0
 332:	81 1d       	adc	r24, r1
 334:	11 24       	eor	r1, r1
 336:	91 1d       	adc	r25, r1
 338:	b2 9f       	mul	r27, r18
 33a:	70 0d       	add	r23, r0
 33c:	81 1d       	adc	r24, r1
 33e:	11 24       	eor	r1, r1
 340:	91 1d       	adc	r25, r1
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
