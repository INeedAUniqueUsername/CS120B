
achen115_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000033c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  000003d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088f  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00000cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027e  00000000  00000000  000014c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000047  00000000  00000000  00001b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001bd2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	15 d0       	rcall	.+42     	; 0xee <main>
  c4:	39 c1       	rjmp	.+626    	; 0x338 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <time>:
  c8:	fc 01       	movw	r30, r24
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__data_end>
  d2:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__data_end+0x1>
  d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x2>
  da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x3>
  de:	0f be       	out	0x3f, r0	; 63
  e0:	30 97       	sbiw	r30, 0x00	; 0
  e2:	21 f0       	breq	.+8      	; 0xec <time+0x24>
  e4:	60 83       	st	Z, r22
  e6:	71 83       	std	Z+1, r23	; 0x01
  e8:	82 83       	std	Z+2, r24	; 0x02
  ea:	93 83       	std	Z+3, r25	; 0x03
  ec:	08 95       	ret

000000ee <main>:

#include <avr/io.h>
#include<stdlib.h>

int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	2d 97       	sbiw	r28, 0x0d	; 13
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
	srand(time(0));
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	e0 df       	rcall	.-64     	; 0xc8 <time>
 108:	af d0       	rcall	.+350    	; 0x268 <srand>
    /* Replace with your application code */
    DDRA = 0;	PINA = -1;
 10a:	81 e2       	ldi	r24, 0x21	; 33
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	10 82       	st	Z, r1
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
    DDRB = -1;	PORTB = 0;
 11c:	84 e2       	ldi	r24, 0x24	; 36
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	85 e2       	ldi	r24, 0x25	; 37
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	fc 01       	movw	r30, r24
 12c:	10 82       	st	Z, r1
	char states[9];
	for(int i = 0; i < 7; i++) {
 12e:	1a 82       	std	Y+2, r1	; 0x02
 130:	19 82       	std	Y+1, r1	; 0x01
		states[i] = rand()%64;
 132:	18 c0       	rjmp	.+48     	; 0x164 <main+0x76>
 134:	96 d0       	rcall	.+300    	; 0x262 <rand>
 136:	8f 73       	andi	r24, 0x3F	; 63
 138:	90 78       	andi	r25, 0x80	; 128
 13a:	99 23       	and	r25, r25
 13c:	24 f4       	brge	.+8      	; 0x146 <main+0x58>
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	80 6c       	ori	r24, 0xC0	; 192
 142:	9f 6f       	ori	r25, 0xFF	; 255
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	48 2f       	mov	r20, r24
 148:	9e 01       	movw	r18, r28
 14a:	2b 5f       	subi	r18, 0xFB	; 251
 14c:	3f 4f       	sbci	r19, 0xFF	; 255
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	9a 81       	ldd	r25, Y+2	; 0x02
 152:	82 0f       	add	r24, r18
 154:	93 1f       	adc	r25, r19
 156:	fc 01       	movw	r30, r24
 158:	40 83       	st	Z, r20
	srand(time(0));
    /* Replace with your application code */
    DDRA = 0;	PINA = -1;
    DDRB = -1;	PORTB = 0;
	char states[9];
	for(int i = 0; i < 7; i++) {
 15a:	89 81       	ldd	r24, Y+1	; 0x01
 15c:	9a 81       	ldd	r25, Y+2	; 0x02
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	9a 83       	std	Y+2, r25	; 0x02
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	89 81       	ldd	r24, Y+1	; 0x01
 166:	9a 81       	ldd	r25, Y+2	; 0x02
 168:	07 97       	sbiw	r24, 0x07	; 7
 16a:	24 f3       	brlt	.-56     	; 0x134 <main+0x46>
		states[i] = rand()%64;
	}
	char stateIndex = 0;
 16c:	1b 82       	std	Y+3, r1	; 0x03
	char pressed = 1;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	8c 83       	std	Y+4, r24	; 0x04
    while (1)
    {
		if(~PINA & 1) {
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	81 70       	andi	r24, 0x01	; 1
 180:	99 27       	eor	r25, r25
 182:	89 2b       	or	r24, r25
 184:	b9 f4       	brne	.+46     	; 0x1b4 <main+0xc6>
			if(pressed) {
 186:	8c 81       	ldd	r24, Y+4	; 0x04
 188:	88 23       	and	r24, r24
 18a:	a9 f4       	brne	.+42     	; 0x1b6 <main+0xc8>
				
			} else {
				pressed = 1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	8c 83       	std	Y+4, r24	; 0x04
				if(states[stateIndex]) {
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	88 2f       	mov	r24, r24
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9e 01       	movw	r18, r28
 198:	2b 5f       	subi	r18, 0xFB	; 251
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	82 0f       	add	r24, r18
 19e:	93 1f       	adc	r25, r19
 1a0:	fc 01       	movw	r30, r24
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	21 f0       	breq	.+8      	; 0x1b0 <main+0xc2>
					stateIndex++;
 1a8:	8b 81       	ldd	r24, Y+3	; 0x03
 1aa:	8f 5f       	subi	r24, 0xFF	; 255
 1ac:	8b 83       	std	Y+3, r24	; 0x03
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <main+0xc8>
				} else {
					stateIndex = 0;
 1b0:	1b 82       	std	Y+3, r1	; 0x03
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <main+0xc8>
				}
			}
		} else {
			pressed = 0;
 1b4:	1c 82       	std	Y+4, r1	; 0x04
		}
		
		PORTB = states[stateIndex];
 1b6:	85 e2       	ldi	r24, 0x25	; 37
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	2b 81       	ldd	r18, Y+3	; 0x03
 1bc:	22 2f       	mov	r18, r18
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	ae 01       	movw	r20, r28
 1c2:	4b 5f       	subi	r20, 0xFB	; 251
 1c4:	5f 4f       	sbci	r21, 0xFF	; 255
 1c6:	24 0f       	add	r18, r20
 1c8:	35 1f       	adc	r19, r21
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
    }
 1d2:	cf cf       	rjmp	.-98     	; 0x172 <main+0x84>

000001d4 <do_rand>:
 1d4:	8f 92       	push	r8
 1d6:	9f 92       	push	r9
 1d8:	af 92       	push	r10
 1da:	bf 92       	push	r11
 1dc:	cf 92       	push	r12
 1de:	df 92       	push	r13
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
 1ea:	68 81       	ld	r22, Y
 1ec:	79 81       	ldd	r23, Y+1	; 0x01
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	9b 81       	ldd	r25, Y+3	; 0x03
 1f2:	61 15       	cp	r22, r1
 1f4:	71 05       	cpc	r23, r1
 1f6:	81 05       	cpc	r24, r1
 1f8:	91 05       	cpc	r25, r1
 1fa:	21 f4       	brne	.+8      	; 0x204 <do_rand+0x30>
 1fc:	64 e2       	ldi	r22, 0x24	; 36
 1fe:	79 ed       	ldi	r23, 0xD9	; 217
 200:	8b e5       	ldi	r24, 0x5B	; 91
 202:	97 e0       	ldi	r25, 0x07	; 7
 204:	2d e1       	ldi	r18, 0x1D	; 29
 206:	33 ef       	ldi	r19, 0xF3	; 243
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	38 d0       	rcall	.+112    	; 0x27e <__divmodsi4>
 20e:	49 01       	movw	r8, r18
 210:	5a 01       	movw	r10, r20
 212:	9b 01       	movw	r18, r22
 214:	ac 01       	movw	r20, r24
 216:	a7 ea       	ldi	r26, 0xA7	; 167
 218:	b1 e4       	ldi	r27, 0x41	; 65
 21a:	4d d0       	rcall	.+154    	; 0x2b6 <__muluhisi3>
 21c:	6b 01       	movw	r12, r22
 21e:	7c 01       	movw	r14, r24
 220:	ac ee       	ldi	r26, 0xEC	; 236
 222:	b4 ef       	ldi	r27, 0xF4	; 244
 224:	a5 01       	movw	r20, r10
 226:	94 01       	movw	r18, r8
 228:	52 d0       	rcall	.+164    	; 0x2ce <__mulohisi3>
 22a:	dc 01       	movw	r26, r24
 22c:	cb 01       	movw	r24, r22
 22e:	8c 0d       	add	r24, r12
 230:	9d 1d       	adc	r25, r13
 232:	ae 1d       	adc	r26, r14
 234:	bf 1d       	adc	r27, r15
 236:	b7 ff       	sbrs	r27, 7
 238:	03 c0       	rjmp	.+6      	; 0x240 <do_rand+0x6c>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	a1 09       	sbc	r26, r1
 23e:	b0 48       	sbci	r27, 0x80	; 128
 240:	88 83       	st	Y, r24
 242:	99 83       	std	Y+1, r25	; 0x01
 244:	aa 83       	std	Y+2, r26	; 0x02
 246:	bb 83       	std	Y+3, r27	; 0x03
 248:	9f 77       	andi	r25, 0x7F	; 127
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	bf 90       	pop	r11
 258:	af 90       	pop	r10
 25a:	9f 90       	pop	r9
 25c:	8f 90       	pop	r8
 25e:	08 95       	ret

00000260 <rand_r>:
 260:	b9 cf       	rjmp	.-142    	; 0x1d4 <do_rand>

00000262 <rand>:
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	b6 cf       	rjmp	.-148    	; 0x1d4 <do_rand>

00000268 <srand>:
 268:	a0 e0       	ldi	r26, 0x00	; 0
 26a:	b0 e0       	ldi	r27, 0x00	; 0
 26c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 270:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 274:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 278:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 27c:	08 95       	ret

0000027e <__divmodsi4>:
 27e:	05 2e       	mov	r0, r21
 280:	97 fb       	bst	r25, 7
 282:	16 f4       	brtc	.+4      	; 0x288 <__divmodsi4+0xa>
 284:	00 94       	com	r0
 286:	0f d0       	rcall	.+30     	; 0x2a6 <__negsi2>
 288:	57 fd       	sbrc	r21, 7
 28a:	05 d0       	rcall	.+10     	; 0x296 <__divmodsi4_neg2>
 28c:	24 d0       	rcall	.+72     	; 0x2d6 <__udivmodsi4>
 28e:	07 fc       	sbrc	r0, 7
 290:	02 d0       	rcall	.+4      	; 0x296 <__divmodsi4_neg2>
 292:	46 f4       	brtc	.+16     	; 0x2a4 <__divmodsi4_exit>
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <__negsi2>

00000296 <__divmodsi4_neg2>:
 296:	50 95       	com	r21
 298:	40 95       	com	r20
 29a:	30 95       	com	r19
 29c:	21 95       	neg	r18
 29e:	3f 4f       	sbci	r19, 0xFF	; 255
 2a0:	4f 4f       	sbci	r20, 0xFF	; 255
 2a2:	5f 4f       	sbci	r21, 0xFF	; 255

000002a4 <__divmodsi4_exit>:
 2a4:	08 95       	ret

000002a6 <__negsi2>:
 2a6:	90 95       	com	r25
 2a8:	80 95       	com	r24
 2aa:	70 95       	com	r23
 2ac:	61 95       	neg	r22
 2ae:	7f 4f       	sbci	r23, 0xFF	; 255
 2b0:	8f 4f       	sbci	r24, 0xFF	; 255
 2b2:	9f 4f       	sbci	r25, 0xFF	; 255
 2b4:	08 95       	ret

000002b6 <__muluhisi3>:
 2b6:	31 d0       	rcall	.+98     	; 0x31a <__umulhisi3>
 2b8:	a5 9f       	mul	r26, r21
 2ba:	90 0d       	add	r25, r0
 2bc:	b4 9f       	mul	r27, r20
 2be:	90 0d       	add	r25, r0
 2c0:	a4 9f       	mul	r26, r20
 2c2:	80 0d       	add	r24, r0
 2c4:	91 1d       	adc	r25, r1
 2c6:	11 24       	eor	r1, r1
 2c8:	08 95       	ret

000002ca <__mulshisi3>:
 2ca:	b7 ff       	sbrs	r27, 7
 2cc:	f4 cf       	rjmp	.-24     	; 0x2b6 <__muluhisi3>

000002ce <__mulohisi3>:
 2ce:	f3 df       	rcall	.-26     	; 0x2b6 <__muluhisi3>
 2d0:	82 1b       	sub	r24, r18
 2d2:	93 0b       	sbc	r25, r19
 2d4:	08 95       	ret

000002d6 <__udivmodsi4>:
 2d6:	a1 e2       	ldi	r26, 0x21	; 33
 2d8:	1a 2e       	mov	r1, r26
 2da:	aa 1b       	sub	r26, r26
 2dc:	bb 1b       	sub	r27, r27
 2de:	fd 01       	movw	r30, r26
 2e0:	0d c0       	rjmp	.+26     	; 0x2fc <__udivmodsi4_ep>

000002e2 <__udivmodsi4_loop>:
 2e2:	aa 1f       	adc	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	ee 1f       	adc	r30, r30
 2e8:	ff 1f       	adc	r31, r31
 2ea:	a2 17       	cp	r26, r18
 2ec:	b3 07       	cpc	r27, r19
 2ee:	e4 07       	cpc	r30, r20
 2f0:	f5 07       	cpc	r31, r21
 2f2:	20 f0       	brcs	.+8      	; 0x2fc <__udivmodsi4_ep>
 2f4:	a2 1b       	sub	r26, r18
 2f6:	b3 0b       	sbc	r27, r19
 2f8:	e4 0b       	sbc	r30, r20
 2fa:	f5 0b       	sbc	r31, r21

000002fc <__udivmodsi4_ep>:
 2fc:	66 1f       	adc	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	88 1f       	adc	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	1a 94       	dec	r1
 306:	69 f7       	brne	.-38     	; 0x2e2 <__udivmodsi4_loop>
 308:	60 95       	com	r22
 30a:	70 95       	com	r23
 30c:	80 95       	com	r24
 30e:	90 95       	com	r25
 310:	9b 01       	movw	r18, r22
 312:	ac 01       	movw	r20, r24
 314:	bd 01       	movw	r22, r26
 316:	cf 01       	movw	r24, r30
 318:	08 95       	ret

0000031a <__umulhisi3>:
 31a:	a2 9f       	mul	r26, r18
 31c:	b0 01       	movw	r22, r0
 31e:	b3 9f       	mul	r27, r19
 320:	c0 01       	movw	r24, r0
 322:	a3 9f       	mul	r26, r19
 324:	70 0d       	add	r23, r0
 326:	81 1d       	adc	r24, r1
 328:	11 24       	eor	r1, r1
 32a:	91 1d       	adc	r25, r1
 32c:	b2 9f       	mul	r27, r18
 32e:	70 0d       	add	r23, r0
 330:	81 1d       	adc	r24, r1
 332:	11 24       	eor	r1, r1
 334:	91 1d       	adc	r25, r1
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
