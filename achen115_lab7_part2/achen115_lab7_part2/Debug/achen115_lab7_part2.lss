
achen115_lab7_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000005aa  0000063e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  0080010e  0080010e  0000064c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4e  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000840  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056d  00000000  00000000  000019ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00001f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d1  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000410  00000000  00000000  00002601  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002a11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	84 c1       	rjmp	.+776    	; 0x33e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ea       	ldi	r30, 0xAA	; 170
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 30       	cpi	r26, 0x0E	; 14
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e0       	ldi	r26, 0x0E	; 14
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cc d1       	rcall	.+920    	; 0x45c <main>
  c4:	70 c2       	rjmp	.+1248   	; 0x5a6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	1a d0       	rcall	.+52     	; 0x108 <LCD_WriteCommand>
}
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_init>:

void LCD_init(void) {
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ac d0       	rcall	.+344    	; 0x242 <delay_ms>
	LCD_WriteCommand(0x38);
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0d d0       	rcall	.+26     	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0b d0       	rcall	.+22     	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	09 d0       	rcall	.+18     	; 0x108 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	07 d0       	rcall	.+14     	; 0x108 <LCD_WriteCommand>
	delay_ms(10);						 
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	a1 d0       	rcall	.+322    	; 0x242 <delay_ms>
 100:	00 00       	nop
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_WriteCommand>:
 108:	cf 93       	push	r28

void LCD_WriteCommand (unsigned char Command) {
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e2       	ldi	r18, 0x2B	; 43
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
   DATA_BUS = Command;
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 68       	ori	r18, 0x80	; 128
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
   asm("nop");
 142:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2b e2       	ldi	r18, 0x2B	; 43
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 77       	andi	r18, 0x7F	; 127
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	73 d0       	rcall	.+230    	; 0x242 <delay_ms>
}
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
 172:	8b e2       	ldi	r24, 0x2B	; 43
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2b e2       	ldi	r18, 0x2B	; 43
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	20 64       	ori	r18, 0x40	; 64
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
   DATA_BUS = Data;
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	20 68       	ori	r18, 0x80	; 128
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
   asm("nop");
 1a0:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e2       	ldi	r18, 0x2B	; 43
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
   delay_ms(1);
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	44 d0       	rcall	.+136    	; 0x242 <delay_ms>
}
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <LCD_DisplayString+0x6>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <LCD_DisplayString+0x8>
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
 1d0:	8a 83       	std	Y+2, r24	; 0x02
 1d2:	7c 83       	std	Y+4, r23	; 0x04
 1d4:	6b 83       	std	Y+3, r22	; 0x03
   LCD_ClearScreen();
 1d6:	78 df       	rcall	.-272    	; 0xc8 <LCD_ClearScreen>
   unsigned char c = column;
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <LCD_DisplayString+0x38>
      LCD_Cursor(c++);
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	98 0f       	add	r25, r24
 1e4:	99 83       	std	Y+1, r25	; 0x01
 1e6:	18 d0       	rcall	.+48     	; 0x218 <LCD_Cursor>
      LCD_WriteData(*string++);
 1e8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ea:	9c 81       	ldd	r25, Y+4	; 0x04
 1ec:	9c 01       	movw	r18, r24
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	3c 83       	std	Y+4, r19	; 0x04
 1f4:	2b 83       	std	Y+3, r18	; 0x03
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	b5 df       	rcall	.-150    	; 0x166 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	59 f7       	brne	.-42     	; 0x1de <LCD_DisplayString+0x1a>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 208:	00 00       	nop
 20a:	0f 90       	pop	r0
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	1f 92       	push	r1
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	81 31       	cpi	r24, 0x11	; 17
 228:	20 f4       	brcc	.+8      	; 0x232 <LCD_Cursor+0x1a>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	81 58       	subi	r24, 0x81	; 129
 22e:	6c df       	rcall	.-296    	; 0x108 <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
											// 16x2 LCD: column - 9
   }
}
 230:	03 c0       	rjmp	.+6      	; 0x238 <LCD_Cursor+0x20>
void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 232:	89 81       	ldd	r24, Y+1	; 0x01
 234:	81 55       	subi	r24, 0x51	; 81
 236:	68 df       	rcall	.-304    	; 0x108 <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
 238:	00 00       	nop
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <delay_ms+0x6>
 248:	00 d0       	rcall	.+0      	; 0x24a <delay_ms+0x8>
 24a:	00 d0       	rcall	.+0      	; 0x24c <delay_ms+0xa>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	9e 83       	std	Y+6, r25	; 0x06
 252:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
 254:	1a 82       	std	Y+2, r1	; 0x02
 256:	19 82       	std	Y+1, r1	; 0x01
 258:	13 c0       	rjmp	.+38     	; 0x280 <delay_ms+0x3e>
    for(j=0;j<775;j++)
 25a:	1c 82       	std	Y+4, r1	; 0x04
 25c:	1b 82       	std	Y+3, r1	; 0x03
 25e:	06 c0       	rjmp	.+12     	; 0x26c <delay_ms+0x2a>
  {
   asm("nop");
 260:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	9c 81       	ldd	r25, Y+4	; 0x04
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	9c 83       	std	Y+4, r25	; 0x04
 26a:	8b 83       	std	Y+3, r24	; 0x03
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	87 30       	cpi	r24, 0x07	; 7
 272:	93 40       	sbci	r25, 0x03	; 3
 274:	ac f3       	brlt	.-22     	; 0x260 <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	29 81       	ldd	r18, Y+1	; 0x01
 282:	3a 81       	ldd	r19, Y+2	; 0x02
 284:	8d 81       	ldd	r24, Y+5	; 0x05
 286:	9e 81       	ldd	r25, Y+6	; 0x06
 288:	28 17       	cp	r18, r24
 28a:	39 07       	cpc	r19, r25
 28c:	34 f3       	brlt	.-52     	; 0x25a <delay_ms+0x18>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
 28e:	00 00       	nop
 290:	26 96       	adiw	r28, 0x06	; 6
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	df 91       	pop	r29
 29e:	cf 91       	pop	r28
 2a0:	08 95       	ret

000002a2 <TimerOn>:

// Internal variables for mapping AVR's ISR to our cleaner TimerISR model.
unsigned long _avr_timer_M = 1; // Start count from here, down to 0. Default 1 ms.
unsigned long _avr_timer_cntcurr = 0; // Current internal count of 1ms ticks

void TimerOn() {
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
	// AVR timer/counter controller register TCCR1
	TCCR1B = 0x0B;// bit3 = 0: CTC mode (clear timer on compare)
 2aa:	81 e8       	ldi	r24, 0x81	; 129
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	2b e0       	ldi	r18, 0x0B	; 11
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 83       	st	Z, r18
	// 00001011: 0x0B
	// SO, 8 MHz clock or 8,000,000 /64 = 125,000 ticks/s
	// Thus, TCNT1 register will count at 125,000 ticks/s

	// AVR output compare register OCR1A.
	OCR1A = 125;    // Timer interrupt will be generated when TCNT1==OCR1A
 2b4:	88 e8       	ldi	r24, 0x88	; 136
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	2d e7       	ldi	r18, 0x7D	; 125
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	31 83       	std	Z+1, r19	; 0x01
 2c0:	20 83       	st	Z, r18
	// We want a 1 ms tick. 0.001 s * 125,000 ticks/s = 125
	// So when TCNT1 register equals 125,
	// 1 ms has passed. Thus, we compare to 125.
	// AVR timer interrupt mask register
	TIMSK1 = 0x02; // bit1: OCIE1A -- enables compare match interrupt
 2c2:	8f e6       	ldi	r24, 0x6F	; 111
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	22 e0       	ldi	r18, 0x02	; 2
 2c8:	fc 01       	movw	r30, r24
 2ca:	20 83       	st	Z, r18

	//Initialize avr counter
	TCNT1=0;
 2cc:	84 e8       	ldi	r24, 0x84	; 132
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	11 82       	std	Z+1, r1	; 0x01
 2d4:	10 82       	st	Z, r1

	_avr_timer_cntcurr = _avr_timer_M;
 2d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2da:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2de:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2e2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2e6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 2ea:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 2ee:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 2f2:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
	// TimerISR will be called every _avr_timer_cntcurr milliseconds

	//Enable global interrupts
	SREG |= 0x80; // 0x80: 1000000
 2f6:	8f e5       	ldi	r24, 0x5F	; 95
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	2f e5       	ldi	r18, 0x5F	; 95
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	f9 01       	movw	r30, r18
 300:	20 81       	ld	r18, Z
 302:	20 68       	ori	r18, 0x80	; 128
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
}
 308:	00 00       	nop
 30a:	df 91       	pop	r29
 30c:	cf 91       	pop	r28
 30e:	08 95       	ret

00000310 <TimerOff>:

void TimerOff() {
 310:	cf 93       	push	r28
 312:	df 93       	push	r29
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
 318:	81 e8       	ldi	r24, 0x81	; 129
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	fc 01       	movw	r30, r24
 31e:	10 82       	st	Z, r1
}
 320:	00 00       	nop
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <TimerISR>:

void TimerISR() {
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	cd b7       	in	r28, 0x3d	; 61
 32e:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
}
 336:	00 00       	nop
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 33e:	1f 92       	push	r1
 340:	0f 92       	push	r0
 342:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 34e:	0f 92       	push	r0
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 370:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 374:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 378:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 37c:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	a1 09       	sbc	r26, r1
 384:	b1 09       	sbc	r27, r1
 386:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 38a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 38e:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 392:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 396:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 39a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 39e:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 3a2:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 3a6:	89 2b       	or	r24, r25
 3a8:	8a 2b       	or	r24, r26
 3aa:	8b 2b       	or	r24, r27
 3ac:	89 f4       	brne	.+34     	; 0x3d0 <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 3ae:	bc df       	rcall	.-136    	; 0x328 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 3b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3b8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3bc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3c0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 3c4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 3c8:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 3cc:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
	}
}
 3d0:	00 00       	nop
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	ff 91       	pop	r31
 3d8:	ef 91       	pop	r30
 3da:	bf 91       	pop	r27
 3dc:	af 91       	pop	r26
 3de:	9f 91       	pop	r25
 3e0:	8f 91       	pop	r24
 3e2:	7f 91       	pop	r23
 3e4:	6f 91       	pop	r22
 3e6:	5f 91       	pop	r21
 3e8:	4f 91       	pop	r20
 3ea:	3f 91       	pop	r19
 3ec:	2f 91       	pop	r18
 3ee:	0f 90       	pop	r0
 3f0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3f4:	0f 90       	pop	r0
 3f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	00 d0       	rcall	.+0      	; 0x406 <TimerSet+0x6>
 406:	00 d0       	rcall	.+0      	; 0x408 <TimerSet+0x8>
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	69 83       	std	Y+1, r22	; 0x01
 40e:	7a 83       	std	Y+2, r23	; 0x02
 410:	8b 83       	std	Y+3, r24	; 0x03
 412:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 414:	89 81       	ldd	r24, Y+1	; 0x01
 416:	9a 81       	ldd	r25, Y+2	; 0x02
 418:	ab 81       	ldd	r26, Y+3	; 0x03
 41a:	bc 81       	ldd	r27, Y+4	; 0x04
 41c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 420:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 424:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 428:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 42c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 430:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 434:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 438:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 43c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 440:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 444:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 448:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
}
 44c:	00 00       	nop
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <main>:

void main()
{
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	00 d0       	rcall	.+0      	; 0x462 <main+0x6>
 462:	00 d0       	rcall	.+0      	; 0x464 <main+0x8>
 464:	cd b7       	in	r28, 0x3d	; 61
 466:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0; PINA = -1;	//PINA is input
 468:	81 e2       	ldi	r24, 0x21	; 33
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	fc 01       	movw	r30, r24
 46e:	10 82       	st	Z, r1
 470:	80 e2       	ldi	r24, 0x20	; 32
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	2f ef       	ldi	r18, 0xFF	; 255
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18
	DDRB = -1; PORTB = 0;
 47a:	84 e2       	ldi	r24, 0x24	; 36
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	2f ef       	ldi	r18, 0xFF	; 255
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
 484:	85 e2       	ldi	r24, 0x25	; 37
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	fc 01       	movw	r30, r24
 48a:	10 82       	st	Z, r1

	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 48c:	87 e2       	ldi	r24, 0x27	; 39
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	2f ef       	ldi	r18, 0xFF	; 255
 492:	fc 01       	movw	r30, r24
 494:	20 83       	st	Z, r18
 496:	88 e2       	ldi	r24, 0x28	; 40
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 49e:	8a e2       	ldi	r24, 0x2A	; 42
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
 4a8:	8b e2       	ldi	r24, 0x2B	; 43
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	fc 01       	movw	r30, r24
 4ae:	10 82       	st	Z, r1
	
	// Initializes the LCD display
	LCD_init();
 4b0:	15 de       	rcall	.-982    	; 0xdc <LCD_init>

	char i = 0;
 4b2:	19 82       	std	Y+1, r1	; 0x01
	char score = 5;
 4b4:	85 e0       	ldi	r24, 0x05	; 5
 4b6:	8a 83       	std	Y+2, r24	; 0x02
	char out = 0;
 4b8:	1b 82       	std	Y+3, r1	; 0x03
	TimerSet(300);
 4ba:	6c e2       	ldi	r22, 0x2C	; 44
 4bc:	71 e0       	ldi	r23, 0x01	; 1
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 4c2:	9e df       	rcall	.-196    	; 0x400 <TimerSet>
 4c4:	ee de       	rcall	.-548    	; 0x2a2 <TimerOn>
	char pressed = 0;
 4c6:	1c 82       	std	Y+4, r1	; 0x04
	while(1) {
		if(i < 2) {
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	82 30       	cpi	r24, 0x02	; 2
 4cc:	20 f4       	brcc	.+8      	; 0x4d6 <main+0x7a>
			i++;
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	8f 5f       	subi	r24, 0xFF	; 255
 4d2:	89 83       	std	Y+1, r24	; 0x01
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <main+0x7c>
		} else {
			i = 0;
 4d6:	19 82       	std	Y+1, r1	; 0x01
		}

		if(pressed) {
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	88 23       	and	r24, r24
 4dc:	59 f0       	breq	.+22     	; 0x4f4 <main+0x98>
			if(PINA & 1) {
 4de:	80 e2       	ldi	r24, 0x20	; 32
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	fc 01       	movw	r30, r24
 4e4:	80 81       	ld	r24, Z
 4e6:	88 2f       	mov	r24, r24
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	81 70       	andi	r24, 0x01	; 1
 4ec:	99 27       	eor	r25, r25
 4ee:	89 2b       	or	r24, r25
 4f0:	09 f0       	breq	.+2      	; 0x4f4 <main+0x98>
				pressed = 0;
 4f2:	1c 82       	std	Y+4, r1	; 0x04
			}
		}

		PORTB = 1 << i;
 4f4:	85 e2       	ldi	r24, 0x25	; 37
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	29 81       	ldd	r18, Y+1	; 0x01
 4fa:	42 2f       	mov	r20, r18
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <main+0xac>
 504:	22 0f       	add	r18, r18
 506:	33 1f       	adc	r19, r19
 508:	4a 95       	dec	r20
 50a:	e2 f7       	brpl	.-8      	; 0x504 <main+0xa8>
 50c:	fc 01       	movw	r30, r24
 50e:	20 83       	st	Z, r18
		while(!TimerFlag) {
 510:	2f c0       	rjmp	.+94     	; 0x570 <main+0x114>
			if(!pressed) {
 512:	8c 81       	ldd	r24, Y+4	; 0x04
 514:	88 23       	and	r24, r24
 516:	61 f5       	brne	.+88     	; 0x570 <main+0x114>
				if(~PINA & 1) {
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	fc 01       	movw	r30, r24
 51e:	80 81       	ld	r24, Z
 520:	88 2f       	mov	r24, r24
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	81 70       	andi	r24, 0x01	; 1
 526:	99 27       	eor	r25, r25
 528:	89 2b       	or	r24, r25
 52a:	11 f5       	brne	.+68     	; 0x570 <main+0x114>
					if(i == 1) {
 52c:	89 81       	ldd	r24, Y+1	; 0x01
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	21 f4       	brne	.+8      	; 0x53a <main+0xde>
						score++;
 532:	8a 81       	ldd	r24, Y+2	; 0x02
 534:	8f 5f       	subi	r24, 0xFF	; 255
 536:	8a 83       	std	Y+2, r24	; 0x02
 538:	06 c0       	rjmp	.+12     	; 0x546 <main+0xea>
						} else {
						if(score > 0) {
 53a:	8a 81       	ldd	r24, Y+2	; 0x02
 53c:	88 23       	and	r24, r24
 53e:	19 f0       	breq	.+6      	; 0x546 <main+0xea>
							score--;
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	81 50       	subi	r24, 0x01	; 1
 544:	8a 83       	std	Y+2, r24	; 0x02
						}
					}
					pressed = 1;
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	8c 83       	std	Y+4, r24	; 0x04

					if(out != score) {
 54a:	9b 81       	ldd	r25, Y+3	; 0x03
 54c:	8a 81       	ldd	r24, Y+2	; 0x02
 54e:	98 17       	cp	r25, r24
						out = score;
 550:	79 f0       	breq	.+30     	; 0x570 <main+0x114>
 552:	8a 81       	ldd	r24, Y+2	; 0x02
						LCD_ClearScreen();
 554:	8b 83       	std	Y+3, r24	; 0x03
 556:	b8 dd       	rcall	.-1168   	; 0xc8 <LCD_ClearScreen>
						if(out == 10) {
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	8a 30       	cpi	r24, 0x0A	; 10
							LCD_DisplayString(1, "You won!");
 55c:	31 f4       	brne	.+12     	; 0x56a <main+0x10e>
 55e:	64 e0       	ldi	r22, 0x04	; 4
 560:	71 e0       	ldi	r23, 0x01	; 1
 562:	81 e0       	ldi	r24, 0x01	; 1
							TimerOff();
 564:	2f de       	rcall	.-930    	; 0x1c4 <LCD_DisplayString>
 566:	d4 de       	rcall	.-600    	; 0x310 <TimerOff>
 568:	03 c0       	rjmp	.+6      	; 0x570 <main+0x114>
							} else {
							LCD_WriteData('0' + out);
 56a:	8b 81       	ldd	r24, Y+3	; 0x03
 56c:	80 5d       	subi	r24, 0xD0	; 208
 56e:	fb dd       	rcall	.-1034   	; 0x166 <LCD_WriteData>
 570:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
				pressed = 0;
			}
		}

		PORTB = 1 << i;
		while(!TimerFlag) {
 574:	88 23       	and	r24, r24
 576:	69 f2       	breq	.-102    	; 0x512 <main+0xb6>
 578:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
					}
				}
			}
			
		}
		TimerFlag = 0;
 57c:	9b 81       	ldd	r25, Y+3	; 0x03

		if(out != score) {
 57e:	8a 81       	ldd	r24, Y+2	; 0x02
 580:	98 17       	cp	r25, r24
 582:	09 f4       	brne	.+2      	; 0x586 <main+0x12a>
 584:	a1 cf       	rjmp	.-190    	; 0x4c8 <main+0x6c>
			out = score;
 586:	8a 81       	ldd	r24, Y+2	; 0x02
 588:	8b 83       	std	Y+3, r24	; 0x03
			LCD_ClearScreen();
 58a:	9e dd       	rcall	.-1220   	; 0xc8 <LCD_ClearScreen>
			if(out == 10) {
 58c:	8b 81       	ldd	r24, Y+3	; 0x03
 58e:	8a 30       	cpi	r24, 0x0A	; 10
 590:	31 f4       	brne	.+12     	; 0x59e <main+0x142>
				LCD_DisplayString(1, "You won!");
 592:	64 e0       	ldi	r22, 0x04	; 4
 594:	71 e0       	ldi	r23, 0x01	; 1
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	15 de       	rcall	.-982    	; 0x1c4 <LCD_DisplayString>
				TimerOff();
 59a:	ba de       	rcall	.-652    	; 0x310 <TimerOff>
 59c:	95 cf       	rjmp	.-214    	; 0x4c8 <main+0x6c>
 59e:	8b 81       	ldd	r24, Y+3	; 0x03
			} else {
				LCD_WriteData('0' + out);
 5a0:	80 5d       	subi	r24, 0xD0	; 208
 5a2:	e1 dd       	rcall	.-1086   	; 0x166 <LCD_WriteData>
 5a4:	91 cf       	rjmp	.-222    	; 0x4c8 <main+0x6c>

000005a6 <_exit>:
 5a6:	f8 94       	cli

000005a8 <__stop_program>:
			TimerFlag = 0;
			TimerOff();
			
		}
		*/
	}
 5a8:	ff cf       	rjmp	.-2      	; 0x5a8 <__stop_program>
