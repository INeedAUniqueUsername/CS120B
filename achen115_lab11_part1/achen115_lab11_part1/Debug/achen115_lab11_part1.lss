
achen115_lab11_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000466  000004fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000466  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  000004fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc0  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4d  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000082b  00000000  00000000  0000204d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063e  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072e  00000000  00000000  000030aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	f1 c0       	rjmp	.+482    	; 0x218 <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9f 01       	movw	r18, r30
  8e:	d1 01       	movw	r26, r2
  90:	d1 01       	movw	r26, r2
  92:	d1 01       	movw	r26, r2
  94:	d1 01       	movw	r26, r2
  96:	d1 01       	movw	r26, r2
  98:	d1 01       	movw	r26, r2
  9a:	d1 01       	movw	r26, r2
  9c:	d1 01       	movw	r26, r2
  9e:	d1 01       	movw	r26, r2
  a0:	d1 01       	movw	r26, r2
  a2:	d1 01       	movw	r26, r2
  a4:	d1 01       	movw	r26, r2
  a6:	d1 01       	movw	r26, r2
  a8:	d1 01       	movw	r26, r2
  aa:	d1 01       	movw	r26, r2
  ac:	d1 01       	movw	r26, r2
  ae:	d1 01       	movw	r26, r2
  b0:	d1 01       	movw	r26, r2
  b2:	d1 01       	movw	r26, r2
  b4:	d1 01       	movw	r26, r2
  b6:	d1 01       	movw	r26, r2
  b8:	d1 01       	movw	r26, r2
  ba:	d1 01       	movw	r26, r2
  bc:	d1 01       	movw	r26, r2
  be:	d1 01       	movw	r26, r2
  c0:	d1 01       	movw	r26, r2
  c2:	d1 01       	movw	r26, r2
  c4:	d1 01       	movw	r26, r2
  c6:	d1 01       	movw	r26, r2
  c8:	d1 01       	movw	r26, r2
  ca:	d1 01       	movw	r26, r2
  cc:	d1 01       	movw	r26, r2
  ce:	d1 01       	movw	r26, r2
  d0:	d1 01       	movw	r26, r2
  d2:	ce 01       	movw	r24, r28
  d4:	d1 01       	movw	r26, r2
  d6:	d1 01       	movw	r26, r2
  d8:	d1 01       	movw	r26, r2
  da:	d1 01       	movw	r26, r2
  dc:	d1 01       	movw	r26, r2
  de:	d1 01       	movw	r26, r2
  e0:	c9 01       	movw	r24, r18
  e2:	d1 01       	movw	r26, r2
  e4:	d1 01       	movw	r26, r2
  e6:	d1 01       	movw	r26, r2
  e8:	d1 01       	movw	r26, r2
  ea:	d1 01       	movw	r26, r2
  ec:	cc 01       	movw	r24, r24
  ee:	a2 01       	movw	r20, r4
  f0:	a5 01       	movw	r20, r10
  f2:	a8 01       	movw	r20, r16
  f4:	ab 01       	movw	r20, r22
  f6:	ae 01       	movw	r20, r28
  f8:	b1 01       	movw	r22, r2
  fa:	b4 01       	movw	r22, r8
  fc:	b7 01       	movw	r22, r14
  fe:	ba 01       	movw	r22, r20
 100:	d1 01       	movw	r26, r2
 102:	d1 01       	movw	r26, r2
 104:	d1 01       	movw	r26, r2
 106:	d1 01       	movw	r26, r2
 108:	d1 01       	movw	r26, r2
 10a:	d1 01       	movw	r26, r2
 10c:	d1 01       	movw	r26, r2
 10e:	bd 01       	movw	r22, r26
 110:	c0 01       	movw	r24, r0
 112:	c3 01       	movw	r24, r6
 114:	c6 01       	movw	r24, r12

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e6 e6       	ldi	r30, 0x66	; 102
 12a:	f4 e0       	ldi	r31, 0x04	; 4
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a4 30       	cpi	r26, 0x04	; 4
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a4 e0       	ldi	r26, 0x04	; 4
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a4 31       	cpi	r26, 0x14	; 20
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	2e d1       	rcall	.+604    	; 0x3aa <main>
 14e:	89 c1       	rjmp	.+786    	; 0x462 <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <delay_ms>:
		index++;
	} else {
		index = 0;
	}
	return 0;
}
 152:	18 16       	cp	r1, r24
 154:	19 06       	cpc	r1, r25
 156:	5c f0       	brlt	.+22     	; 0x16e <delay_ms+0x1c>
 158:	08 95       	ret
 15a:	00 00       	nop
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
 160:	e1 f7       	brne	.-8      	; 0x15a <delay_ms+0x8>
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	84 17       	cp	r24, r20
 168:	95 07       	cpc	r25, r21
 16a:	19 f4       	brne	.+6      	; 0x172 <delay_ms+0x20>
 16c:	08 95       	ret
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	27 e0       	ldi	r18, 0x07	; 7
 174:	33 e0       	ldi	r19, 0x03	; 3
 176:	f1 cf       	rjmp	.-30     	; 0x15a <delay_ms+0x8>

00000178 <LCD_WriteCommand>:
 178:	5e 98       	cbi	0x0b, 6	; 11
 17a:	88 b9       	out	0x08, r24	; 8
 17c:	5f 9a       	sbi	0x0b, 7	; 11
 17e:	00 00       	nop
 180:	5f 98       	cbi	0x0b, 7	; 11
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	e5 cf       	rjmp	.-54     	; 0x152 <delay_ms>
 188:	08 95       	ret

0000018a <LCD_ClearScreen>:
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	f5 cf       	rjmp	.-22     	; 0x178 <LCD_WriteCommand>
 18e:	08 95       	ret

00000190 <LCD_init>:
 190:	84 e6       	ldi	r24, 0x64	; 100
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	de df       	rcall	.-68     	; 0x152 <delay_ms>
 196:	88 e3       	ldi	r24, 0x38	; 56
 198:	ef df       	rcall	.-34     	; 0x178 <LCD_WriteCommand>
 19a:	86 e0       	ldi	r24, 0x06	; 6
 19c:	ed df       	rcall	.-38     	; 0x178 <LCD_WriteCommand>
 19e:	8f e0       	ldi	r24, 0x0F	; 15
 1a0:	eb df       	rcall	.-42     	; 0x178 <LCD_WriteCommand>
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	e9 df       	rcall	.-46     	; 0x178 <LCD_WriteCommand>
 1a6:	8a e0       	ldi	r24, 0x0A	; 10
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	d3 cf       	rjmp	.-90     	; 0x152 <delay_ms>
 1ac:	08 95       	ret

000001ae <TimerSet>:
 1ae:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1b2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1ba:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1be:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <_avr_timer_cntcurr>
 1c2:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <_avr_timer_cntcurr+0x1>
 1c6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr+0x2>
 1ca:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x3>
 1ce:	08 95       	ret

000001d0 <TimerOn>:
 1d0:	8b e0       	ldi	r24, 0x0B	; 11
 1d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1d6:	8d e7       	ldi	r24, 0x7D	; 125
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1e8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1f8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1fc:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 200:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 204:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 208:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 20c:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 210:	8f b7       	in	r24, 0x3f	; 63
 212:	80 68       	ori	r24, 0x80	; 128
 214:	8f bf       	out	0x3f, r24	; 63
 216:	08 95       	ret

00000218 <__vector_13>:
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 22e:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 232:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 236:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	a1 09       	sbc	r26, r1
 23e:	b1 09       	sbc	r27, r1
 240:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 244:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 248:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 24c:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 250:	89 2b       	or	r24, r25
 252:	8a 2b       	or	r24, r26
 254:	8b 2b       	or	r24, r27
 256:	99 f4       	brne	.+38     	; 0x27e <__vector_13+0x66>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TimerFlag>
 25e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 262:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 266:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 26a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 26e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 272:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 276:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 27a:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 27e:	bf 91       	pop	r27
 280:	af 91       	pop	r26
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <GetKeypadKey>:
 290:	8f ee       	ldi	r24, 0xEF	; 239
 292:	82 b9       	out	0x02, r24	; 2
 294:	00 00       	nop
 296:	00 9b       	sbis	0x00, 0	; 0
 298:	29 c0       	rjmp	.+82     	; 0x2ec <GetKeypadKey+0x5c>
 29a:	01 9b       	sbis	0x00, 1	; 0
 29c:	29 c0       	rjmp	.+82     	; 0x2f0 <GetKeypadKey+0x60>
 29e:	02 9b       	sbis	0x00, 2	; 0
 2a0:	29 c0       	rjmp	.+82     	; 0x2f4 <GetKeypadKey+0x64>
 2a2:	03 9b       	sbis	0x00, 3	; 0
 2a4:	29 c0       	rjmp	.+82     	; 0x2f8 <GetKeypadKey+0x68>
 2a6:	8f ed       	ldi	r24, 0xDF	; 223
 2a8:	82 b9       	out	0x02, r24	; 2
 2aa:	00 00       	nop
 2ac:	00 9b       	sbis	0x00, 0	; 0
 2ae:	26 c0       	rjmp	.+76     	; 0x2fc <GetKeypadKey+0x6c>
 2b0:	01 9b       	sbis	0x00, 1	; 0
 2b2:	26 c0       	rjmp	.+76     	; 0x300 <GetKeypadKey+0x70>
 2b4:	02 9b       	sbis	0x00, 2	; 0
 2b6:	26 c0       	rjmp	.+76     	; 0x304 <GetKeypadKey+0x74>
 2b8:	03 9b       	sbis	0x00, 3	; 0
 2ba:	26 c0       	rjmp	.+76     	; 0x308 <GetKeypadKey+0x78>
 2bc:	8f eb       	ldi	r24, 0xBF	; 191
 2be:	82 b9       	out	0x02, r24	; 2
 2c0:	00 00       	nop
 2c2:	00 9b       	sbis	0x00, 0	; 0
 2c4:	23 c0       	rjmp	.+70     	; 0x30c <GetKeypadKey+0x7c>
 2c6:	01 9b       	sbis	0x00, 1	; 0
 2c8:	23 c0       	rjmp	.+70     	; 0x310 <GetKeypadKey+0x80>
 2ca:	02 9b       	sbis	0x00, 2	; 0
 2cc:	23 c0       	rjmp	.+70     	; 0x314 <GetKeypadKey+0x84>
 2ce:	03 9b       	sbis	0x00, 3	; 0
 2d0:	23 c0       	rjmp	.+70     	; 0x318 <GetKeypadKey+0x88>
 2d2:	8f e7       	ldi	r24, 0x7F	; 127
 2d4:	82 b9       	out	0x02, r24	; 2
 2d6:	00 00       	nop
 2d8:	00 9b       	sbis	0x00, 0	; 0
 2da:	20 c0       	rjmp	.+64     	; 0x31c <GetKeypadKey+0x8c>
 2dc:	01 9b       	sbis	0x00, 1	; 0
 2de:	20 c0       	rjmp	.+64     	; 0x320 <GetKeypadKey+0x90>
 2e0:	02 9b       	sbis	0x00, 2	; 0
 2e2:	20 c0       	rjmp	.+64     	; 0x324 <GetKeypadKey+0x94>
 2e4:	03 9b       	sbis	0x00, 3	; 0
 2e6:	20 c0       	rjmp	.+64     	; 0x328 <GetKeypadKey+0x98>
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
 2ec:	81 e3       	ldi	r24, 0x31	; 49
 2ee:	08 95       	ret
 2f0:	84 e3       	ldi	r24, 0x34	; 52
 2f2:	08 95       	ret
 2f4:	87 e3       	ldi	r24, 0x37	; 55
 2f6:	08 95       	ret
 2f8:	8a e2       	ldi	r24, 0x2A	; 42
 2fa:	08 95       	ret
 2fc:	82 e3       	ldi	r24, 0x32	; 50
 2fe:	08 95       	ret
 300:	85 e3       	ldi	r24, 0x35	; 53
 302:	08 95       	ret
 304:	88 e3       	ldi	r24, 0x38	; 56
 306:	08 95       	ret
 308:	80 e3       	ldi	r24, 0x30	; 48
 30a:	08 95       	ret
 30c:	83 e3       	ldi	r24, 0x33	; 51
 30e:	08 95       	ret
 310:	86 e3       	ldi	r24, 0x36	; 54
 312:	08 95       	ret
 314:	89 e3       	ldi	r24, 0x39	; 57
 316:	08 95       	ret
 318:	83 e2       	ldi	r24, 0x23	; 35
 31a:	08 95       	ret
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	08 95       	ret
 320:	82 e4       	ldi	r24, 0x42	; 66
 322:	08 95       	ret
 324:	83 e4       	ldi	r24, 0x43	; 67
 326:	08 95       	ret
 328:	84 e4       	ldi	r24, 0x44	; 68
 32a:	08 95       	ret

0000032c <KeypadTick>:
 32c:	b1 df       	rcall	.-158    	; 0x290 <GetKeypadKey>
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	85 34       	cpi	r24, 0x45	; 69
 332:	91 05       	cpc	r25, r1
 334:	b0 f5       	brcc	.+108    	; 0x3a2 <KeypadTick+0x76>
 336:	fc 01       	movw	r30, r24
 338:	ea 5b       	subi	r30, 0xBA	; 186
 33a:	ff 4f       	sbci	r31, 0xFF	; 255
 33c:	89 c0       	rjmp	.+274    	; 0x450 <__tablejump2__>
 33e:	8f e1       	ldi	r24, 0x1F	; 31
 340:	85 b9       	out	0x05, r24	; 5
 342:	31 c0       	rjmp	.+98     	; 0x3a6 <KeypadTick+0x7a>
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	85 b9       	out	0x05, r24	; 5
 348:	2e c0       	rjmp	.+92     	; 0x3a6 <KeypadTick+0x7a>
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	85 b9       	out	0x05, r24	; 5
 34e:	2b c0       	rjmp	.+86     	; 0x3a6 <KeypadTick+0x7a>
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	85 b9       	out	0x05, r24	; 5
 354:	28 c0       	rjmp	.+80     	; 0x3a6 <KeypadTick+0x7a>
 356:	84 e0       	ldi	r24, 0x04	; 4
 358:	85 b9       	out	0x05, r24	; 5
 35a:	25 c0       	rjmp	.+74     	; 0x3a6 <KeypadTick+0x7a>
 35c:	85 e0       	ldi	r24, 0x05	; 5
 35e:	85 b9       	out	0x05, r24	; 5
 360:	22 c0       	rjmp	.+68     	; 0x3a6 <KeypadTick+0x7a>
 362:	86 e0       	ldi	r24, 0x06	; 6
 364:	85 b9       	out	0x05, r24	; 5
 366:	1f c0       	rjmp	.+62     	; 0x3a6 <KeypadTick+0x7a>
 368:	87 e0       	ldi	r24, 0x07	; 7
 36a:	85 b9       	out	0x05, r24	; 5
 36c:	1c c0       	rjmp	.+56     	; 0x3a6 <KeypadTick+0x7a>
 36e:	88 e0       	ldi	r24, 0x08	; 8
 370:	85 b9       	out	0x05, r24	; 5
 372:	19 c0       	rjmp	.+50     	; 0x3a6 <KeypadTick+0x7a>
 374:	89 e0       	ldi	r24, 0x09	; 9
 376:	85 b9       	out	0x05, r24	; 5
 378:	16 c0       	rjmp	.+44     	; 0x3a6 <KeypadTick+0x7a>
 37a:	8a e0       	ldi	r24, 0x0A	; 10
 37c:	85 b9       	out	0x05, r24	; 5
 37e:	13 c0       	rjmp	.+38     	; 0x3a6 <KeypadTick+0x7a>
 380:	8b e0       	ldi	r24, 0x0B	; 11
 382:	85 b9       	out	0x05, r24	; 5
 384:	10 c0       	rjmp	.+32     	; 0x3a6 <KeypadTick+0x7a>
 386:	8c e0       	ldi	r24, 0x0C	; 12
 388:	85 b9       	out	0x05, r24	; 5
 38a:	0d c0       	rjmp	.+26     	; 0x3a6 <KeypadTick+0x7a>
 38c:	8d e0       	ldi	r24, 0x0D	; 13
 38e:	85 b9       	out	0x05, r24	; 5
 390:	0a c0       	rjmp	.+20     	; 0x3a6 <KeypadTick+0x7a>
 392:	8e e0       	ldi	r24, 0x0E	; 14
 394:	85 b9       	out	0x05, r24	; 5
 396:	07 c0       	rjmp	.+14     	; 0x3a6 <KeypadTick+0x7a>
 398:	15 b8       	out	0x05, r1	; 5
 39a:	05 c0       	rjmp	.+10     	; 0x3a6 <KeypadTick+0x7a>
 39c:	8f e0       	ldi	r24, 0x0F	; 15
 39e:	85 b9       	out	0x05, r24	; 5
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <KeypadTick+0x7a>
 3a2:	8b e1       	ldi	r24, 0x1B	; 27
 3a4:	85 b9       	out	0x05, r24	; 5
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret

000003aa <main>:

// Implement scheduler code from PES.
int main() {
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xF0; PINA = 0x0F; // PA7..4 outputs init 0s, PA3..0 inputs init 1s
 3aa:	80 ef       	ldi	r24, 0xF0	; 240
 3ac:	81 b9       	out	0x01, r24	; 1
 3ae:	8f e0       	ldi	r24, 0x0F	; 15
 3b0:	80 b9       	out	0x00, r24	; 0
	DDRB = 0xFF; PORTB = 0x00;
 3b2:	8f ef       	ldi	r24, 0xFF	; 255
 3b4:	84 b9       	out	0x04, r24	; 4
 3b6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 3b8:	87 b9       	out	0x07, r24	; 7
 3ba:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 3bc:	8a b9       	out	0x0a, r24	; 10
 3be:	1b b8       	out	0x0b, r1	; 11
	*/
	static task keypad;
	task *tasks[] = { &keypad };
	const unsigned short numTasks = 1;

	keypad.state = -1;//Task initial state.
 3c0:	e4 e0       	ldi	r30, 0x04	; 4
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	80 83       	st	Z, r24
	keypad.period = 1;//Task Period.
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	a0 e0       	ldi	r26, 0x00	; 0
 3cc:	b0 e0       	ldi	r27, 0x00	; 0
 3ce:	81 83       	std	Z+1, r24	; 0x01
 3d0:	92 83       	std	Z+2, r25	; 0x02
 3d2:	a3 83       	std	Z+3, r26	; 0x03
 3d4:	b4 83       	std	Z+4, r27	; 0x04
	keypad.elapsedTime = 1;//Task current elapsed time.
 3d6:	85 83       	std	Z+5, r24	; 0x05
 3d8:	96 83       	std	Z+6, r25	; 0x06
 3da:	a7 83       	std	Z+7, r26	; 0x07
 3dc:	b0 87       	std	Z+8, r27	; 0x08
	keypad.TickFct = &KeypadTick;//Function pointer for the tick.
 3de:	86 e9       	ldi	r24, 0x96	; 150
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	92 87       	std	Z+10, r25	; 0x0a
 3e4:	81 87       	std	Z+9, r24	; 0x09

	LCD_init();
 3e6:	d4 de       	rcall	.-600    	; 0x190 <LCD_init>
	LCD_ClearScreen();
 3e8:	d0 de       	rcall	.-608    	; 0x18a <LCD_ClearScreen>
 3ea:	64 e6       	ldi	r22, 0x64	; 100
	task4.period = SMTick4_period;//Task Period.
	task4.elapsedTime = SMTick4_period; // Task current elasped time.
	task4.TickFct = &SMTick4; // Function pointer for the tick.
	*/
	// Set the timer and turn it on
	TimerSet(GCD);
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	dd de       	rcall	.-582    	; 0x1ae <TimerSet>
	TimerOn();
 3f4:	ed de       	rcall	.-550    	; 0x1d0 <TimerOn>
 3f6:	c4 e0       	ldi	r28, 0x04	; 4
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3f8:	d1 e0       	ldi	r29, 0x01	; 1
 3fa:	4d 81       	ldd	r20, Y+5	; 0x05
 3fc:	5e 81       	ldd	r21, Y+6	; 0x06
 3fe:	6f 81       	ldd	r22, Y+7	; 0x07
 400:	78 85       	ldd	r23, Y+8	; 0x08
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	9a 81       	ldd	r25, Y+2	; 0x02
 406:	ab 81       	ldd	r26, Y+3	; 0x03
 408:	bc 81       	ldd	r27, Y+4	; 0x04
 40a:	48 17       	cp	r20, r24
 40c:	59 07       	cpc	r21, r25
 40e:	6a 07       	cpc	r22, r26
 410:	7b 07       	cpc	r23, r27
 412:	61 f4       	brne	.+24     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 414:	88 81       	ld	r24, Y
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 416:	e9 85       	ldd	r30, Y+9	; 0x09
 418:	fa 85       	ldd	r31, Y+10	; 0x0a
 41a:	08 2e       	mov	r0, r24
 41c:	00 0c       	add	r0, r0
 41e:	99 0b       	sbc	r25, r25
 420:	09 95       	icall
 422:	88 83       	st	Y, r24
 424:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 426:	1e 82       	std	Y+6, r1	; 0x06
 428:	1f 82       	std	Y+7, r1	; 0x07
 42a:	18 86       	std	Y+8, r1	; 0x08
 42c:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 42e:	9e 81       	ldd	r25, Y+6	; 0x06
 430:	af 81       	ldd	r26, Y+7	; 0x07
 432:	b8 85       	ldd	r27, Y+8	; 0x08
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	a1 1d       	adc	r26, r1
 438:	b1 1d       	adc	r27, r1
 43a:	8d 83       	std	Y+5, r24	; 0x05
 43c:	9e 83       	std	Y+6, r25	; 0x06
 43e:	af 83       	std	Y+7, r26	; 0x07
 440:	b8 87       	std	Y+8, r27	; 0x08
 442:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <TimerFlag>
		}
		while(!TimerFlag);
 446:	88 23       	and	r24, r24
 448:	e1 f3       	breq	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TimerFlag>
		TimerFlag = 0;
 44e:	d5 cf       	rjmp	.-86     	; 0x3fa <main+0x50>

00000450 <__tablejump2__>:
	}
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	00 24       	eor	r0, r0
 456:	00 1c       	adc	r0, r0
 458:	0b be       	out	0x3b, r0	; 59
 45a:	07 90       	elpm	r0, Z+
 45c:	f6 91       	elpm	r31, Z
 45e:	e0 2d       	mov	r30, r0
 460:	09 94       	ijmp

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
