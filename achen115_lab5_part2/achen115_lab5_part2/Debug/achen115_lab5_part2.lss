
achen115_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000857  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a5  00000000  00000000  00000a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00001234  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000018f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000193f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	59 c0       	rjmp	.+178    	; 0x14e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>



int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRA = 0;	PINA = -1;
  aa:	81 e2       	ldi	r24, 0x21	; 33
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	fc 01       	movw	r30, r24
  b0:	10 82       	st	Z, r1
  b2:	80 e2       	ldi	r24, 0x20	; 32
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	fc 01       	movw	r30, r24
  ba:	20 83       	st	Z, r18
	DDRC = -1;	PORTC = 0;
  bc:	87 e2       	ldi	r24, 0x27	; 39
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
  c6:	88 e2       	ldi	r24, 0x28	; 40
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	10 82       	st	Z, r1
	char C = 7;
  ce:	87 e0       	ldi	r24, 0x07	; 7
  d0:	89 83       	std	Y+1, r24	; 0x01
	char state = 0;
  d2:	1a 82       	std	Y+2, r1	; 0x02
    while (1) 
    {	
		char stateNext = ~PINA & 3;
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	fc 01       	movw	r30, r24
  da:	80 81       	ld	r24, Z
  dc:	80 95       	com	r24
  de:	83 70       	andi	r24, 0x03	; 3
  e0:	8b 83       	std	Y+3, r24	; 0x03
		if(stateNext != state) {
  e2:	9b 81       	ldd	r25, Y+3	; 0x03
  e4:	8a 81       	ldd	r24, Y+2	; 0x02
  e6:	98 17       	cp	r25, r24
  e8:	61 f1       	breq	.+88     	; 0x142 <main+0xa4>
			switch(stateNext) {
  ea:	8b 81       	ldd	r24, Y+3	; 0x03
  ec:	88 2f       	mov	r24, r24
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	91 05       	cpc	r25, r1
  f4:	49 f0       	breq	.+18     	; 0x108 <main+0x6a>
  f6:	82 30       	cpi	r24, 0x02	; 2
  f8:	91 05       	cpc	r25, r1
  fa:	e4 f0       	brlt	.+56     	; 0x134 <main+0x96>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	91 05       	cpc	r25, r1
 100:	69 f0       	breq	.+26     	; 0x11c <main+0x7e>
 102:	03 97       	sbiw	r24, 0x03	; 3
 104:	a9 f0       	breq	.+42     	; 0x130 <main+0x92>
 106:	1b c0       	rjmp	.+54     	; 0x13e <main+0xa0>
				case 0:
					break;
				case 1:
					//Make sure we're not getting here by releasing from state 3
					if(state != 3) {
 108:	8a 81       	ldd	r24, Y+2	; 0x02
 10a:	83 30       	cpi	r24, 0x03	; 3
 10c:	a9 f0       	breq	.+42     	; 0x138 <main+0x9a>
						if(C < 9)
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	89 30       	cpi	r24, 0x09	; 9
 112:	90 f4       	brcc	.+36     	; 0x138 <main+0x9a>
							C++;
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	8f 5f       	subi	r24, 0xFF	; 255
 118:	89 83       	std	Y+1, r24	; 0x01
					}
					break;
 11a:	0e c0       	rjmp	.+28     	; 0x138 <main+0x9a>
				case 2:
					//Make sure we're not getting here by releasing from state 3
					if(state != 3) {
 11c:	8a 81       	ldd	r24, Y+2	; 0x02
 11e:	83 30       	cpi	r24, 0x03	; 3
 120:	69 f0       	breq	.+26     	; 0x13c <main+0x9e>
						if(C > 0)
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	88 23       	and	r24, r24
 126:	51 f0       	breq	.+20     	; 0x13c <main+0x9e>
							C--;
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	89 83       	std	Y+1, r24	; 0x01
					}
					break;
 12e:	06 c0       	rjmp	.+12     	; 0x13c <main+0x9e>
				case 3:
					C = 0;
 130:	19 82       	std	Y+1, r1	; 0x01
					break;
 132:	05 c0       	rjmp	.+10     	; 0x13e <main+0xa0>
    {	
		char stateNext = ~PINA & 3;
		if(stateNext != state) {
			switch(stateNext) {
				case 0:
					break;
 134:	00 00       	nop
 136:	03 c0       	rjmp	.+6      	; 0x13e <main+0xa0>
					//Make sure we're not getting here by releasing from state 3
					if(state != 3) {
						if(C < 9)
							C++;
					}
					break;
 138:	00 00       	nop
 13a:	01 c0       	rjmp	.+2      	; 0x13e <main+0xa0>
					//Make sure we're not getting here by releasing from state 3
					if(state != 3) {
						if(C > 0)
							C--;
					}
					break;
 13c:	00 00       	nop
				case 3:
					C = 0;
					break;
			}
			state = stateNext;
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	8a 83       	std	Y+2, r24	; 0x02
		}
		PORTC = C;
 142:	88 e2       	ldi	r24, 0x28	; 40
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	29 81       	ldd	r18, Y+1	; 0x01
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
    }
 14c:	c3 cf       	rjmp	.-122    	; 0xd4 <main+0x36>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
