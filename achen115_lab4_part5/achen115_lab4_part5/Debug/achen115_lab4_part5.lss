
achen115_lab4_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001ba  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000236  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000087e  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a8  00000000  00000000  00000b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027c  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000412  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  000019b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	80 c0       	rjmp	.+256    	; 0x1b6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

#include <avr/io.h>


int main(void)
{
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	2a 97       	sbiw	r28, 0x0a	; 10
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRA = 0;	PINA = -1;
  cc:	81 e2       	ldi	r24, 0x21	; 33
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	10 82       	st	Z, r1
  d4:	80 e2       	ldi	r24, 0x20	; 32
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	DDRB = -1; PORTB = 0;
  de:	84 e2       	ldi	r24, 0x24	; 36
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
  e8:	85 e2       	ldi	r24, 0x25	; 37
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	fc 01       	movw	r30, r24
  ee:	10 82       	st	Z, r1
	DDRC = -1; PORTC = 0;
  f0:	87 e2       	ldi	r24, 0x27	; 39
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
  fa:	88 e2       	ldi	r24, 0x28	; 40
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	10 82       	st	Z, r1
	char state = 0;
 102:	19 82       	std	Y+1, r1	; 0x01
	char open = 0;
 104:	1a 82       	std	Y+2, r1	; 0x02
	char states[] = {4, 0, 1, 0, 2, 0, 1};
 106:	87 e0       	ldi	r24, 0x07	; 7
 108:	e0 e0       	ldi	r30, 0x00	; 0
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	de 01       	movw	r26, r28
 10e:	14 96       	adiw	r26, 0x04	; 4
 110:	01 90       	ld	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	8a 95       	dec	r24
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x58>
    while (1) 
    {
		char pressed = PINA & 7;
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	87 70       	andi	r24, 0x07	; 7
 122:	8b 83       	std	Y+3, r24	; 0x03
		if(pressed == 0) {
 124:	8b 81       	ldd	r24, Y+3	; 0x03
 126:	88 23       	and	r24, r24
 128:	89 f4       	brne	.+34     	; 0x14c <main+0x94>
			//Update on release if needed
			if(states[state] == pressed) {
 12a:	89 81       	ldd	r24, Y+1	; 0x01
 12c:	88 2f       	mov	r24, r24
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	9e 01       	movw	r18, r28
 132:	2c 5f       	subi	r18, 0xFC	; 252
 134:	3f 4f       	sbci	r19, 0xFF	; 255
 136:	82 0f       	add	r24, r18
 138:	93 1f       	adc	r25, r19
 13a:	fc 01       	movw	r30, r24
 13c:	90 81       	ld	r25, Z
 13e:	8b 81       	ldd	r24, Y+3	; 0x03
 140:	98 17       	cp	r25, r24
 142:	71 f5       	brne	.+92     	; 0x1a0 <main+0xe8>
				state++;
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	89 83       	std	Y+1, r24	; 0x01
 14a:	2a c0       	rjmp	.+84     	; 0x1a0 <main+0xe8>
			}
		} else {
			if(states[state] == pressed) {
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	9e 01       	movw	r18, r28
 154:	2c 5f       	subi	r18, 0xFC	; 252
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	82 0f       	add	r24, r18
 15a:	93 1f       	adc	r25, r19
 15c:	fc 01       	movw	r30, r24
 15e:	90 81       	ld	r25, Z
 160:	8b 81       	ldd	r24, Y+3	; 0x03
 162:	98 17       	cp	r25, r24
 164:	71 f4       	brne	.+28     	; 0x182 <main+0xca>
				state++;
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	89 83       	std	Y+1, r24	; 0x01
				//Open and reset
				if(state == 7) {
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	87 30       	cpi	r24, 0x07	; 7
 170:	b9 f4       	brne	.+46     	; 0x1a0 <main+0xe8>
					open =! open;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	9a 81       	ldd	r25, Y+2	; 0x02
 176:	99 23       	and	r25, r25
 178:	09 f0       	breq	.+2      	; 0x17c <main+0xc4>
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	8a 83       	std	Y+2, r24	; 0x02
					state = 0;
 17e:	19 82       	std	Y+1, r1	; 0x01
 180:	0f c0       	rjmp	.+30     	; 0x1a0 <main+0xe8>
				}
			} else if(states[state-1] != pressed) {
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	88 2f       	mov	r24, r24
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	9e 01       	movw	r18, r28
 18c:	2c 5f       	subi	r18, 0xFC	; 252
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	82 0f       	add	r24, r18
 192:	93 1f       	adc	r25, r19
 194:	fc 01       	movw	r30, r24
 196:	90 81       	ld	r25, Z
 198:	8b 81       	ldd	r24, Y+3	; 0x03
 19a:	98 17       	cp	r25, r24
 19c:	09 f0       	breq	.+2      	; 0x1a0 <main+0xe8>
				//Wait for previous pressed to release if needed
				state = 0;
 19e:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		
		PORTB = open;
 1a0:	85 e2       	ldi	r24, 0x25	; 37
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	2a 81       	ldd	r18, Y+2	; 0x02
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 83       	st	Z, r18
		PORTC = state;
 1aa:	88 e2       	ldi	r24, 0x28	; 40
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	29 81       	ldd	r18, Y+1	; 0x01
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
    }
 1b4:	b1 cf       	rjmp	.-158    	; 0x118 <main+0x60>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
