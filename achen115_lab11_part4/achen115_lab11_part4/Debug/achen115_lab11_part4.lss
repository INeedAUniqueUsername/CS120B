
achen115_lab11_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000003e2  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800116  00800116  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb2  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a26  00000000  00000000  00001576  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007da  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002778  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000640  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000035f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	bd c0       	rjmp	.+378    	; 0x1b0 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ee       	ldi	r30, 0xE2	; 226
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 31       	cpi	r26, 0x16	; 22
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e1       	ldi	r26, 0x16	; 22
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 32       	cpi	r26, 0x28	; 40
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3a d1       	rcall	.+628    	; 0x338 <main>
  c4:	8c c1       	rjmp	.+792    	; 0x3de <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
		default:
			break;
    }
    PORTB = output;    // Write combined, shared output variables to PORTB
    return state;
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <TimerSet>:
 146:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <_avr_timer_M>
 14a:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <_avr_timer_M+0x1>
 14e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_M+0x2>
 152:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_M+0x3>
 156:	60 93 23 01 	sts	0x0123, r22	; 0x800123 <_avr_timer_cntcurr>
 15a:	70 93 24 01 	sts	0x0124, r23	; 0x800124 <_avr_timer_cntcurr+0x1>
 15e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <_avr_timer_cntcurr+0x2>
 162:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <_avr_timer_cntcurr+0x3>
 166:	08 95       	ret

00000168 <TimerOn>:
 168:	8b e0       	ldi	r24, 0x0B	; 11
 16a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 16e:	8d e7       	ldi	r24, 0x7D	; 125
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 176:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 180:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 184:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 188:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_avr_timer_M>
 18c:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_avr_timer_M+0x1>
 190:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <_avr_timer_M+0x2>
 194:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <_avr_timer_M+0x3>
 198:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_avr_timer_cntcurr>
 19c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_avr_timer_cntcurr+0x1>
 1a0:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <_avr_timer_cntcurr+0x2>
 1a4:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <_avr_timer_cntcurr+0x3>
 1a8:	8f b7       	in	r24, 0x3f	; 63
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	8f bf       	out	0x3f, r24	; 63
 1ae:	08 95       	ret

000001b0 <__vector_13>:
 1b0:	1f 92       	push	r1
 1b2:	0f 92       	push	r0
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	0f 92       	push	r0
 1b8:	11 24       	eor	r1, r1
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <_avr_timer_cntcurr>
 1c6:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <_avr_timer_cntcurr+0x1>
 1ca:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <_avr_timer_cntcurr+0x2>
 1ce:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <_avr_timer_cntcurr+0x3>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	a1 09       	sbc	r26, r1
 1d6:	b1 09       	sbc	r27, r1
 1d8:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_avr_timer_cntcurr>
 1dc:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_avr_timer_cntcurr+0x1>
 1e0:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <_avr_timer_cntcurr+0x2>
 1e4:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <_avr_timer_cntcurr+0x3>
 1e8:	89 2b       	or	r24, r25
 1ea:	8a 2b       	or	r24, r26
 1ec:	8b 2b       	or	r24, r27
 1ee:	99 f4       	brne	.+38     	; 0x216 <__vector_13+0x66>
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <TimerFlag>
 1f6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_avr_timer_M>
 1fa:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_avr_timer_M+0x1>
 1fe:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <_avr_timer_M+0x2>
 202:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <_avr_timer_M+0x3>
 206:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <_avr_timer_cntcurr>
 20a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <_avr_timer_cntcurr+0x1>
 20e:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <_avr_timer_cntcurr+0x2>
 212:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <_avr_timer_cntcurr+0x3>
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <GetKeypadKey>:
 228:	8f ee       	ldi	r24, 0xEF	; 239
 22a:	82 b9       	out	0x02, r24	; 2
 22c:	00 00       	nop
 22e:	00 9b       	sbis	0x00, 0	; 0
 230:	29 c0       	rjmp	.+82     	; 0x284 <GetKeypadKey+0x5c>
 232:	01 9b       	sbis	0x00, 1	; 0
 234:	29 c0       	rjmp	.+82     	; 0x288 <GetKeypadKey+0x60>
 236:	02 9b       	sbis	0x00, 2	; 0
 238:	29 c0       	rjmp	.+82     	; 0x28c <GetKeypadKey+0x64>
 23a:	03 9b       	sbis	0x00, 3	; 0
 23c:	29 c0       	rjmp	.+82     	; 0x290 <GetKeypadKey+0x68>
 23e:	8f ed       	ldi	r24, 0xDF	; 223
 240:	82 b9       	out	0x02, r24	; 2
 242:	00 00       	nop
 244:	00 9b       	sbis	0x00, 0	; 0
 246:	26 c0       	rjmp	.+76     	; 0x294 <GetKeypadKey+0x6c>
 248:	01 9b       	sbis	0x00, 1	; 0
 24a:	26 c0       	rjmp	.+76     	; 0x298 <GetKeypadKey+0x70>
 24c:	02 9b       	sbis	0x00, 2	; 0
 24e:	26 c0       	rjmp	.+76     	; 0x29c <GetKeypadKey+0x74>
 250:	03 9b       	sbis	0x00, 3	; 0
 252:	26 c0       	rjmp	.+76     	; 0x2a0 <GetKeypadKey+0x78>
 254:	8f eb       	ldi	r24, 0xBF	; 191
 256:	82 b9       	out	0x02, r24	; 2
 258:	00 00       	nop
 25a:	00 9b       	sbis	0x00, 0	; 0
 25c:	23 c0       	rjmp	.+70     	; 0x2a4 <GetKeypadKey+0x7c>
 25e:	01 9b       	sbis	0x00, 1	; 0
 260:	23 c0       	rjmp	.+70     	; 0x2a8 <GetKeypadKey+0x80>
 262:	02 9b       	sbis	0x00, 2	; 0
 264:	23 c0       	rjmp	.+70     	; 0x2ac <GetKeypadKey+0x84>
 266:	03 9b       	sbis	0x00, 3	; 0
 268:	23 c0       	rjmp	.+70     	; 0x2b0 <GetKeypadKey+0x88>
 26a:	8f e7       	ldi	r24, 0x7F	; 127
 26c:	82 b9       	out	0x02, r24	; 2
 26e:	00 00       	nop
 270:	00 9b       	sbis	0x00, 0	; 0
 272:	20 c0       	rjmp	.+64     	; 0x2b4 <GetKeypadKey+0x8c>
 274:	01 9b       	sbis	0x00, 1	; 0
 276:	20 c0       	rjmp	.+64     	; 0x2b8 <GetKeypadKey+0x90>
 278:	02 9b       	sbis	0x00, 2	; 0
 27a:	20 c0       	rjmp	.+64     	; 0x2bc <GetKeypadKey+0x94>
 27c:	03 9b       	sbis	0x00, 3	; 0
 27e:	20 c0       	rjmp	.+64     	; 0x2c0 <GetKeypadKey+0x98>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	08 95       	ret
 284:	81 e3       	ldi	r24, 0x31	; 49
 286:	08 95       	ret
 288:	84 e3       	ldi	r24, 0x34	; 52
 28a:	08 95       	ret
 28c:	87 e3       	ldi	r24, 0x37	; 55
 28e:	08 95       	ret
 290:	8a e2       	ldi	r24, 0x2A	; 42
 292:	08 95       	ret
 294:	82 e3       	ldi	r24, 0x32	; 50
 296:	08 95       	ret
 298:	85 e3       	ldi	r24, 0x35	; 53
 29a:	08 95       	ret
 29c:	88 e3       	ldi	r24, 0x38	; 56
 29e:	08 95       	ret
 2a0:	80 e3       	ldi	r24, 0x30	; 48
 2a2:	08 95       	ret
 2a4:	83 e3       	ldi	r24, 0x33	; 51
 2a6:	08 95       	ret
 2a8:	86 e3       	ldi	r24, 0x36	; 54
 2aa:	08 95       	ret
 2ac:	89 e3       	ldi	r24, 0x39	; 57
 2ae:	08 95       	ret
 2b0:	83 e2       	ldi	r24, 0x23	; 35
 2b2:	08 95       	ret
 2b4:	81 e4       	ldi	r24, 0x41	; 65
 2b6:	08 95       	ret
 2b8:	82 e4       	ldi	r24, 0x42	; 66
 2ba:	08 95       	ret
 2bc:	83 e4       	ldi	r24, 0x43	; 67
 2be:	08 95       	ret
 2c0:	84 e4       	ldi	r24, 0x44	; 68
 2c2:	08 95       	ret

000002c4 <KeypadTick>:
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	ae df       	rcall	.-164    	; 0x228 <GetKeypadKey>
 2cc:	81 11       	cpse	r24, r1
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <KeypadTick+0x12>
 2d0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <x_prev.1954>
 2d4:	16 c0       	rjmp	.+44     	; 0x302 <KeypadTick+0x3e>
 2d6:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <x_prev.1954>
 2da:	89 17       	cp	r24, r25
 2dc:	91 f0       	breq	.+36     	; 0x302 <KeypadTick+0x3e>
 2de:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <x_prev.1954>
 2e2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <index_write.1955>
 2e6:	e9 2f       	mov	r30, r25
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	ef 5f       	subi	r30, 0xFF	; 255
 2ec:	fe 4f       	sbci	r31, 0xFE	; 254
 2ee:	80 83       	st	Z, r24
 2f0:	9f 5f       	subi	r25, 0xFF	; 255
 2f2:	90 31       	cpi	r25, 0x10	; 16
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <KeypadTick+0x38>
 2f6:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <index_write.1955>
 2fa:	07 c0       	rjmp	.+14     	; 0x30a <KeypadTick+0x46>
 2fc:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <index_write.1955>
 300:	04 c0       	rjmp	.+8      	; 0x30a <KeypadTick+0x46>
 302:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 306:	88 23       	and	r24, r24
 308:	91 f0       	breq	.+36     	; 0x32e <KeypadTick+0x6a>
 30a:	01 e0       	ldi	r16, 0x01	; 1
 30c:	11 e0       	ldi	r17, 0x01	; 1
 30e:	c1 e0       	ldi	r28, 0x01	; 1
 310:	8c 2f       	mov	r24, r28
 312:	f9 de       	rcall	.-526    	; 0x106 <LCD_Cursor>
 314:	f8 01       	movw	r30, r16
 316:	81 91       	ld	r24, Z+
 318:	8f 01       	movw	r16, r30
 31a:	0c df       	rcall	.-488    	; 0x134 <LCD_WriteData>
 31c:	cf 5f       	subi	r28, 0xFF	; 255
 31e:	c1 31       	cpi	r28, 0x11	; 17
 320:	b9 f7       	brne	.-18     	; 0x310 <KeypadTick+0x4c>
 322:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <index_write.1955>
 326:	8f 5f       	subi	r24, 0xFF	; 255
 328:	ee de       	rcall	.-548    	; 0x106 <LCD_Cursor>
 32a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	08 95       	ret

00000338 <main>:

// Implement scheduler code from PES.
int main() {
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xF0; PINA = 0x0F; // PA7..4 outputs init 0s, PA3..0 inputs init 1s
 338:	80 ef       	ldi	r24, 0xF0	; 240
 33a:	81 b9       	out	0x01, r24	; 1
 33c:	8f e0       	ldi	r24, 0x0F	; 15
 33e:	80 b9       	out	0x00, r24	; 0
	DDRB = 0xFF; PORTB = 0x00;
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	84 b9       	out	0x04, r24	; 4
 344:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 346:	87 b9       	out	0x07, r24	; 7
 348:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 34a:	8a b9       	out	0x0a, r24	; 10
 34c:	1b b8       	out	0x0b, r1	; 11
	*/
	static task keypad;
	task *tasks[] = { &keypad };
	const unsigned short numTasks = 1;

	keypad.state = -1;//Task initial state.
 34e:	e6 e1       	ldi	r30, 0x16	; 22
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	80 83       	st	Z, r24
	keypad.period = 1;//Task Period.
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	a0 e0       	ldi	r26, 0x00	; 0
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	81 83       	std	Z+1, r24	; 0x01
 35e:	92 83       	std	Z+2, r25	; 0x02
 360:	a3 83       	std	Z+3, r26	; 0x03
 362:	b4 83       	std	Z+4, r27	; 0x04
	keypad.elapsedTime = 1;//Task current elapsed time.
 364:	85 83       	std	Z+5, r24	; 0x05
 366:	96 83       	std	Z+6, r25	; 0x06
 368:	a7 83       	std	Z+7, r26	; 0x07
 36a:	b0 87       	std	Z+8, r27	; 0x08
	keypad.TickFct = &KeypadTick;//Function pointer for the tick.
 36c:	82 e6       	ldi	r24, 0x62	; 98
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	92 87       	std	Z+10, r25	; 0x0a
 372:	81 87       	std	Z+9, r24	; 0x09

	LCD_init();
 374:	d0 de       	rcall	.-608    	; 0x116 <LCD_init>
	LCD_ClearScreen();
 376:	c4 de       	rcall	.-632    	; 0x100 <LCD_ClearScreen>
 378:	6a ef       	ldi	r22, 0xFA	; 250
	task4.period = SMTick4_period;//Task Period.
	task4.elapsedTime = SMTick4_period; // Task current elasped time.
	task4.TickFct = &SMTick4; // Function pointer for the tick.
	*/
	// Set the timer and turn it on
	TimerSet(GCD);
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	e2 de       	rcall	.-572    	; 0x146 <TimerSet>
	TimerOn();
 382:	f2 de       	rcall	.-540    	; 0x168 <TimerOn>
 384:	c6 e1       	ldi	r28, 0x16	; 22
	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 386:	d1 e0       	ldi	r29, 0x01	; 1
 388:	4d 81       	ldd	r20, Y+5	; 0x05
 38a:	5e 81       	ldd	r21, Y+6	; 0x06
 38c:	6f 81       	ldd	r22, Y+7	; 0x07
 38e:	78 85       	ldd	r23, Y+8	; 0x08
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	9a 81       	ldd	r25, Y+2	; 0x02
 394:	ab 81       	ldd	r26, Y+3	; 0x03
 396:	bc 81       	ldd	r27, Y+4	; 0x04
 398:	48 17       	cp	r20, r24
 39a:	59 07       	cpc	r21, r25
 39c:	6a 07       	cpc	r22, r26
 39e:	7b 07       	cpc	r23, r27
 3a0:	61 f4       	brne	.+24     	; 0x3ba <main+0x82>
 3a2:	88 81       	ld	r24, Y
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3a4:	e9 85       	ldd	r30, Y+9	; 0x09
 3a6:	fa 85       	ldd	r31, Y+10	; 0x0a
 3a8:	08 2e       	mov	r0, r24
 3aa:	00 0c       	add	r0, r0
 3ac:	99 0b       	sbc	r25, r25
 3ae:	09 95       	icall
 3b0:	88 83       	st	Y, r24
 3b2:	1d 82       	std	Y+5, r1	; 0x05
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 3b4:	1e 82       	std	Y+6, r1	; 0x06
 3b6:	1f 82       	std	Y+7, r1	; 0x07
 3b8:	18 86       	std	Y+8, r1	; 0x08
 3ba:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 3bc:	9e 81       	ldd	r25, Y+6	; 0x06
 3be:	af 81       	ldd	r26, Y+7	; 0x07
 3c0:	b8 85       	ldd	r27, Y+8	; 0x08
 3c2:	01 96       	adiw	r24, 0x01	; 1
 3c4:	a1 1d       	adc	r26, r1
 3c6:	b1 1d       	adc	r27, r1
 3c8:	8d 83       	std	Y+5, r24	; 0x05
 3ca:	9e 83       	std	Y+6, r25	; 0x06
 3cc:	af 83       	std	Y+7, r26	; 0x07
 3ce:	b8 87       	std	Y+8, r27	; 0x08
 3d0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TimerFlag>
		}
		while(!TimerFlag);
 3d4:	88 23       	and	r24, r24
 3d6:	e1 f3       	breq	.-8      	; 0x3d0 <main+0x98>
 3d8:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <TimerFlag>
		TimerFlag = 0;
 3dc:	d5 cf       	rjmp	.-86     	; 0x388 <main+0x50>

000003de <_exit>:
	}
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
