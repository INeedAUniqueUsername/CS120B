
achen115_lab7_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004a8  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  00000540  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4a  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000849  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000525  00000000  00000000  000018c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cb  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000410  00000000  00000000  000024ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000028bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	39 c1       	rjmp	.+626    	; 0x2a8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	81 d1       	rcall	.+770    	; 0x3c6 <main>
  c4:	ef c1       	rjmp	.+990    	; 0x4a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
	SREG |= 0x80; // 0x80: 1000000
}

void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	1a d0       	rcall	.+52     	; 0x108 <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	6d d0       	rcall	.+218    	; 0x1c4 <delay_ms>
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0d d0       	rcall	.+26     	; 0x108 <LCD_WriteCommand>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0b d0       	rcall	.+22     	; 0x108 <LCD_WriteCommand>
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	09 d0       	rcall	.+18     	; 0x108 <LCD_WriteCommand>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	07 d0       	rcall	.+14     	; 0x108 <LCD_WriteCommand>
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	62 d0       	rcall	.+196    	; 0x1c4 <delay_ms>
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_WriteCommand>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e2       	ldi	r18, 0x2B	; 43
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 68       	ori	r18, 0x80	; 128
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2b e2       	ldi	r18, 0x2B	; 43
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 77       	andi	r18, 0x7F	; 127
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	34 d0       	rcall	.+104    	; 0x1c4 <delay_ms>
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_WriteData>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	8b e2       	ldi	r24, 0x2B	; 43
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2b e2       	ldi	r18, 0x2B	; 43
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	20 64       	ori	r18, 0x40	; 64
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	20 68       	ori	r18, 0x80	; 128
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	00 00       	nop
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e2       	ldi	r18, 0x2B	; 43
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	05 d0       	rcall	.+10     	; 0x1c4 <delay_ms>
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <delay_ms>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	00 d0       	rcall	.+0      	; 0x1ca <delay_ms+0x6>
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <delay_ms+0x8>
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <delay_ms+0xa>
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	9e 83       	std	Y+6, r25	; 0x06
 1d4:	8d 83       	std	Y+5, r24	; 0x05
 1d6:	1a 82       	std	Y+2, r1	; 0x02
 1d8:	19 82       	std	Y+1, r1	; 0x01
 1da:	13 c0       	rjmp	.+38     	; 0x202 <delay_ms+0x3e>
 1dc:	1c 82       	std	Y+4, r1	; 0x04
 1de:	1b 82       	std	Y+3, r1	; 0x03
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <delay_ms+0x2a>
 1e2:	00 00       	nop
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	9c 81       	ldd	r25, Y+4	; 0x04
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	9c 83       	std	Y+4, r25	; 0x04
 1ec:	8b 83       	std	Y+3, r24	; 0x03
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	9c 81       	ldd	r25, Y+4	; 0x04
 1f2:	87 30       	cpi	r24, 0x07	; 7
 1f4:	93 40       	sbci	r25, 0x03	; 3
 1f6:	ac f3       	brlt	.-22     	; 0x1e2 <delay_ms+0x1e>
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	9a 81       	ldd	r25, Y+2	; 0x02
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	9a 83       	std	Y+2, r25	; 0x02
 200:	89 83       	std	Y+1, r24	; 0x01
 202:	29 81       	ldd	r18, Y+1	; 0x01
 204:	3a 81       	ldd	r19, Y+2	; 0x02
 206:	8d 81       	ldd	r24, Y+5	; 0x05
 208:	9e 81       	ldd	r25, Y+6	; 0x06
 20a:	28 17       	cp	r18, r24
 20c:	39 07       	cpc	r19, r25
 20e:	34 f3       	brlt	.-52     	; 0x1dc <delay_ms+0x18>
 210:	00 00       	nop
 212:	26 96       	adiw	r28, 0x06	; 6
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <TimerOn>:
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	81 e8       	ldi	r24, 0x81	; 129
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	2b e0       	ldi	r18, 0x0B	; 11
 232:	fc 01       	movw	r30, r24
 234:	20 83       	st	Z, r18
 236:	88 e8       	ldi	r24, 0x88	; 136
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	2d e7       	ldi	r18, 0x7D	; 125
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	fc 01       	movw	r30, r24
 240:	31 83       	std	Z+1, r19	; 0x01
 242:	20 83       	st	Z, r18
 244:	8f e6       	ldi	r24, 0x6F	; 111
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	22 e0       	ldi	r18, 0x02	; 2
 24a:	fc 01       	movw	r30, r24
 24c:	20 83       	st	Z, r18
 24e:	84 e8       	ldi	r24, 0x84	; 132
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	fc 01       	movw	r30, r24
 254:	11 82       	std	Z+1, r1	; 0x01
 256:	10 82       	st	Z, r1
 258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 260:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 264:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 268:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 26c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 270:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 274:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 278:	8f e5       	ldi	r24, 0x5F	; 95
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	2f e5       	ldi	r18, 0x5F	; 95
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	f9 01       	movw	r30, r18
 282:	20 81       	ld	r18, Z
 284:	20 68       	ori	r18, 0x80	; 128
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
 28a:	00 00       	nop
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <TimerISR>:

void TimerISR() {
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 2a0:	00 00       	nop
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 2b8:	0f 92       	push	r0
 2ba:	2f 93       	push	r18
 2bc:	3f 93       	push	r19
 2be:	4f 93       	push	r20
 2c0:	5f 93       	push	r21
 2c2:	6f 93       	push	r22
 2c4:	7f 93       	push	r23
 2c6:	8f 93       	push	r24
 2c8:	9f 93       	push	r25
 2ca:	af 93       	push	r26
 2cc:	bf 93       	push	r27
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 2da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 2de:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 2e2:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 2e6:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	a1 09       	sbc	r26, r1
 2ee:	b1 09       	sbc	r27, r1
 2f0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 2f4:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 2f8:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 2fc:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 300:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 304:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 308:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 30c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 310:	89 2b       	or	r24, r25
 312:	8a 2b       	or	r24, r26
 314:	8b 2b       	or	r24, r27
 316:	89 f4       	brne	.+34     	; 0x33a <__vector_13+0x92>
		TimerISR(); // Call the ISR that the user uses
 318:	bc df       	rcall	.-136    	; 0x292 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 31a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 31e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 322:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 326:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 32a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 32e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 332:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 336:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	}
}
 33a:	00 00       	nop
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	ff 91       	pop	r31
 342:	ef 91       	pop	r30
 344:	bf 91       	pop	r27
 346:	af 91       	pop	r26
 348:	9f 91       	pop	r25
 34a:	8f 91       	pop	r24
 34c:	7f 91       	pop	r23
 34e:	6f 91       	pop	r22
 350:	5f 91       	pop	r21
 352:	4f 91       	pop	r20
 354:	3f 91       	pop	r19
 356:	2f 91       	pop	r18
 358:	0f 90       	pop	r0
 35a:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 35e:	0f 90       	pop	r0
 360:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	00 d0       	rcall	.+0      	; 0x370 <TimerSet+0x6>
 370:	00 d0       	rcall	.+0      	; 0x372 <TimerSet+0x8>
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	69 83       	std	Y+1, r22	; 0x01
 378:	7a 83       	std	Y+2, r23	; 0x02
 37a:	8b 83       	std	Y+3, r24	; 0x03
 37c:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	9a 81       	ldd	r25, Y+2	; 0x02
 382:	ab 81       	ldd	r26, Y+3	; 0x03
 384:	bc 81       	ldd	r27, Y+4	; 0x04
 386:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 38a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 38e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 392:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 396:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 39a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 39e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3a2:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3a6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 3aa:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 3ae:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 3b2:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
}
 3b6:	00 00       	nop
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	0f 90       	pop	r0
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <main>:

void main()
{
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	00 d0       	rcall	.+0      	; 0x3cc <main+0x6>
 3cc:	1f 92       	push	r1
 3ce:	cd b7       	in	r28, 0x3d	; 61
 3d0:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0; PINA = -1;	//PINA is input
 3d2:	81 e2       	ldi	r24, 0x21	; 33
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	fc 01       	movw	r30, r24
 3d8:	10 82       	st	Z, r1
 3da:	80 e2       	ldi	r24, 0x20	; 32
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
	DDRB = -1; PORTB = 0;
 3e4:	84 e2       	ldi	r24, 0x24	; 36
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	2f ef       	ldi	r18, 0xFF	; 255
 3ea:	fc 01       	movw	r30, r24
 3ec:	20 83       	st	Z, r18
 3ee:	85 e2       	ldi	r24, 0x25	; 37
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	fc 01       	movw	r30, r24
 3f4:	10 82       	st	Z, r1

	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 3f6:	87 e2       	ldi	r24, 0x27	; 39
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	2f ef       	ldi	r18, 0xFF	; 255
 3fc:	fc 01       	movw	r30, r24
 3fe:	20 83       	st	Z, r18
 400:	88 e2       	ldi	r24, 0x28	; 40
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	fc 01       	movw	r30, r24
 406:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 408:	8a e2       	ldi	r24, 0x2A	; 42
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	2f ef       	ldi	r18, 0xFF	; 255
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
 412:	8b e2       	ldi	r24, 0x2B	; 43
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	fc 01       	movw	r30, r24
 418:	10 82       	st	Z, r1
	
	// Initializes the LCD display
	LCD_init();
 41a:	60 de       	rcall	.-832    	; 0xdc <LCD_init>

	char i = 0;
 41c:	19 82       	std	Y+1, r1	; 0x01
	char out = 0;
 41e:	1a 82       	std	Y+2, r1	; 0x02
	TimerSet(1000);
 420:	68 ee       	ldi	r22, 0xE8	; 232
 422:	73 e0       	ldi	r23, 0x03	; 3
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 428:	a0 df       	rcall	.-192    	; 0x36a <TimerSet>
 42a:	fc de       	rcall	.-520    	; 0x224 <TimerOn>
	while(1) {
		PORTB = 0;
 42c:	85 e2       	ldi	r24, 0x25	; 37
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	fc 01       	movw	r30, r24
 432:	10 82       	st	Z, r1
		char pressed = ~PINA & 3;
 434:	80 e2       	ldi	r24, 0x20	; 32
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	80 81       	ld	r24, Z
 43c:	80 95       	com	r24
 43e:	83 70       	andi	r24, 0x03	; 3
 440:	8b 83       	std	Y+3, r24	; 0x03
		switch(pressed) {
 442:	8b 81       	ldd	r24, Y+3	; 0x03
 444:	88 2f       	mov	r24, r24
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	91 05       	cpc	r25, r1
 44c:	41 f0       	breq	.+16     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 44e:	83 30       	cpi	r24, 0x03	; 3
 450:	91 05       	cpc	r25, r1
 452:	19 f0       	breq	.+6      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	51 f0       	breq	.+20     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 458:	13 c0       	rjmp	.+38     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case 3:
			i = 0;
 45a:	19 82       	std	Y+1, r1	; 0x01
			break;
 45c:	11 c0       	rjmp	.+34     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case 2:
			if(i > 0) {
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	88 23       	and	r24, r24
 462:	59 f0       	breq	.+22     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
				i--;
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	81 50       	subi	r24, 0x01	; 1
 468:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 46a:	07 c0       	rjmp	.+14     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		case 1:
			if(i < 9) {
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	89 30       	cpi	r24, 0x09	; 9
 470:	30 f4       	brcc	.+12     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
				i++;
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	89 83       	std	Y+1, r24	; 0x01
			}
			break;
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			break;
		case 2:
			if(i > 0) {
				i--;
			}
			break;
 47a:	00 00       	nop
 47c:	01 c0       	rjmp	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		case 1:
			if(i < 9) {
				i++;
			}
			break;
 47e:	00 00       	nop
		}
		if(out != i) {
 480:	9a 81       	ldd	r25, Y+2	; 0x02
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	98 17       	cp	r25, r24
			out = i;
 486:	31 f0       	breq	.+12     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 488:	89 81       	ldd	r24, Y+1	; 0x01
			LCD_ClearScreen();
 48a:	8a 83       	std	Y+2, r24	; 0x02
			LCD_WriteData('0' + out);
 48c:	1d de       	rcall	.-966    	; 0xc8 <LCD_ClearScreen>
 48e:	8a 81       	ldd	r24, Y+2	; 0x02
 490:	80 5d       	subi	r24, 0xD0	; 208
 492:	69 de       	rcall	.-814    	; 0x166 <LCD_WriteData>
		}
		while(!TimerFlag);
 494:	00 00       	nop
 496:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 49a:	88 23       	and	r24, r24
 49c:	e1 f3       	breq	.-8      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		TimerFlag = 0;
 49e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
			TimerFlag = 0;
			TimerOff();
			
		}
		*/
	}
 4a2:	c4 cf       	rjmp	.-120    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
