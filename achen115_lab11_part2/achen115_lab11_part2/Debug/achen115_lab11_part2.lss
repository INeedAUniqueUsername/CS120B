
achen115_lab11_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000006ba  0000074e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080013c  0080013c  0000078a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df8  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000913  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4b  00000000  00000000  00001fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00002a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063f  00000000  00000000  00002d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006eb  00000000  00000000  000033a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7c c1       	rjmp	.+760    	; 0x32e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea eb       	ldi	r30, 0xBA	; 186
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 33       	cpi	r26, 0x3C	; 60
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e3       	ldi	r26, 0x3C	; 60
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 34       	cpi	r26, 0x4E	; 78
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e1 d1       	rcall	.+962    	; 0x486 <main>
  c4:	f8 c2       	rjmp	.+1520   	; 0x6b6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
		case '0': PORTB = 0x00; break;
		case '#': PORTB = 0x0F; break;
		default: PORTB = 0x1B; break; // Should never occur. Middle LED off.
	}
	return 0;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	1a d0       	rcall	.+52     	; 0x108 <LCD_WriteCommand>
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_init>:
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	84 e6       	ldi	r24, 0x64	; 100
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	82 d0       	rcall	.+260    	; 0x1ee <delay_ms>
  ea:	88 e3       	ldi	r24, 0x38	; 56
  ec:	0d d0       	rcall	.+26     	; 0x108 <LCD_WriteCommand>
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	0b d0       	rcall	.+22     	; 0x108 <LCD_WriteCommand>
  f2:	8f e0       	ldi	r24, 0x0F	; 15
  f4:	09 d0       	rcall	.+18     	; 0x108 <LCD_WriteCommand>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	07 d0       	rcall	.+14     	; 0x108 <LCD_WriteCommand>
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	77 d0       	rcall	.+238    	; 0x1ee <delay_ms>
 100:	00 00       	nop
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <LCD_WriteCommand>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
 114:	8b e2       	ldi	r24, 0x2B	; 43
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e2       	ldi	r18, 0x2B	; 43
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	2f 7b       	andi	r18, 0xBF	; 191
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	29 81       	ldd	r18, Y+1	; 0x01
 12c:	fc 01       	movw	r30, r24
 12e:	20 83       	st	Z, r18
 130:	8b e2       	ldi	r24, 0x2B	; 43
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e2       	ldi	r18, 0x2B	; 43
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	20 68       	ori	r18, 0x80	; 128
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	00 00       	nop
 144:	8b e2       	ldi	r24, 0x2B	; 43
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	2b e2       	ldi	r18, 0x2B	; 43
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 77       	andi	r18, 0x7F	; 127
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	49 d0       	rcall	.+146    	; 0x1ee <delay_ms>
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_WriteData>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	89 83       	std	Y+1, r24	; 0x01
 172:	8b e2       	ldi	r24, 0x2B	; 43
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	2b e2       	ldi	r18, 0x2B	; 43
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	f9 01       	movw	r30, r18
 17c:	20 81       	ld	r18, Z
 17e:	20 64       	ori	r18, 0x40	; 64
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	fc 01       	movw	r30, r24
 18c:	20 83       	st	Z, r18
 18e:	8b e2       	ldi	r24, 0x2B	; 43
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	2b e2       	ldi	r18, 0x2B	; 43
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	20 81       	ld	r18, Z
 19a:	20 68       	ori	r18, 0x80	; 128
 19c:	fc 01       	movw	r30, r24
 19e:	20 83       	st	Z, r18
 1a0:	00 00       	nop
 1a2:	8b e2       	ldi	r24, 0x2B	; 43
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	2b e2       	ldi	r18, 0x2B	; 43
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 77       	andi	r18, 0x7F	; 127
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 83       	st	Z, r18
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	1a d0       	rcall	.+52     	; 0x1ee <delay_ms>
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_Cursor>:
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	1f 92       	push	r1
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	89 83       	std	Y+1, r24	; 0x01
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	81 31       	cpi	r24, 0x11	; 17
 1d4:	20 f4       	brcc	.+8      	; 0x1de <LCD_Cursor+0x1a>
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	81 58       	subi	r24, 0x81	; 129
 1da:	96 df       	rcall	.-212    	; 0x108 <LCD_WriteCommand>
 1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <LCD_Cursor+0x20>
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	81 55       	subi	r24, 0x51	; 81
 1e2:	92 df       	rcall	.-220    	; 0x108 <LCD_WriteCommand>
 1e4:	00 00       	nop
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <delay_ms>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <delay_ms+0x6>
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <delay_ms+0x8>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <delay_ms+0xa>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	9e 83       	std	Y+6, r25	; 0x06
 1fe:	8d 83       	std	Y+5, r24	; 0x05
 200:	1a 82       	std	Y+2, r1	; 0x02
 202:	19 82       	std	Y+1, r1	; 0x01
 204:	13 c0       	rjmp	.+38     	; 0x22c <delay_ms+0x3e>
 206:	1c 82       	std	Y+4, r1	; 0x04
 208:	1b 82       	std	Y+3, r1	; 0x03
 20a:	06 c0       	rjmp	.+12     	; 0x218 <delay_ms+0x2a>
 20c:	00 00       	nop
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	9c 81       	ldd	r25, Y+4	; 0x04
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	9c 83       	std	Y+4, r25	; 0x04
 216:	8b 83       	std	Y+3, r24	; 0x03
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	9c 81       	ldd	r25, Y+4	; 0x04
 21c:	87 30       	cpi	r24, 0x07	; 7
 21e:	93 40       	sbci	r25, 0x03	; 3
 220:	ac f3       	brlt	.-22     	; 0x20c <delay_ms+0x1e>
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	9a 83       	std	Y+2, r25	; 0x02
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	29 81       	ldd	r18, Y+1	; 0x01
 22e:	3a 81       	ldd	r19, Y+2	; 0x02
 230:	8d 81       	ldd	r24, Y+5	; 0x05
 232:	9e 81       	ldd	r25, Y+6	; 0x06
 234:	28 17       	cp	r18, r24
 236:	39 07       	cpc	r19, r25
 238:	34 f3       	brlt	.-52     	; 0x206 <delay_ms+0x18>
 23a:	00 00       	nop
 23c:	26 96       	adiw	r28, 0x06	; 6
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <TimerSet>:
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	00 d0       	rcall	.+0      	; 0x254 <TimerSet+0x6>
 254:	00 d0       	rcall	.+0      	; 0x256 <TimerSet+0x8>
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	69 83       	std	Y+1, r22	; 0x01
 25c:	7a 83       	std	Y+2, r23	; 0x02
 25e:	8b 83       	std	Y+3, r24	; 0x03
 260:	9c 83       	std	Y+4, r25	; 0x04
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	9a 81       	ldd	r25, Y+2	; 0x02
 266:	ab 81       	ldd	r26, Y+3	; 0x03
 268:	bc 81       	ldd	r27, Y+4	; 0x04
 26a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 26e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 272:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 276:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 27a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 27e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 282:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 286:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 28a:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
 28e:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
 292:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
 296:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
 29a:	00 00       	nop
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <TimerOn>:
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	cd b7       	in	r28, 0x3d	; 61
 2b0:	de b7       	in	r29, 0x3e	; 62
 2b2:	81 e8       	ldi	r24, 0x81	; 129
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	2b e0       	ldi	r18, 0x0B	; 11
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
 2bc:	88 e8       	ldi	r24, 0x88	; 136
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	2d e7       	ldi	r18, 0x7D	; 125
 2c2:	30 e0       	ldi	r19, 0x00	; 0
 2c4:	fc 01       	movw	r30, r24
 2c6:	31 83       	std	Z+1, r19	; 0x01
 2c8:	20 83       	st	Z, r18
 2ca:	8f e6       	ldi	r24, 0x6F	; 111
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	22 e0       	ldi	r18, 0x02	; 2
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
 2d4:	84 e8       	ldi	r24, 0x84	; 132
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	fc 01       	movw	r30, r24
 2da:	11 82       	std	Z+1, r1	; 0x01
 2dc:	10 82       	st	Z, r1
 2de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2ee:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
 2f2:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
 2f6:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
 2fa:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
 2fe:	8f e5       	ldi	r24, 0x5F	; 95
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2f e5       	ldi	r18, 0x5F	; 95
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	f9 01       	movw	r30, r18
 308:	20 81       	ld	r18, Z
 30a:	20 68       	ori	r18, 0x80	; 128
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
 310:	00 00       	nop
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <TimerISR>:
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	cd b7       	in	r28, 0x3d	; 61
 31e:	de b7       	in	r29, 0x3e	; 62
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
 326:	00 00       	nop
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <__vector_13>:
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 33e:	0f 92       	push	r0
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <_avr_timer_cntcurr>
 364:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <_avr_timer_cntcurr+0x1>
 368:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <_avr_timer_cntcurr+0x2>
 36c:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <_avr_timer_cntcurr+0x3>
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	a1 09       	sbc	r26, r1
 374:	b1 09       	sbc	r27, r1
 376:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
 37a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
 37e:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
 382:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
 386:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <_avr_timer_cntcurr>
 38a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <_avr_timer_cntcurr+0x1>
 38e:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <_avr_timer_cntcurr+0x2>
 392:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <_avr_timer_cntcurr+0x3>
 396:	89 2b       	or	r24, r25
 398:	8a 2b       	or	r24, r26
 39a:	8b 2b       	or	r24, r27
 39c:	89 f4       	brne	.+34     	; 0x3c0 <__vector_13+0x92>
 39e:	bc df       	rcall	.-136    	; 0x318 <TimerISR>
 3a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 3a8:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 3ac:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 3b0:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <_avr_timer_cntcurr>
 3b4:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <_avr_timer_cntcurr+0x1>
 3b8:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <_avr_timer_cntcurr+0x2>
 3bc:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <_avr_timer_cntcurr+0x3>
 3c0:	00 00       	nop
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	ff 91       	pop	r31
 3c8:	ef 91       	pop	r30
 3ca:	bf 91       	pop	r27
 3cc:	af 91       	pop	r26
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	7f 91       	pop	r23
 3d4:	6f 91       	pop	r22
 3d6:	5f 91       	pop	r21
 3d8:	4f 91       	pop	r20
 3da:	3f 91       	pop	r19
 3dc:	2f 91       	pop	r18
 3de:	0f 90       	pop	r0
 3e0:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 3e4:	0f 90       	pop	r0
 3e6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <MarqueeTick>:
unsigned char MarqueeTick() {
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	1f 92       	push	r1
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
	static char s[] = "CS120B is Legend... wait for it DARY! CS120B is Legen";
	static char length = 53;
	static short index = 0;
	for(char i = index; i < index + 15; i++) {
 3fa:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <index.1978>
 3fe:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <index.1978+0x1>
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	14 c0       	rjmp	.+40     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		LCD_Cursor(i - index + 1);
 406:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <index.1978>
 40a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <index.1978+0x1>
 40e:	98 2f       	mov	r25, r24
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	89 1b       	sub	r24, r25
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	d6 de       	rcall	.-596    	; 0x1c4 <LCD_Cursor>
		LCD_WriteData(s[i]);
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	88 2f       	mov	r24, r24
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	8c 5f       	subi	r24, 0xFC	; 252
 420:	9e 4f       	sbci	r25, 0xFE	; 254
 422:	fc 01       	movw	r30, r24
 424:	80 81       	ld	r24, Z
 426:	9f de       	rcall	.-706    	; 0x166 <LCD_WriteData>
}
unsigned char MarqueeTick() {
	static char s[] = "CS120B is Legend... wait for it DARY! CS120B is Legen";
	static char length = 53;
	static short index = 0;
	for(char i = index; i < index + 15; i++) {
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	89 83       	std	Y+1, r24	; 0x01
 42e:	89 81       	ldd	r24, Y+1	; 0x01
 430:	28 2f       	mov	r18, r24
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <index.1978>
 438:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <index.1978+0x1>
 43c:	0f 96       	adiw	r24, 0x0f	; 15
 43e:	28 17       	cp	r18, r24
 440:	39 07       	cpc	r19, r25
 442:	0c f3       	brlt	.-62     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		LCD_Cursor(i - index + 1);
		LCD_WriteData(s[i]);
	}
	if(index < length - 16) {
 444:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <length.1977>
 448:	88 2f       	mov	r24, r24
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	9c 01       	movw	r18, r24
 44e:	20 51       	subi	r18, 0x10	; 16
 450:	31 09       	sbc	r19, r1
 452:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <index.1978>
 456:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <index.1978+0x1>
 45a:	82 17       	cp	r24, r18
 45c:	93 07       	cpc	r25, r19
 45e:	54 f4       	brge	.+20     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
		index++;
 460:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <index.1978>
 464:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <index.1978+0x1>
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <index.1978+0x1>
 46e:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <index.1978>
 472:	04 c0       	rjmp	.+8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	} else {
		index = 0;
 474:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <index.1978+0x1>
 478:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <index.1978>
	}
	return 0;
 47c:	80 e0       	ldi	r24, 0x00	; 0
}
 47e:	0f 90       	pop	r0
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret

00000486 <main>:

// Implement scheduler code from PES.
int main() {
 486:	0f 93       	push	r16
 488:	1f 93       	push	r17
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	28 97       	sbiw	r28, 0x08	; 8
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
	// Set Data Direction Registers
	// Buttons PORTA[0-7], set AVR PORTA to pull down logic
	DDRA = 0xF0; PINA = 0x0F; // PA7..4 outputs init 0s, PA3..0 inputs init 1s
 49e:	81 e2       	ldi	r24, 0x21	; 33
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	20 ef       	ldi	r18, 0xF0	; 240
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
 4a8:	80 e2       	ldi	r24, 0x20	; 32
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	2f e0       	ldi	r18, 0x0F	; 15
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 4b2:	84 e2       	ldi	r24, 0x24	; 36
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	2f ef       	ldi	r18, 0xFF	; 255
 4b8:	fc 01       	movw	r30, r24
 4ba:	20 83       	st	Z, r18
 4bc:	85 e2       	ldi	r24, 0x25	; 37
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	fc 01       	movw	r30, r24
 4c2:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 4c4:	87 e2       	ldi	r24, 0x27	; 39
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	2f ef       	ldi	r18, 0xFF	; 255
 4ca:	fc 01       	movw	r30, r24
 4cc:	20 83       	st	Z, r18
 4ce:	88 e2       	ldi	r24, 0x28	; 40
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	fc 01       	movw	r30, r24
 4d4:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00;
 4d6:	8a e2       	ldi	r24, 0x2A	; 42
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	fc 01       	movw	r30, r24
 4de:	20 83       	st	Z, r18
 4e0:	8b e2       	ldi	r24, 0x2B	; 43
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	fc 01       	movw	r30, r24
 4e6:	10 82       	st	Z, r1
	//Declare an array of tasks 
	static task task1, task2, task3, task4;
	task *tasks[] = { &task1, &task2, &task3, &task4 };
	*/
	static task marquee;
	task *tasks[] = { &marquee };
 4e8:	83 e4       	ldi	r24, 0x43	; 67
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	98 87       	std	Y+8, r25	; 0x08
 4ee:	8f 83       	std	Y+7, r24	; 0x07
	const unsigned short numTasks = 1;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	9c 83       	std	Y+4, r25	; 0x04
 4f6:	8b 83       	std	Y+3, r24	; 0x03

	marquee.state = -1;//Task initial state.
 4f8:	8f ef       	ldi	r24, 0xFF	; 255
 4fa:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <marquee.1985>
	marquee.period = 5;//Task Period.
 4fe:	85 e0       	ldi	r24, 0x05	; 5
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	a0 e0       	ldi	r26, 0x00	; 0
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <marquee.1985+0x1>
 50a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <marquee.1985+0x2>
 50e:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <marquee.1985+0x3>
 512:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <marquee.1985+0x4>
	marquee.elapsedTime = 5;//Task current elapsed time.
 516:	85 e0       	ldi	r24, 0x05	; 5
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	a0 e0       	ldi	r26, 0x00	; 0
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <marquee.1985+0x5>
 522:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <marquee.1985+0x6>
 526:	a0 93 4a 01 	sts	0x014A, r26	; 0x80014a <marquee.1985+0x7>
 52a:	b0 93 4b 01 	sts	0x014B, r27	; 0x80014b <marquee.1985+0x8>
	marquee.TickFct = &MarqueeTick;//Function pointer for the tick.
 52e:	88 ef       	ldi	r24, 0xF8	; 248
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <marquee.1985+0xa>
 536:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <marquee.1985+0x9>

	LCD_init();
 53a:	d0 dd       	rcall	.-1120   	; 0xdc <LCD_init>
	LCD_ClearScreen();
 53c:	c5 dd       	rcall	.-1142   	; 0xc8 <LCD_ClearScreen>
 53e:	84 e6       	ldi	r24, 0x64	; 100

	short GCD = 100;
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	9e 83       	std	Y+6, r25	; 0x06
 544:	8d 83       	std	Y+5, r24	; 0x05
 546:	8d 81       	ldd	r24, Y+5	; 0x05
	task4.period = SMTick4_period;//Task Period.
	task4.elapsedTime = SMTick4_period; // Task current elasped time.
	task4.TickFct = &SMTick4; // Function pointer for the tick.
	*/
	// Set the timer and turn it on
	TimerSet(GCD);
 548:	9e 81       	ldd	r25, Y+6	; 0x06
 54a:	09 2e       	mov	r0, r25
 54c:	00 0c       	add	r0, r0
 54e:	aa 0b       	sbc	r26, r26
 550:	bb 0b       	sbc	r27, r27
 552:	bc 01       	movw	r22, r24
 554:	cd 01       	movw	r24, r26
 556:	7b de       	rcall	.-778    	; 0x24e <TimerSet>
	TimerOn();
 558:	a8 de       	rcall	.-688    	; 0x2aa <TimerOn>
 55a:	1a 82       	std	Y+2, r1	; 0x02

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 55c:	19 82       	std	Y+1, r1	; 0x01
 55e:	9b c0       	rjmp	.+310    	; 0x696 <main+0x210>
 560:	89 81       	ldd	r24, Y+1	; 0x01
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 562:	9a 81       	ldd	r25, Y+2	; 0x02
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	9e 01       	movw	r18, r28
 56a:	2f 5f       	subi	r18, 0xFF	; 255
 56c:	3f 4f       	sbci	r19, 0xFF	; 255
 56e:	82 0f       	add	r24, r18
 570:	93 1f       	adc	r25, r19
 572:	06 96       	adiw	r24, 0x06	; 6
 574:	fc 01       	movw	r30, r24
 576:	80 81       	ld	r24, Z
 578:	91 81       	ldd	r25, Z+1	; 0x01
 57a:	fc 01       	movw	r30, r24
 57c:	25 81       	ldd	r18, Z+5	; 0x05
 57e:	36 81       	ldd	r19, Z+6	; 0x06
 580:	47 81       	ldd	r20, Z+7	; 0x07
 582:	50 85       	ldd	r21, Z+8	; 0x08
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	9a 81       	ldd	r25, Y+2	; 0x02
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	be 01       	movw	r22, r28
 58e:	6f 5f       	subi	r22, 0xFF	; 255
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	86 0f       	add	r24, r22
 594:	97 1f       	adc	r25, r23
 596:	06 96       	adiw	r24, 0x06	; 6
 598:	fc 01       	movw	r30, r24
 59a:	80 81       	ld	r24, Z
 59c:	91 81       	ldd	r25, Z+1	; 0x01
 59e:	fc 01       	movw	r30, r24
 5a0:	81 81       	ldd	r24, Z+1	; 0x01
 5a2:	92 81       	ldd	r25, Z+2	; 0x02
 5a4:	a3 81       	ldd	r26, Z+3	; 0x03
 5a6:	b4 81       	ldd	r27, Z+4	; 0x04
 5a8:	28 17       	cp	r18, r24
 5aa:	39 07       	cpc	r19, r25
 5ac:	4a 07       	cpc	r20, r26
 5ae:	5b 07       	cpc	r21, r27
 5b0:	09 f0       	breq	.+2      	; 0x5b4 <main+0x12e>
 5b2:	45 c0       	rjmp	.+138    	; 0x63e <main+0x1b8>
 5b4:	89 81       	ldd	r24, Y+1	; 0x01
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 5b6:	9a 81       	ldd	r25, Y+2	; 0x02
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	9e 01       	movw	r18, r28
 5be:	2f 5f       	subi	r18, 0xFF	; 255
 5c0:	3f 4f       	sbci	r19, 0xFF	; 255
 5c2:	82 0f       	add	r24, r18
 5c4:	93 1f       	adc	r25, r19
 5c6:	06 96       	adiw	r24, 0x06	; 6
 5c8:	fc 01       	movw	r30, r24
 5ca:	00 81       	ld	r16, Z
 5cc:	11 81       	ldd	r17, Z+1	; 0x01
 5ce:	89 81       	ldd	r24, Y+1	; 0x01
 5d0:	9a 81       	ldd	r25, Y+2	; 0x02
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	9e 01       	movw	r18, r28
 5d8:	2f 5f       	subi	r18, 0xFF	; 255
 5da:	3f 4f       	sbci	r19, 0xFF	; 255
 5dc:	82 0f       	add	r24, r18
 5de:	93 1f       	adc	r25, r19
 5e0:	06 96       	adiw	r24, 0x06	; 6
 5e2:	fc 01       	movw	r30, r24
 5e4:	80 81       	ld	r24, Z
 5e6:	91 81       	ldd	r25, Z+1	; 0x01
 5e8:	fc 01       	movw	r30, r24
 5ea:	21 85       	ldd	r18, Z+9	; 0x09
 5ec:	32 85       	ldd	r19, Z+10	; 0x0a
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	9a 81       	ldd	r25, Y+2	; 0x02
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	ae 01       	movw	r20, r28
 5f8:	4f 5f       	subi	r20, 0xFF	; 255
 5fa:	5f 4f       	sbci	r21, 0xFF	; 255
 5fc:	84 0f       	add	r24, r20
 5fe:	95 1f       	adc	r25, r21
 600:	06 96       	adiw	r24, 0x06	; 6
 602:	fc 01       	movw	r30, r24
 604:	80 81       	ld	r24, Z
 606:	91 81       	ldd	r25, Z+1	; 0x01
 608:	fc 01       	movw	r30, r24
 60a:	80 81       	ld	r24, Z
 60c:	08 2e       	mov	r0, r24
 60e:	00 0c       	add	r0, r0
 610:	99 0b       	sbc	r25, r25
 612:	f9 01       	movw	r30, r18
 614:	09 95       	icall
 616:	f8 01       	movw	r30, r16
 618:	80 83       	st	Z, r24
 61a:	89 81       	ldd	r24, Y+1	; 0x01
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 61c:	9a 81       	ldd	r25, Y+2	; 0x02
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	9e 01       	movw	r18, r28
 624:	2f 5f       	subi	r18, 0xFF	; 255
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	82 0f       	add	r24, r18
 62a:	93 1f       	adc	r25, r19
 62c:	06 96       	adiw	r24, 0x06	; 6
 62e:	fc 01       	movw	r30, r24
 630:	80 81       	ld	r24, Z
 632:	91 81       	ldd	r25, Z+1	; 0x01
 634:	fc 01       	movw	r30, r24
 636:	15 82       	std	Z+5, r1	; 0x05
 638:	16 82       	std	Z+6, r1	; 0x06
 63a:	17 82       	std	Z+7, r1	; 0x07
 63c:	10 86       	std	Z+8, r1	; 0x08
 63e:	89 81       	ldd	r24, Y+1	; 0x01
			}
			tasks[i]->elapsedTime += 1;
 640:	9a 81       	ldd	r25, Y+2	; 0x02
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	9e 01       	movw	r18, r28
 648:	2f 5f       	subi	r18, 0xFF	; 255
 64a:	3f 4f       	sbci	r19, 0xFF	; 255
 64c:	82 0f       	add	r24, r18
 64e:	93 1f       	adc	r25, r19
 650:	06 96       	adiw	r24, 0x06	; 6
 652:	fc 01       	movw	r30, r24
 654:	20 81       	ld	r18, Z
 656:	31 81       	ldd	r19, Z+1	; 0x01
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	9a 81       	ldd	r25, Y+2	; 0x02
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	ae 01       	movw	r20, r28
 662:	4f 5f       	subi	r20, 0xFF	; 255
 664:	5f 4f       	sbci	r21, 0xFF	; 255
 666:	84 0f       	add	r24, r20
 668:	95 1f       	adc	r25, r21
 66a:	06 96       	adiw	r24, 0x06	; 6
 66c:	fc 01       	movw	r30, r24
 66e:	80 81       	ld	r24, Z
 670:	91 81       	ldd	r25, Z+1	; 0x01
 672:	fc 01       	movw	r30, r24
 674:	85 81       	ldd	r24, Z+5	; 0x05
 676:	96 81       	ldd	r25, Z+6	; 0x06
 678:	a7 81       	ldd	r26, Z+7	; 0x07
 67a:	b0 85       	ldd	r27, Z+8	; 0x08
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	a1 1d       	adc	r26, r1
 680:	b1 1d       	adc	r27, r1
 682:	f9 01       	movw	r30, r18
 684:	85 83       	std	Z+5, r24	; 0x05
 686:	96 83       	std	Z+6, r25	; 0x06
 688:	a7 83       	std	Z+7, r26	; 0x07
 68a:	b0 87       	std	Z+8, r27	; 0x08
 68c:	89 81       	ldd	r24, Y+1	; 0x01
	TimerOn();

	unsigned short i; // Scheduler for-loop iterator
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 68e:	9a 81       	ldd	r25, Y+2	; 0x02
 690:	01 96       	adiw	r24, 0x01	; 1
 692:	9a 83       	std	Y+2, r25	; 0x02
 694:	89 83       	std	Y+1, r24	; 0x01
 696:	29 81       	ldd	r18, Y+1	; 0x01
 698:	3a 81       	ldd	r19, Y+2	; 0x02
 69a:	8b 81       	ldd	r24, Y+3	; 0x03
 69c:	9c 81       	ldd	r25, Y+4	; 0x04
 69e:	28 17       	cp	r18, r24
 6a0:	39 07       	cpc	r19, r25
 6a2:	08 f4       	brcc	.+2      	; 0x6a6 <main+0x220>
 6a4:	5d cf       	rjmp	.-326    	; 0x560 <main+0xda>
 6a6:	00 00       	nop
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 6a8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 6ac:	88 23       	and	r24, r24
 6ae:	e1 f3       	breq	.-8      	; 0x6a8 <main+0x222>
 6b0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		TimerFlag = 0;
 6b4:	52 cf       	rjmp	.-348    	; 0x55a <main+0xd4>

000006b6 <_exit>:
	}
 6b6:	f8 94       	cli

000006b8 <__stop_program>:
 6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <__stop_program>
