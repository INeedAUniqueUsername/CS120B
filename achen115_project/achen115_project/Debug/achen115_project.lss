
achen115_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00001220  000012b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  00800106  00800106  000012ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000124b  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091e  00000000  00000000  00002697  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aad  00000000  00000000  00002fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000434  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005d8  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000930  00000000  00000000  00004470  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00004da0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e0 e2       	ldi	r30, 0x20	; 32
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 30       	cpi	r26, 0x06	; 6
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a6 e0       	ldi	r26, 0x06	; 6
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3a       	cpi	r26, 0xA6	; 166
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	f4 d7       	rcall	.+4072   	; 0x10ac <main>
      c4:	0c 94 0e 09 	jmp	0x121c	; 0x121c <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <store>:
		if(!inBoundsPoint(g, &p) || getPoint(g, &p)) {
			return 0;
		}
	}
	return 1;
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <store+0x6>
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	89 83       	std	Y+1, r24	; 0x01
      d6:	6a 83       	std	Y+2, r22	; 0x02
      d8:	00 00       	nop
      da:	8f e3       	ldi	r24, 0x3F	; 63
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	fc 01       	movw	r30, r24
      e0:	80 81       	ld	r24, Z
      e2:	88 2f       	mov	r24, r24
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	84 70       	andi	r24, 0x04	; 4
      e8:	99 27       	eor	r25, r25
      ea:	89 2b       	or	r24, r25
      ec:	b1 f7       	brne	.-20     	; 0xda <store+0x10>
      ee:	81 e4       	ldi	r24, 0x41	; 65
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	29 81       	ldd	r18, Y+1	; 0x01
      f4:	22 2f       	mov	r18, r18
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	fc 01       	movw	r30, r24
      fa:	31 83       	std	Z+1, r19	; 0x01
      fc:	20 83       	st	Z, r18
      fe:	80 e4       	ldi	r24, 0x40	; 64
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	2a 81       	ldd	r18, Y+2	; 0x02
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
     108:	8f e3       	ldi	r24, 0x3F	; 63
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	2f e3       	ldi	r18, 0x3F	; 63
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	f9 01       	movw	r30, r18
     112:	20 81       	ld	r18, Z
     114:	2f 70       	andi	r18, 0x0F	; 15
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
     11a:	8f e3       	ldi	r24, 0x3F	; 63
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	2f e3       	ldi	r18, 0x3F	; 63
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	24 60       	ori	r18, 0x04	; 4
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
     12c:	8f e3       	ldi	r24, 0x3F	; 63
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	2f e3       	ldi	r18, 0x3F	; 63
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	f9 01       	movw	r30, r18
     136:	20 81       	ld	r18, Z
     138:	22 60       	ori	r18, 0x02	; 2
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
     13e:	00 00       	nop
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	df 91       	pop	r29
     146:	cf 91       	pop	r28
     148:	08 95       	ret

0000014a <load>:
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	00 d0       	rcall	.+0      	; 0x150 <load+0x6>
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	9a 83       	std	Y+2, r25	; 0x02
     156:	89 83       	std	Y+1, r24	; 0x01
     158:	00 00       	nop
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	fc 01       	movw	r30, r24
     160:	80 81       	ld	r24, Z
     162:	88 2f       	mov	r24, r24
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	84 70       	andi	r24, 0x04	; 4
     168:	99 27       	eor	r25, r25
     16a:	89 2b       	or	r24, r25
     16c:	b1 f7       	brne	.-20     	; 0x15a <load+0x10>
     16e:	81 e4       	ldi	r24, 0x41	; 65
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	29 81       	ldd	r18, Y+1	; 0x01
     174:	3a 81       	ldd	r19, Y+2	; 0x02
     176:	fc 01       	movw	r30, r24
     178:	31 83       	std	Z+1, r19	; 0x01
     17a:	20 83       	st	Z, r18
     17c:	8f e3       	ldi	r24, 0x3F	; 63
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	2f e3       	ldi	r18, 0x3F	; 63
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	f9 01       	movw	r30, r18
     186:	20 81       	ld	r18, Z
     188:	21 60       	ori	r18, 0x01	; 1
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
     18e:	80 e4       	ldi	r24, 0x40	; 64
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	fc 01       	movw	r30, r24
     194:	80 81       	ld	r24, Z
     196:	0f 90       	pop	r0
     198:	0f 90       	pop	r0
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <add>:
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	cd b7       	in	r28, 0x3d	; 61
     1a6:	de b7       	in	r29, 0x3e	; 62
     1a8:	28 97       	sbiw	r28, 0x08	; 8
     1aa:	0f b6       	in	r0, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	de bf       	out	0x3e, r29	; 62
     1b0:	0f be       	out	0x3f, r0	; 63
     1b2:	cd bf       	out	0x3d, r28	; 61
     1b4:	9e 83       	std	Y+6, r25	; 0x06
     1b6:	8d 83       	std	Y+5, r24	; 0x05
     1b8:	78 87       	std	Y+8, r23	; 0x08
     1ba:	6f 83       	std	Y+7, r22	; 0x07
     1bc:	8d 81       	ldd	r24, Y+5	; 0x05
     1be:	9e 81       	ldd	r25, Y+6	; 0x06
     1c0:	fc 01       	movw	r30, r24
     1c2:	20 81       	ld	r18, Z
     1c4:	31 81       	ldd	r19, Z+1	; 0x01
     1c6:	8f 81       	ldd	r24, Y+7	; 0x07
     1c8:	98 85       	ldd	r25, Y+8	; 0x08
     1ca:	fc 01       	movw	r30, r24
     1cc:	80 81       	ld	r24, Z
     1ce:	91 81       	ldd	r25, Z+1	; 0x01
     1d0:	82 0f       	add	r24, r18
     1d2:	93 1f       	adc	r25, r19
     1d4:	9a 83       	std	Y+2, r25	; 0x02
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	8d 81       	ldd	r24, Y+5	; 0x05
     1da:	9e 81       	ldd	r25, Y+6	; 0x06
     1dc:	fc 01       	movw	r30, r24
     1de:	22 81       	ldd	r18, Z+2	; 0x02
     1e0:	33 81       	ldd	r19, Z+3	; 0x03
     1e2:	8f 81       	ldd	r24, Y+7	; 0x07
     1e4:	98 85       	ldd	r25, Y+8	; 0x08
     1e6:	fc 01       	movw	r30, r24
     1e8:	82 81       	ldd	r24, Z+2	; 0x02
     1ea:	93 81       	ldd	r25, Z+3	; 0x03
     1ec:	82 0f       	add	r24, r18
     1ee:	93 1f       	adc	r25, r19
     1f0:	9c 83       	std	Y+4, r25	; 0x04
     1f2:	8b 83       	std	Y+3, r24	; 0x03
     1f4:	89 81       	ldd	r24, Y+1	; 0x01
     1f6:	9a 81       	ldd	r25, Y+2	; 0x02
     1f8:	ab 81       	ldd	r26, Y+3	; 0x03
     1fa:	bc 81       	ldd	r27, Y+4	; 0x04
     1fc:	bc 01       	movw	r22, r24
     1fe:	cd 01       	movw	r24, r26
     200:	28 96       	adiw	r28, 0x08	; 8
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	f8 94       	cli
     206:	de bf       	out	0x3e, r29	; 62
     208:	0f be       	out	0x3f, r0	; 63
     20a:	cd bf       	out	0x3d, r28	; 61
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <pivot>:
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	00 d0       	rcall	.+0      	; 0x218 <pivot+0x6>
     218:	00 d0       	rcall	.+0      	; 0x21a <pivot+0x8>
     21a:	cd b7       	in	r28, 0x3d	; 61
     21c:	de b7       	in	r29, 0x3e	; 62
     21e:	9c 83       	std	Y+4, r25	; 0x04
     220:	8b 83       	std	Y+3, r24	; 0x03
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	9c 81       	ldd	r25, Y+4	; 0x04
     226:	fc 01       	movw	r30, r24
     228:	80 81       	ld	r24, Z
     22a:	91 81       	ldd	r25, Z+1	; 0x01
     22c:	9a 83       	std	Y+2, r25	; 0x02
     22e:	89 83       	std	Y+1, r24	; 0x01
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	9c 81       	ldd	r25, Y+4	; 0x04
     234:	fc 01       	movw	r30, r24
     236:	82 81       	ldd	r24, Z+2	; 0x02
     238:	93 81       	ldd	r25, Z+3	; 0x03
     23a:	22 27       	eor	r18, r18
     23c:	33 27       	eor	r19, r19
     23e:	28 1b       	sub	r18, r24
     240:	39 0b       	sbc	r19, r25
     242:	8b 81       	ldd	r24, Y+3	; 0x03
     244:	9c 81       	ldd	r25, Y+4	; 0x04
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	9c 81       	ldd	r25, Y+4	; 0x04
     250:	29 81       	ldd	r18, Y+1	; 0x01
     252:	3a 81       	ldd	r19, Y+2	; 0x02
     254:	fc 01       	movw	r30, r24
     256:	33 83       	std	Z+3, r19	; 0x03
     258:	22 83       	std	Z+2, r18	; 0x02
     25a:	00 00       	nop
     25c:	0f 90       	pop	r0
     25e:	0f 90       	pop	r0
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <L>:
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	00 d0       	rcall	.+0      	; 0x270 <L+0x6>
     270:	00 d0       	rcall	.+0      	; 0x272 <L+0x8>
     272:	00 d0       	rcall	.+0      	; 0x274 <L+0xa>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	9a 83       	std	Y+2, r25	; 0x02
     27a:	89 83       	std	Y+1, r24	; 0x01
     27c:	4b 83       	std	Y+3, r20	; 0x03
     27e:	5c 83       	std	Y+4, r21	; 0x04
     280:	6d 83       	std	Y+5, r22	; 0x05
     282:	7e 83       	std	Y+6, r23	; 0x06
     284:	29 81       	ldd	r18, Y+1	; 0x01
     286:	3a 81       	ldd	r19, Y+2	; 0x02
     288:	8b 81       	ldd	r24, Y+3	; 0x03
     28a:	9c 81       	ldd	r25, Y+4	; 0x04
     28c:	ad 81       	ldd	r26, Y+5	; 0x05
     28e:	be 81       	ldd	r27, Y+6	; 0x06
     290:	f9 01       	movw	r30, r18
     292:	80 83       	st	Z, r24
     294:	91 83       	std	Z+1, r25	; 0x01
     296:	a2 83       	std	Z+2, r26	; 0x02
     298:	b3 83       	std	Z+3, r27	; 0x03
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	9a 81       	ldd	r25, Y+2	; 0x02
     29e:	fc 01       	movw	r30, r24
     2a0:	15 82       	std	Z+5, r1	; 0x05
     2a2:	14 82       	std	Z+4, r1	; 0x04
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	9a 81       	ldd	r25, Y+2	; 0x02
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	fc 01       	movw	r30, r24
     2ae:	37 83       	std	Z+7, r19	; 0x07
     2b0:	26 83       	std	Z+6, r18	; 0x06
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	9a 81       	ldd	r25, Y+2	; 0x02
     2b6:	fc 01       	movw	r30, r24
     2b8:	11 86       	std	Z+9, r1	; 0x09
     2ba:	10 86       	std	Z+8, r1	; 0x08
     2bc:	89 81       	ldd	r24, Y+1	; 0x01
     2be:	9a 81       	ldd	r25, Y+2	; 0x02
     2c0:	fc 01       	movw	r30, r24
     2c2:	13 86       	std	Z+11, r1	; 0x0b
     2c4:	12 86       	std	Z+10, r1	; 0x0a
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	9a 81       	ldd	r25, Y+2	; 0x02
     2ca:	fc 01       	movw	r30, r24
     2cc:	15 86       	std	Z+13, r1	; 0x0d
     2ce:	14 86       	std	Z+12, r1	; 0x0c
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
     2d2:	9a 81       	ldd	r25, Y+2	; 0x02
     2d4:	2f ef       	ldi	r18, 0xFF	; 255
     2d6:	3f ef       	ldi	r19, 0xFF	; 255
     2d8:	fc 01       	movw	r30, r24
     2da:	37 87       	std	Z+15, r19	; 0x0f
     2dc:	26 87       	std	Z+14, r18	; 0x0e
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	9a 81       	ldd	r25, Y+2	; 0x02
     2e2:	21 e0       	ldi	r18, 0x01	; 1
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	fc 01       	movw	r30, r24
     2e8:	31 8b       	std	Z+17, r19	; 0x11
     2ea:	20 8b       	std	Z+16, r18	; 0x10
     2ec:	89 81       	ldd	r24, Y+1	; 0x01
     2ee:	9a 81       	ldd	r25, Y+2	; 0x02
     2f0:	2f ef       	ldi	r18, 0xFF	; 255
     2f2:	3f ef       	ldi	r19, 0xFF	; 255
     2f4:	fc 01       	movw	r30, r24
     2f6:	33 8b       	std	Z+19, r19	; 0x13
     2f8:	22 8b       	std	Z+18, r18	; 0x12
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	9a 81       	ldd	r25, Y+2	; 0x02
     2fe:	26 96       	adiw	r28, 0x06	; 6
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <Z>:
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	00 d0       	rcall	.+0      	; 0x316 <Z+0x6>
     316:	00 d0       	rcall	.+0      	; 0x318 <Z+0x8>
     318:	00 d0       	rcall	.+0      	; 0x31a <Z+0xa>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	9a 83       	std	Y+2, r25	; 0x02
     320:	89 83       	std	Y+1, r24	; 0x01
     322:	4b 83       	std	Y+3, r20	; 0x03
     324:	5c 83       	std	Y+4, r21	; 0x04
     326:	6d 83       	std	Y+5, r22	; 0x05
     328:	7e 83       	std	Y+6, r23	; 0x06
     32a:	29 81       	ldd	r18, Y+1	; 0x01
     32c:	3a 81       	ldd	r19, Y+2	; 0x02
     32e:	8b 81       	ldd	r24, Y+3	; 0x03
     330:	9c 81       	ldd	r25, Y+4	; 0x04
     332:	ad 81       	ldd	r26, Y+5	; 0x05
     334:	be 81       	ldd	r27, Y+6	; 0x06
     336:	f9 01       	movw	r30, r18
     338:	80 83       	st	Z, r24
     33a:	91 83       	std	Z+1, r25	; 0x01
     33c:	a2 83       	std	Z+2, r26	; 0x02
     33e:	b3 83       	std	Z+3, r27	; 0x03
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	9a 81       	ldd	r25, Y+2	; 0x02
     344:	2f ef       	ldi	r18, 0xFF	; 255
     346:	3f ef       	ldi	r19, 0xFF	; 255
     348:	fc 01       	movw	r30, r24
     34a:	35 83       	std	Z+5, r19	; 0x05
     34c:	24 83       	std	Z+4, r18	; 0x04
     34e:	89 81       	ldd	r24, Y+1	; 0x01
     350:	9a 81       	ldd	r25, Y+2	; 0x02
     352:	fc 01       	movw	r30, r24
     354:	17 82       	std	Z+7, r1	; 0x07
     356:	16 82       	std	Z+6, r1	; 0x06
     358:	89 81       	ldd	r24, Y+1	; 0x01
     35a:	9a 81       	ldd	r25, Y+2	; 0x02
     35c:	fc 01       	movw	r30, r24
     35e:	11 86       	std	Z+9, r1	; 0x09
     360:	10 86       	std	Z+8, r1	; 0x08
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	9a 81       	ldd	r25, Y+2	; 0x02
     366:	fc 01       	movw	r30, r24
     368:	13 86       	std	Z+11, r1	; 0x0b
     36a:	12 86       	std	Z+10, r1	; 0x0a
     36c:	89 81       	ldd	r24, Y+1	; 0x01
     36e:	9a 81       	ldd	r25, Y+2	; 0x02
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	fc 01       	movw	r30, r24
     376:	35 87       	std	Z+13, r19	; 0x0d
     378:	24 87       	std	Z+12, r18	; 0x0c
     37a:	89 81       	ldd	r24, Y+1	; 0x01
     37c:	9a 81       	ldd	r25, Y+2	; 0x02
     37e:	fc 01       	movw	r30, r24
     380:	17 86       	std	Z+15, r1	; 0x0f
     382:	16 86       	std	Z+14, r1	; 0x0e
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	21 e0       	ldi	r18, 0x01	; 1
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	fc 01       	movw	r30, r24
     38e:	31 8b       	std	Z+17, r19	; 0x11
     390:	20 8b       	std	Z+16, r18	; 0x10
     392:	89 81       	ldd	r24, Y+1	; 0x01
     394:	9a 81       	ldd	r25, Y+2	; 0x02
     396:	21 e0       	ldi	r18, 0x01	; 1
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	fc 01       	movw	r30, r24
     39c:	33 8b       	std	Z+19, r19	; 0x13
     39e:	22 8b       	std	Z+18, r18	; 0x12
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	9a 81       	ldd	r25, Y+2	; 0x02
     3a4:	26 96       	adiw	r28, 0x06	; 6
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	de bf       	out	0x3e, r29	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	cd bf       	out	0x3d, r28	; 61
     3b0:	df 91       	pop	r29
     3b2:	cf 91       	pop	r28
     3b4:	08 95       	ret

000003b6 <I>:
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <I+0x6>
     3bc:	00 d0       	rcall	.+0      	; 0x3be <I+0x8>
     3be:	00 d0       	rcall	.+0      	; 0x3c0 <I+0xa>
     3c0:	cd b7       	in	r28, 0x3d	; 61
     3c2:	de b7       	in	r29, 0x3e	; 62
     3c4:	9a 83       	std	Y+2, r25	; 0x02
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	4b 83       	std	Y+3, r20	; 0x03
     3ca:	5c 83       	std	Y+4, r21	; 0x04
     3cc:	6d 83       	std	Y+5, r22	; 0x05
     3ce:	7e 83       	std	Y+6, r23	; 0x06
     3d0:	29 81       	ldd	r18, Y+1	; 0x01
     3d2:	3a 81       	ldd	r19, Y+2	; 0x02
     3d4:	8b 81       	ldd	r24, Y+3	; 0x03
     3d6:	9c 81       	ldd	r25, Y+4	; 0x04
     3d8:	ad 81       	ldd	r26, Y+5	; 0x05
     3da:	be 81       	ldd	r27, Y+6	; 0x06
     3dc:	f9 01       	movw	r30, r18
     3de:	80 83       	st	Z, r24
     3e0:	91 83       	std	Z+1, r25	; 0x01
     3e2:	a2 83       	std	Z+2, r26	; 0x02
     3e4:	b3 83       	std	Z+3, r27	; 0x03
     3e6:	89 81       	ldd	r24, Y+1	; 0x01
     3e8:	9a 81       	ldd	r25, Y+2	; 0x02
     3ea:	fc 01       	movw	r30, r24
     3ec:	15 82       	std	Z+5, r1	; 0x05
     3ee:	14 82       	std	Z+4, r1	; 0x04
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	9a 81       	ldd	r25, Y+2	; 0x02
     3f4:	2f ef       	ldi	r18, 0xFF	; 255
     3f6:	3f ef       	ldi	r19, 0xFF	; 255
     3f8:	fc 01       	movw	r30, r24
     3fa:	37 83       	std	Z+7, r19	; 0x07
     3fc:	26 83       	std	Z+6, r18	; 0x06
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	fc 01       	movw	r30, r24
     404:	11 86       	std	Z+9, r1	; 0x09
     406:	10 86       	std	Z+8, r1	; 0x08
     408:	89 81       	ldd	r24, Y+1	; 0x01
     40a:	9a 81       	ldd	r25, Y+2	; 0x02
     40c:	fc 01       	movw	r30, r24
     40e:	13 86       	std	Z+11, r1	; 0x0b
     410:	12 86       	std	Z+10, r1	; 0x0a
     412:	89 81       	ldd	r24, Y+1	; 0x01
     414:	9a 81       	ldd	r25, Y+2	; 0x02
     416:	fc 01       	movw	r30, r24
     418:	15 86       	std	Z+13, r1	; 0x0d
     41a:	14 86       	std	Z+12, r1	; 0x0c
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	21 e0       	ldi	r18, 0x01	; 1
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	fc 01       	movw	r30, r24
     426:	37 87       	std	Z+15, r19	; 0x0f
     428:	26 87       	std	Z+14, r18	; 0x0e
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	9a 81       	ldd	r25, Y+2	; 0x02
     42e:	fc 01       	movw	r30, r24
     430:	11 8a       	std	Z+17, r1	; 0x11
     432:	10 8a       	std	Z+16, r1	; 0x10
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	9a 81       	ldd	r25, Y+2	; 0x02
     438:	22 e0       	ldi	r18, 0x02	; 2
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	fc 01       	movw	r30, r24
     43e:	33 8b       	std	Z+19, r19	; 0x13
     440:	22 8b       	std	Z+18, r18	; 0x12
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	9a 81       	ldd	r25, Y+2	; 0x02
     446:	26 96       	adiw	r28, 0x06	; 6
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <O>:
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	00 d0       	rcall	.+0      	; 0x45e <O+0x6>
     45e:	00 d0       	rcall	.+0      	; 0x460 <O+0x8>
     460:	00 d0       	rcall	.+0      	; 0x462 <O+0xa>
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	9a 83       	std	Y+2, r25	; 0x02
     468:	89 83       	std	Y+1, r24	; 0x01
     46a:	4b 83       	std	Y+3, r20	; 0x03
     46c:	5c 83       	std	Y+4, r21	; 0x04
     46e:	6d 83       	std	Y+5, r22	; 0x05
     470:	7e 83       	std	Y+6, r23	; 0x06
     472:	29 81       	ldd	r18, Y+1	; 0x01
     474:	3a 81       	ldd	r19, Y+2	; 0x02
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	9c 81       	ldd	r25, Y+4	; 0x04
     47a:	ad 81       	ldd	r26, Y+5	; 0x05
     47c:	be 81       	ldd	r27, Y+6	; 0x06
     47e:	f9 01       	movw	r30, r18
     480:	80 83       	st	Z, r24
     482:	91 83       	std	Z+1, r25	; 0x01
     484:	a2 83       	std	Z+2, r26	; 0x02
     486:	b3 83       	std	Z+3, r27	; 0x03
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	9a 81       	ldd	r25, Y+2	; 0x02
     48c:	fc 01       	movw	r30, r24
     48e:	15 82       	std	Z+5, r1	; 0x05
     490:	14 82       	std	Z+4, r1	; 0x04
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	9a 81       	ldd	r25, Y+2	; 0x02
     496:	2f ef       	ldi	r18, 0xFF	; 255
     498:	3f ef       	ldi	r19, 0xFF	; 255
     49a:	fc 01       	movw	r30, r24
     49c:	37 83       	std	Z+7, r19	; 0x07
     49e:	26 83       	std	Z+6, r18	; 0x06
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	9a 81       	ldd	r25, Y+2	; 0x02
     4a4:	fc 01       	movw	r30, r24
     4a6:	11 86       	std	Z+9, r1	; 0x09
     4a8:	10 86       	std	Z+8, r1	; 0x08
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	fc 01       	movw	r30, r24
     4b0:	13 86       	std	Z+11, r1	; 0x0b
     4b2:	12 86       	std	Z+10, r1	; 0x0a
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	9a 81       	ldd	r25, Y+2	; 0x02
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	fc 01       	movw	r30, r24
     4be:	35 87       	std	Z+13, r19	; 0x0d
     4c0:	24 87       	std	Z+12, r18	; 0x0c
     4c2:	89 81       	ldd	r24, Y+1	; 0x01
     4c4:	9a 81       	ldd	r25, Y+2	; 0x02
     4c6:	fc 01       	movw	r30, r24
     4c8:	17 86       	std	Z+15, r1	; 0x0f
     4ca:	16 86       	std	Z+14, r1	; 0x0e
     4cc:	89 81       	ldd	r24, Y+1	; 0x01
     4ce:	9a 81       	ldd	r25, Y+2	; 0x02
     4d0:	21 e0       	ldi	r18, 0x01	; 1
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	fc 01       	movw	r30, r24
     4d6:	31 8b       	std	Z+17, r19	; 0x11
     4d8:	20 8b       	std	Z+16, r18	; 0x10
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	9a 81       	ldd	r25, Y+2	; 0x02
     4de:	2f ef       	ldi	r18, 0xFF	; 255
     4e0:	3f ef       	ldi	r19, 0xFF	; 255
     4e2:	fc 01       	movw	r30, r24
     4e4:	33 8b       	std	Z+19, r19	; 0x13
     4e6:	22 8b       	std	Z+18, r18	; 0x12
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	9a 81       	ldd	r25, Y+2	; 0x02
     4ec:	26 96       	adiw	r28, 0x06	; 6
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <CreateTetra>:
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	00 d0       	rcall	.+0      	; 0x504 <CreateTetra+0x6>
     504:	00 d0       	rcall	.+0      	; 0x506 <CreateTetra+0x8>
     506:	00 d0       	rcall	.+0      	; 0x508 <CreateTetra+0xa>
     508:	cd b7       	in	r28, 0x3d	; 61
     50a:	de b7       	in	r29, 0x3e	; 62
     50c:	9e 83       	std	Y+6, r25	; 0x06
     50e:	8d 83       	std	Y+5, r24	; 0x05
     510:	84 e0       	ldi	r24, 0x04	; 4
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	9a 83       	std	Y+2, r25	; 0x02
     516:	89 83       	std	Y+1, r24	; 0x01
     518:	82 e1       	ldi	r24, 0x12	; 18
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	9c 83       	std	Y+4, r25	; 0x04
     51e:	8b 83       	std	Y+3, r24	; 0x03
     520:	12 d6       	rcall	.+3108   	; 0x1146 <rand>
     522:	83 70       	andi	r24, 0x03	; 3
     524:	90 78       	andi	r25, 0x80	; 128
     526:	99 23       	and	r25, r25
     528:	24 f4       	brge	.+8      	; 0x532 <CreateTetra+0x34>
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	8c 6f       	ori	r24, 0xFC	; 252
     52e:	9f 6f       	ori	r25, 0xFF	; 255
     530:	01 96       	adiw	r24, 0x01	; 1
     532:	81 30       	cpi	r24, 0x01	; 1
     534:	91 05       	cpc	r25, r1
     536:	81 f0       	breq	.+32     	; 0x558 <CreateTetra+0x5a>
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	91 05       	cpc	r25, r1
     53c:	c1 f0       	breq	.+48     	; 0x56e <CreateTetra+0x70>
     53e:	89 2b       	or	r24, r25
     540:	09 f5       	brne	.+66     	; 0x584 <CreateTetra+0x86>
     542:	2d 81       	ldd	r18, Y+5	; 0x05
     544:	3e 81       	ldd	r19, Y+6	; 0x06
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	9a 81       	ldd	r25, Y+2	; 0x02
     54a:	ab 81       	ldd	r26, Y+3	; 0x03
     54c:	bc 81       	ldd	r27, Y+4	; 0x04
     54e:	ac 01       	movw	r20, r24
     550:	bd 01       	movw	r22, r26
     552:	c9 01       	movw	r24, r18
     554:	8a de       	rcall	.-748    	; 0x26a <L>
     556:	20 c0       	rjmp	.+64     	; 0x598 <CreateTetra+0x9a>
     558:	2d 81       	ldd	r18, Y+5	; 0x05
     55a:	3e 81       	ldd	r19, Y+6	; 0x06
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	ab 81       	ldd	r26, Y+3	; 0x03
     562:	bc 81       	ldd	r27, Y+4	; 0x04
     564:	ac 01       	movw	r20, r24
     566:	bd 01       	movw	r22, r26
     568:	c9 01       	movw	r24, r18
     56a:	d2 de       	rcall	.-604    	; 0x310 <Z>
     56c:	15 c0       	rjmp	.+42     	; 0x598 <CreateTetra+0x9a>
     56e:	2d 81       	ldd	r18, Y+5	; 0x05
     570:	3e 81       	ldd	r19, Y+6	; 0x06
     572:	89 81       	ldd	r24, Y+1	; 0x01
     574:	9a 81       	ldd	r25, Y+2	; 0x02
     576:	ab 81       	ldd	r26, Y+3	; 0x03
     578:	bc 81       	ldd	r27, Y+4	; 0x04
     57a:	ac 01       	movw	r20, r24
     57c:	bd 01       	movw	r22, r26
     57e:	c9 01       	movw	r24, r18
     580:	1a df       	rcall	.-460    	; 0x3b6 <I>
     582:	0a c0       	rjmp	.+20     	; 0x598 <CreateTetra+0x9a>
     584:	2d 81       	ldd	r18, Y+5	; 0x05
     586:	3e 81       	ldd	r19, Y+6	; 0x06
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	9a 81       	ldd	r25, Y+2	; 0x02
     58c:	ab 81       	ldd	r26, Y+3	; 0x03
     58e:	bc 81       	ldd	r27, Y+4	; 0x04
     590:	ac 01       	movw	r20, r24
     592:	bd 01       	movw	r22, r26
     594:	c9 01       	movw	r24, r18
     596:	60 df       	rcall	.-320    	; 0x458 <O>
     598:	8d 81       	ldd	r24, Y+5	; 0x05
     59a:	9e 81       	ldd	r25, Y+6	; 0x06
     59c:	26 96       	adiw	r28, 0x06	; 6
     59e:	0f b6       	in	r0, 0x3f	; 63
     5a0:	f8 94       	cli
     5a2:	de bf       	out	0x3e, r29	; 62
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	cd bf       	out	0x3d, r28	; 61
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <getTile>:
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	00 d0       	rcall	.+0      	; 0x5b4 <getTile+0x6>
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <getTile+0x8>
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
     5ba:	9a 83       	std	Y+2, r25	; 0x02
     5bc:	89 83       	std	Y+1, r24	; 0x01
     5be:	7c 83       	std	Y+4, r23	; 0x04
     5c0:	6b 83       	std	Y+3, r22	; 0x03
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	9c 81       	ldd	r25, Y+4	; 0x04
     5c6:	01 96       	adiw	r24, 0x01	; 1
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	29 81       	ldd	r18, Y+1	; 0x01
     5d2:	3a 81       	ldd	r19, Y+2	; 0x02
     5d4:	28 0f       	add	r18, r24
     5d6:	39 1f       	adc	r19, r25
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	9a 81       	ldd	r25, Y+2	; 0x02
     5dc:	b9 01       	movw	r22, r18
     5de:	e0 dd       	rcall	.-1088   	; 0x1a0 <add>
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	bc 01       	movw	r22, r24
     5e6:	cd 01       	movw	r24, r26
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <down>:
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	00 d0       	rcall	.+0      	; 0x5fc <down+0x6>
     5fc:	cd b7       	in	r28, 0x3d	; 61
     5fe:	de b7       	in	r29, 0x3e	; 62
     600:	9a 83       	std	Y+2, r25	; 0x02
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	9a 81       	ldd	r25, Y+2	; 0x02
     608:	fc 01       	movw	r30, r24
     60a:	82 81       	ldd	r24, Z+2	; 0x02
     60c:	93 81       	ldd	r25, Z+3	; 0x03
     60e:	01 97       	sbiw	r24, 0x01	; 1
     610:	9c 01       	movw	r18, r24
     612:	89 81       	ldd	r24, Y+1	; 0x01
     614:	9a 81       	ldd	r25, Y+2	; 0x02
     616:	fc 01       	movw	r30, r24
     618:	33 83       	std	Z+3, r19	; 0x03
     61a:	22 83       	std	Z+2, r18	; 0x02
     61c:	00 00       	nop
     61e:	0f 90       	pop	r0
     620:	0f 90       	pop	r0
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	08 95       	ret

00000628 <right>:
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	00 d0       	rcall	.+0      	; 0x62e <right+0x6>
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	9a 83       	std	Y+2, r25	; 0x02
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	89 81       	ldd	r24, Y+1	; 0x01
     638:	9a 81       	ldd	r25, Y+2	; 0x02
     63a:	fc 01       	movw	r30, r24
     63c:	80 81       	ld	r24, Z
     63e:	91 81       	ldd	r25, Z+1	; 0x01
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	9c 01       	movw	r18, r24
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	fc 01       	movw	r30, r24
     64a:	31 83       	std	Z+1, r19	; 0x01
     64c:	20 83       	st	Z, r18
     64e:	00 00       	nop
     650:	0f 90       	pop	r0
     652:	0f 90       	pop	r0
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <left>:
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	00 d0       	rcall	.+0      	; 0x660 <left+0x6>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	fc 01       	movw	r30, r24
     66e:	80 81       	ld	r24, Z
     670:	91 81       	ldd	r25, Z+1	; 0x01
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	9c 01       	movw	r18, r24
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	9a 81       	ldd	r25, Y+2	; 0x02
     67a:	fc 01       	movw	r30, r24
     67c:	31 83       	std	Z+1, r19	; 0x01
     67e:	20 83       	st	Z, r18
     680:	00 00       	nop
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	08 95       	ret

0000068c <turn>:
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	00 d0       	rcall	.+0      	; 0x692 <turn+0x6>
     692:	00 d0       	rcall	.+0      	; 0x694 <turn+0x8>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	9c 83       	std	Y+4, r25	; 0x04
     69a:	8b 83       	std	Y+3, r24	; 0x03
     69c:	1a 82       	std	Y+2, r1	; 0x02
     69e:	19 82       	std	Y+1, r1	; 0x01
     6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <turn+0x38>
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	01 96       	adiw	r24, 0x01	; 1
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	2b 81       	ldd	r18, Y+3	; 0x03
     6b2:	3c 81       	ldd	r19, Y+4	; 0x04
     6b4:	82 0f       	add	r24, r18
     6b6:	93 1f       	adc	r25, r19
     6b8:	ac dd       	rcall	.-1192   	; 0x212 <pivot>
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	9a 81       	ldd	r25, Y+2	; 0x02
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	9a 83       	std	Y+2, r25	; 0x02
     6c2:	89 83       	std	Y+1, r24	; 0x01
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	04 97       	sbiw	r24, 0x04	; 4
     6ca:	58 f3       	brcs	.-42     	; 0x6a2 <turn+0x16>
     6cc:	00 00       	nop
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <getPoint>:
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <getPoint+0x6>
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <getPoint+0x8>
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	9a 83       	std	Y+2, r25	; 0x02
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	7c 83       	std	Y+4, r23	; 0x04
     6ee:	6b 83       	std	Y+3, r22	; 0x03
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 81       	ld	r18, Z
     6f8:	31 81       	ldd	r19, Z+1	; 0x01
     6fa:	8b 81       	ldd	r24, Y+3	; 0x03
     6fc:	9c 81       	ldd	r25, Y+4	; 0x04
     6fe:	fc 01       	movw	r30, r24
     700:	82 81       	ldd	r24, Z+2	; 0x02
     702:	93 81       	ldd	r25, Z+3	; 0x03
     704:	49 81       	ldd	r20, Y+1	; 0x01
     706:	5a 81       	ldd	r21, Y+2	; 0x02
     708:	22 95       	swap	r18
     70a:	32 95       	swap	r19
     70c:	30 7f       	andi	r19, 0xF0	; 240
     70e:	32 27       	eor	r19, r18
     710:	20 7f       	andi	r18, 0xF0	; 240
     712:	32 27       	eor	r19, r18
     714:	24 0f       	add	r18, r20
     716:	35 1f       	adc	r19, r21
     718:	82 0f       	add	r24, r18
     71a:	93 1f       	adc	r25, r19
     71c:	fc 01       	movw	r30, r24
     71e:	80 81       	ld	r24, Z
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	08 95       	ret

0000072e <clearRow>:
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	00 d0       	rcall	.+0      	; 0x734 <clearRow+0x6>
     734:	00 d0       	rcall	.+0      	; 0x736 <clearRow+0x8>
     736:	00 d0       	rcall	.+0      	; 0x738 <clearRow+0xa>
     738:	cd b7       	in	r28, 0x3d	; 61
     73a:	de b7       	in	r29, 0x3e	; 62
     73c:	9c 83       	std	Y+4, r25	; 0x04
     73e:	8b 83       	std	Y+3, r24	; 0x03
     740:	7e 83       	std	Y+6, r23	; 0x06
     742:	6d 83       	std	Y+5, r22	; 0x05
     744:	1a 82       	std	Y+2, r1	; 0x02
     746:	19 82       	std	Y+1, r1	; 0x01
     748:	17 c0       	rjmp	.+46     	; 0x778 <clearRow+0x4a>
     74a:	2b 81       	ldd	r18, Y+3	; 0x03
     74c:	3c 81       	ldd	r19, Y+4	; 0x04
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	9a 81       	ldd	r25, Y+2	; 0x02
     752:	82 95       	swap	r24
     754:	92 95       	swap	r25
     756:	90 7f       	andi	r25, 0xF0	; 240
     758:	98 27       	eor	r25, r24
     75a:	80 7f       	andi	r24, 0xF0	; 240
     75c:	98 27       	eor	r25, r24
     75e:	28 0f       	add	r18, r24
     760:	39 1f       	adc	r19, r25
     762:	8d 81       	ldd	r24, Y+5	; 0x05
     764:	9e 81       	ldd	r25, Y+6	; 0x06
     766:	82 0f       	add	r24, r18
     768:	93 1f       	adc	r25, r19
     76a:	fc 01       	movw	r30, r24
     76c:	10 82       	st	Z, r1
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	9a 83       	std	Y+2, r25	; 0x02
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	09 97       	sbiw	r24, 0x09	; 9
     77e:	2c f7       	brge	.-54     	; 0x74a <clearRow+0x1c>
     780:	00 00       	nop
     782:	26 96       	adiw	r28, 0x06	; 6
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <fillRow>:
     794:	cf 93       	push	r28
     796:	df 93       	push	r29
     798:	00 d0       	rcall	.+0      	; 0x79a <fillRow+0x6>
     79a:	00 d0       	rcall	.+0      	; 0x79c <fillRow+0x8>
     79c:	00 d0       	rcall	.+0      	; 0x79e <fillRow+0xa>
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	9c 83       	std	Y+4, r25	; 0x04
     7a4:	8b 83       	std	Y+3, r24	; 0x03
     7a6:	7e 83       	std	Y+6, r23	; 0x06
     7a8:	6d 83       	std	Y+5, r22	; 0x05
     7aa:	1a 82       	std	Y+2, r1	; 0x02
     7ac:	19 82       	std	Y+1, r1	; 0x01
     7ae:	18 c0       	rjmp	.+48     	; 0x7e0 <fillRow+0x4c>
     7b0:	2b 81       	ldd	r18, Y+3	; 0x03
     7b2:	3c 81       	ldd	r19, Y+4	; 0x04
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	9a 81       	ldd	r25, Y+2	; 0x02
     7b8:	82 95       	swap	r24
     7ba:	92 95       	swap	r25
     7bc:	90 7f       	andi	r25, 0xF0	; 240
     7be:	98 27       	eor	r25, r24
     7c0:	80 7f       	andi	r24, 0xF0	; 240
     7c2:	98 27       	eor	r25, r24
     7c4:	28 0f       	add	r18, r24
     7c6:	39 1f       	adc	r19, r25
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	9e 81       	ldd	r25, Y+6	; 0x06
     7cc:	82 0f       	add	r24, r18
     7ce:	93 1f       	adc	r25, r19
     7d0:	21 e0       	ldi	r18, 0x01	; 1
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	9a 81       	ldd	r25, Y+2	; 0x02
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	89 83       	std	Y+1, r24	; 0x01
     7e0:	89 81       	ldd	r24, Y+1	; 0x01
     7e2:	9a 81       	ldd	r25, Y+2	; 0x02
     7e4:	09 97       	sbiw	r24, 0x09	; 9
     7e6:	24 f7       	brge	.-56     	; 0x7b0 <fillRow+0x1c>
     7e8:	00 00       	nop
     7ea:	26 96       	adiw	r28, 0x06	; 6
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <descendRow>:
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	28 97       	sbiw	r28, 0x08	; 8
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	9e 83       	std	Y+6, r25	; 0x06
     812:	8d 83       	std	Y+5, r24	; 0x05
     814:	78 87       	std	Y+8, r23	; 0x08
     816:	6f 83       	std	Y+7, r22	; 0x07
     818:	8f 81       	ldd	r24, Y+7	; 0x07
     81a:	98 85       	ldd	r25, Y+8	; 0x08
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	36 c0       	rjmp	.+108    	; 0x88e <descendRow+0x92>
     822:	1c 82       	std	Y+4, r1	; 0x04
     824:	1b 82       	std	Y+3, r1	; 0x03
     826:	2a c0       	rjmp	.+84     	; 0x87c <descendRow+0x80>
     828:	89 81       	ldd	r24, Y+1	; 0x01
     82a:	9a 81       	ldd	r25, Y+2	; 0x02
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	4d 81       	ldd	r20, Y+5	; 0x05
     830:	5e 81       	ldd	r21, Y+6	; 0x06
     832:	2b 81       	ldd	r18, Y+3	; 0x03
     834:	3c 81       	ldd	r19, Y+4	; 0x04
     836:	22 95       	swap	r18
     838:	32 95       	swap	r19
     83a:	30 7f       	andi	r19, 0xF0	; 240
     83c:	32 27       	eor	r19, r18
     83e:	20 7f       	andi	r18, 0xF0	; 240
     840:	32 27       	eor	r19, r18
     842:	24 0f       	add	r18, r20
     844:	35 1f       	adc	r19, r21
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	fc 01       	movw	r30, r24
     84c:	40 81       	ld	r20, Z
     84e:	2d 81       	ldd	r18, Y+5	; 0x05
     850:	3e 81       	ldd	r19, Y+6	; 0x06
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	9c 81       	ldd	r25, Y+4	; 0x04
     856:	82 95       	swap	r24
     858:	92 95       	swap	r25
     85a:	90 7f       	andi	r25, 0xF0	; 240
     85c:	98 27       	eor	r25, r24
     85e:	80 7f       	andi	r24, 0xF0	; 240
     860:	98 27       	eor	r25, r24
     862:	28 0f       	add	r18, r24
     864:	39 1f       	adc	r19, r25
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	9a 81       	ldd	r25, Y+2	; 0x02
     86a:	82 0f       	add	r24, r18
     86c:	93 1f       	adc	r25, r19
     86e:	fc 01       	movw	r30, r24
     870:	40 83       	st	Z, r20
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	9c 81       	ldd	r25, Y+4	; 0x04
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	9c 83       	std	Y+4, r25	; 0x04
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	9c 81       	ldd	r25, Y+4	; 0x04
     880:	08 97       	sbiw	r24, 0x08	; 8
     882:	94 f2       	brlt	.-92     	; 0x828 <descendRow+0x2c>
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	9a 81       	ldd	r25, Y+2	; 0x02
     888:	01 96       	adiw	r24, 0x01	; 1
     88a:	9a 83       	std	Y+2, r25	; 0x02
     88c:	89 83       	std	Y+1, r24	; 0x01
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	9a 81       	ldd	r25, Y+2	; 0x02
     892:	01 96       	adiw	r24, 0x01	; 1
     894:	40 97       	sbiw	r24, 0x10	; 16
     896:	2c f2       	brlt	.-118    	; 0x822 <descendRow+0x26>
     898:	8d 81       	ldd	r24, Y+5	; 0x05
     89a:	9e 81       	ldd	r25, Y+6	; 0x06
     89c:	6f e0       	ldi	r22, 0x0F	; 15
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	46 df       	rcall	.-372    	; 0x72e <clearRow>
     8a2:	00 00       	nop
     8a4:	28 96       	adiw	r28, 0x08	; 8
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <rowFull>:
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <rowFull+0x6>
     8bc:	00 d0       	rcall	.+0      	; 0x8be <rowFull+0x8>
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <rowFull+0xa>
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	9c 83       	std	Y+4, r25	; 0x04
     8c6:	8b 83       	std	Y+3, r24	; 0x03
     8c8:	7e 83       	std	Y+6, r23	; 0x06
     8ca:	6d 83       	std	Y+5, r22	; 0x05
     8cc:	1a 82       	std	Y+2, r1	; 0x02
     8ce:	19 82       	std	Y+1, r1	; 0x01
     8d0:	1b c0       	rjmp	.+54     	; 0x908 <rowFull+0x52>
     8d2:	2b 81       	ldd	r18, Y+3	; 0x03
     8d4:	3c 81       	ldd	r19, Y+4	; 0x04
     8d6:	89 81       	ldd	r24, Y+1	; 0x01
     8d8:	9a 81       	ldd	r25, Y+2	; 0x02
     8da:	82 95       	swap	r24
     8dc:	92 95       	swap	r25
     8de:	90 7f       	andi	r25, 0xF0	; 240
     8e0:	98 27       	eor	r25, r24
     8e2:	80 7f       	andi	r24, 0xF0	; 240
     8e4:	98 27       	eor	r25, r24
     8e6:	28 0f       	add	r18, r24
     8e8:	39 1f       	adc	r19, r25
     8ea:	8d 81       	ldd	r24, Y+5	; 0x05
     8ec:	9e 81       	ldd	r25, Y+6	; 0x06
     8ee:	82 0f       	add	r24, r18
     8f0:	93 1f       	adc	r25, r19
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	88 23       	and	r24, r24
     8f8:	11 f4       	brne	.+4      	; 0x8fe <rowFull+0x48>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	0a c0       	rjmp	.+20     	; 0x912 <rowFull+0x5c>
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	9a 81       	ldd	r25, Y+2	; 0x02
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	9a 83       	std	Y+2, r25	; 0x02
     906:	89 83       	std	Y+1, r24	; 0x01
     908:	89 81       	ldd	r24, Y+1	; 0x01
     90a:	9a 81       	ldd	r25, Y+2	; 0x02
     90c:	08 97       	sbiw	r24, 0x08	; 8
     90e:	0c f3       	brlt	.-62     	; 0x8d2 <rowFull+0x1c>
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	26 96       	adiw	r28, 0x06	; 6
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <inBoundsPoint>:
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	00 d0       	rcall	.+0      	; 0x92a <inBoundsPoint+0x6>
     92a:	00 d0       	rcall	.+0      	; 0x92c <inBoundsPoint+0x8>
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	7c 83       	std	Y+4, r23	; 0x04
     936:	6b 83       	std	Y+3, r22	; 0x03
     938:	8b 81       	ldd	r24, Y+3	; 0x03
     93a:	9c 81       	ldd	r25, Y+4	; 0x04
     93c:	fc 01       	movw	r30, r24
     93e:	80 81       	ld	r24, Z
     940:	91 81       	ldd	r25, Z+1	; 0x01
     942:	99 23       	and	r25, r25
     944:	c4 f0       	brlt	.+48     	; 0x976 <inBoundsPoint+0x52>
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	9c 81       	ldd	r25, Y+4	; 0x04
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	08 97       	sbiw	r24, 0x08	; 8
     952:	8c f4       	brge	.+34     	; 0x976 <inBoundsPoint+0x52>
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	9c 81       	ldd	r25, Y+4	; 0x04
     958:	fc 01       	movw	r30, r24
     95a:	82 81       	ldd	r24, Z+2	; 0x02
     95c:	93 81       	ldd	r25, Z+3	; 0x03
     95e:	99 23       	and	r25, r25
     960:	54 f0       	brlt	.+20     	; 0x976 <inBoundsPoint+0x52>
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	fc 01       	movw	r30, r24
     968:	82 81       	ldd	r24, Z+2	; 0x02
     96a:	93 81       	ldd	r25, Z+3	; 0x03
     96c:	40 97       	sbiw	r24, 0x10	; 16
     96e:	1c f4       	brge	.+6      	; 0x976 <inBoundsPoint+0x52>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	02 c0       	rjmp	.+4      	; 0x97a <inBoundsPoint+0x56>
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	08 95       	ret

00000988 <inBounds>:
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	2a 97       	sbiw	r28, 0x0a	; 10
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	98 87       	std	Y+8, r25	; 0x08
     99e:	8f 83       	std	Y+7, r24	; 0x07
     9a0:	7a 87       	std	Y+10, r23	; 0x0a
     9a2:	69 87       	std	Y+9, r22	; 0x09
     9a4:	1a 82       	std	Y+2, r1	; 0x02
     9a6:	19 82       	std	Y+1, r1	; 0x01
     9a8:	25 c0       	rjmp	.+74     	; 0x9f4 <inBounds+0x6c>
     9aa:	29 81       	ldd	r18, Y+1	; 0x01
     9ac:	3a 81       	ldd	r19, Y+2	; 0x02
     9ae:	89 85       	ldd	r24, Y+9	; 0x09
     9b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b2:	b9 01       	movw	r22, r18
     9b4:	fc dd       	rcall	.-1032   	; 0x5ae <getTile>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	8b 83       	std	Y+3, r24	; 0x03
     9bc:	9c 83       	std	Y+4, r25	; 0x04
     9be:	ad 83       	std	Y+5, r26	; 0x05
     9c0:	be 83       	std	Y+6, r27	; 0x06
     9c2:	9e 01       	movw	r18, r28
     9c4:	2d 5f       	subi	r18, 0xFD	; 253
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	8f 81       	ldd	r24, Y+7	; 0x07
     9ca:	98 85       	ldd	r25, Y+8	; 0x08
     9cc:	b9 01       	movw	r22, r18
     9ce:	aa df       	rcall	.-172    	; 0x924 <inBoundsPoint>
     9d0:	88 23       	and	r24, r24
     9d2:	49 f0       	breq	.+18     	; 0x9e6 <inBounds+0x5e>
     9d4:	9e 01       	movw	r18, r28
     9d6:	2d 5f       	subi	r18, 0xFD	; 253
     9d8:	3f 4f       	sbci	r19, 0xFF	; 255
     9da:	8f 81       	ldd	r24, Y+7	; 0x07
     9dc:	98 85       	ldd	r25, Y+8	; 0x08
     9de:	b9 01       	movw	r22, r18
     9e0:	7d de       	rcall	.-774    	; 0x6dc <getPoint>
     9e2:	88 23       	and	r24, r24
     9e4:	11 f0       	breq	.+4      	; 0x9ea <inBounds+0x62>
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0a c0       	rjmp	.+20     	; 0x9fe <inBounds+0x76>
     9ea:	89 81       	ldd	r24, Y+1	; 0x01
     9ec:	9a 81       	ldd	r25, Y+2	; 0x02
     9ee:	01 96       	adiw	r24, 0x01	; 1
     9f0:	9a 83       	std	Y+2, r25	; 0x02
     9f2:	89 83       	std	Y+1, r24	; 0x01
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	9a 81       	ldd	r25, Y+2	; 0x02
     9f8:	04 97       	sbiw	r24, 0x04	; 4
     9fa:	b8 f2       	brcs	.-82     	; 0x9aa <inBounds+0x22>
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	2a 96       	adiw	r28, 0x0a	; 10
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <land>:
char land(Grid *g, Tetra *t) {
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	cd b7       	in	r28, 0x3d	; 61
     a16:	de b7       	in	r29, 0x3e	; 62
     a18:	2a 97       	sbiw	r28, 0x0a	; 10
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	f8 94       	cli
     a1e:	de bf       	out	0x3e, r29	; 62
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	cd bf       	out	0x3d, r28	; 61
     a24:	98 87       	std	Y+8, r25	; 0x08
     a26:	8f 83       	std	Y+7, r24	; 0x07
     a28:	7a 87       	std	Y+10, r23	; 0x0a
     a2a:	69 87       	std	Y+9, r22	; 0x09
	FOR_TETRA {
     a2c:	1a 82       	std	Y+2, r1	; 0x02
     a2e:	19 82       	std	Y+1, r1	; 0x01
     a30:	31 c0       	rjmp	.+98     	; 0xa94 <land+0x84>
		Point p = getTile(t, i);
     a32:	29 81       	ldd	r18, Y+1	; 0x01
     a34:	3a 81       	ldd	r19, Y+2	; 0x02
     a36:	89 85       	ldd	r24, Y+9	; 0x09
     a38:	9a 85       	ldd	r25, Y+10	; 0x0a
     a3a:	b9 01       	movw	r22, r18
     a3c:	b8 dd       	rcall	.-1168   	; 0x5ae <getTile>
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	8b 83       	std	Y+3, r24	; 0x03
     a44:	9c 83       	std	Y+4, r25	; 0x04
     a46:	ad 83       	std	Y+5, r26	; 0x05
     a48:	be 83       	std	Y+6, r27	; 0x06
		//Land if we reach the bottom
		if(p.y < 1) {
     a4a:	8d 81       	ldd	r24, Y+5	; 0x05
     a4c:	9e 81       	ldd	r25, Y+6	; 0x06
     a4e:	18 16       	cp	r1, r24
     a50:	19 06       	cpc	r1, r25
     a52:	14 f0       	brlt	.+4      	; 0xa58 <land+0x48>
			return 1;
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	23 c0       	rjmp	.+70     	; 0xa9e <land+0x8e>
		} else {
			//Land if there's a tile right below us
			p.y--;
     a58:	8d 81       	ldd	r24, Y+5	; 0x05
     a5a:	9e 81       	ldd	r25, Y+6	; 0x06
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	9e 83       	std	Y+6, r25	; 0x06
     a60:	8d 83       	std	Y+5, r24	; 0x05
			if(inBoundsPoint(g, &p) && getPoint(g, &p)) {
     a62:	9e 01       	movw	r18, r28
     a64:	2d 5f       	subi	r18, 0xFD	; 253
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	8f 81       	ldd	r24, Y+7	; 0x07
     a6a:	98 85       	ldd	r25, Y+8	; 0x08
     a6c:	b9 01       	movw	r22, r18
     a6e:	5a df       	rcall	.-332    	; 0x924 <inBoundsPoint>
     a70:	88 23       	and	r24, r24
     a72:	59 f0       	breq	.+22     	; 0xa8a <land+0x7a>
     a74:	9e 01       	movw	r18, r28
     a76:	2d 5f       	subi	r18, 0xFD	; 253
     a78:	3f 4f       	sbci	r19, 0xFF	; 255
     a7a:	8f 81       	ldd	r24, Y+7	; 0x07
     a7c:	98 85       	ldd	r25, Y+8	; 0x08
     a7e:	b9 01       	movw	r22, r18
     a80:	2d de       	rcall	.-934    	; 0x6dc <getPoint>
     a82:	88 23       	and	r24, r24
     a84:	11 f0       	breq	.+4      	; 0xa8a <land+0x7a>
				return 1;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	0a c0       	rjmp	.+20     	; 0xa9e <land+0x8e>
		}
	}
	return 1;
}
char land(Grid *g, Tetra *t) {
	FOR_TETRA {
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	9a 81       	ldd	r25, Y+2	; 0x02
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	9a 83       	std	Y+2, r25	; 0x02
     a92:	89 83       	std	Y+1, r24	; 0x01
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	9a 81       	ldd	r25, Y+2	; 0x02
     a98:	04 97       	sbiw	r24, 0x04	; 4
     a9a:	58 f2       	brcs	.-106    	; 0xa32 <land+0x22>
			if(inBoundsPoint(g, &p) && getPoint(g, &p)) {
				return 1;
			}
		}
	}
	return 0;
     a9c:	80 e0       	ldi	r24, 0x00	; 0
}
     a9e:	2a 96       	adiw	r28, 0x0a	; 10
     aa0:	0f b6       	in	r0, 0x3f	; 63
     aa2:	f8 94       	cli
     aa4:	de bf       	out	0x3e, r29	; 62
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	cd bf       	out	0x3d, r28	; 61
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret

00000ab0 <canTurn>:
char canTurn(Grid *g, Tetra *t) {
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
     ab8:	68 97       	sbiw	r28, 0x18	; 24
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	de bf       	out	0x3e, r29	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	cd bf       	out	0x3d, r28	; 61
     ac4:	9e 8b       	std	Y+22, r25	; 0x16
     ac6:	8d 8b       	std	Y+21, r24	; 0x15
     ac8:	78 8f       	std	Y+24, r23	; 0x18
     aca:	6f 8b       	std	Y+23, r22	; 0x17
	Tetra turned = *t;
     acc:	8f 89       	ldd	r24, Y+23	; 0x17
     ace:	98 8d       	ldd	r25, Y+24	; 0x18
     ad0:	24 e1       	ldi	r18, 0x14	; 20
     ad2:	fc 01       	movw	r30, r24
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	dc 01       	movw	r26, r24
     ada:	01 90       	ld	r0, Z+
     adc:	0d 92       	st	X+, r0
     ade:	2a 95       	dec	r18
     ae0:	e1 f7       	brne	.-8      	; 0xada <canTurn+0x2a>
	turn(&turned);
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	d2 dd       	rcall	.-1116   	; 0x68c <turn>
	return inBounds(g, &turned);
     ae8:	8d 89       	ldd	r24, Y+21	; 0x15
     aea:	9e 89       	ldd	r25, Y+22	; 0x16
     aec:	9e 01       	movw	r18, r28
     aee:	2f 5f       	subi	r18, 0xFF	; 255
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
     af2:	b9 01       	movw	r22, r18
     af4:	49 df       	rcall	.-366    	; 0x988 <inBounds>
}
     af6:	68 96       	adiw	r28, 0x18	; 24
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <canShiftRight>:
char canShiftRight(Grid *g, Tetra *t) {
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	68 97       	sbiw	r28, 0x18	; 24
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	9e 8b       	std	Y+22, r25	; 0x16
     b1e:	8d 8b       	std	Y+21, r24	; 0x15
     b20:	78 8f       	std	Y+24, r23	; 0x18
     b22:	6f 8b       	std	Y+23, r22	; 0x17
	Tetra shifted = *t;
     b24:	8f 89       	ldd	r24, Y+23	; 0x17
     b26:	98 8d       	ldd	r25, Y+24	; 0x18
     b28:	24 e1       	ldi	r18, 0x14	; 20
     b2a:	fc 01       	movw	r30, r24
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	dc 01       	movw	r26, r24
     b32:	01 90       	ld	r0, Z+
     b34:	0d 92       	st	X+, r0
     b36:	2a 95       	dec	r18
     b38:	e1 f7       	brne	.-8      	; 0xb32 <canShiftRight+0x2a>
	right(&shifted);
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	74 dd       	rcall	.-1304   	; 0x628 <right>
	return inBounds(g, &shifted);
     b40:	8d 89       	ldd	r24, Y+21	; 0x15
     b42:	9e 89       	ldd	r25, Y+22	; 0x16
     b44:	9e 01       	movw	r18, r28
     b46:	2f 5f       	subi	r18, 0xFF	; 255
     b48:	3f 4f       	sbci	r19, 0xFF	; 255
     b4a:	b9 01       	movw	r22, r18
     b4c:	1d df       	rcall	.-454    	; 0x988 <inBounds>
}
     b4e:	68 96       	adiw	r28, 0x18	; 24
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	df 91       	pop	r29
     b5c:	cf 91       	pop	r28
     b5e:	08 95       	ret

00000b60 <canShiftLeft>:
char canShiftLeft(Grid *g, Tetra *t) {
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	cd b7       	in	r28, 0x3d	; 61
     b66:	de b7       	in	r29, 0x3e	; 62
     b68:	68 97       	sbiw	r28, 0x18	; 24
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61
     b74:	9e 8b       	std	Y+22, r25	; 0x16
     b76:	8d 8b       	std	Y+21, r24	; 0x15
     b78:	78 8f       	std	Y+24, r23	; 0x18
     b7a:	6f 8b       	std	Y+23, r22	; 0x17
	Tetra shifted = *t;
     b7c:	8f 89       	ldd	r24, Y+23	; 0x17
     b7e:	98 8d       	ldd	r25, Y+24	; 0x18
     b80:	24 e1       	ldi	r18, 0x14	; 20
     b82:	fc 01       	movw	r30, r24
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	dc 01       	movw	r26, r24
     b8a:	01 90       	ld	r0, Z+
     b8c:	0d 92       	st	X+, r0
     b8e:	2a 95       	dec	r18
     b90:	e1 f7       	brne	.-8      	; 0xb8a <canShiftLeft+0x2a>
	left(&shifted);
     b92:	ce 01       	movw	r24, r28
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	61 dd       	rcall	.-1342   	; 0x65a <left>
	return inBounds(g, &shifted);
     b98:	8d 89       	ldd	r24, Y+21	; 0x15
     b9a:	9e 89       	ldd	r25, Y+22	; 0x16
     b9c:	9e 01       	movw	r18, r28
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	b9 01       	movw	r22, r18
     ba4:	f1 de       	rcall	.-542    	; 0x988 <inBounds>
}
     ba6:	68 96       	adiw	r28, 0x18	; 24
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <place>:
void place(Grid *g, Tetra *t) {
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	2a 97       	sbiw	r28, 0x0a	; 10
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	de bf       	out	0x3e, r29	; 62
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	cd bf       	out	0x3d, r28	; 61
     bcc:	98 87       	std	Y+8, r25	; 0x08
     bce:	8f 83       	std	Y+7, r24	; 0x07
     bd0:	7a 87       	std	Y+10, r23	; 0x0a
     bd2:	69 87       	std	Y+9, r22	; 0x09
	FOR_TETRA {
     bd4:	1a 82       	std	Y+2, r1	; 0x02
     bd6:	19 82       	std	Y+1, r1	; 0x01
     bd8:	2d c0       	rjmp	.+90     	; 0xc34 <place+0x7c>
		Point p = getTile(t, i);
     bda:	29 81       	ldd	r18, Y+1	; 0x01
     bdc:	3a 81       	ldd	r19, Y+2	; 0x02
     bde:	89 85       	ldd	r24, Y+9	; 0x09
     be0:	9a 85       	ldd	r25, Y+10	; 0x0a
     be2:	b9 01       	movw	r22, r18
     be4:	e4 dc       	rcall	.-1592   	; 0x5ae <getTile>
     be6:	dc 01       	movw	r26, r24
     be8:	cb 01       	movw	r24, r22
     bea:	8b 83       	std	Y+3, r24	; 0x03
     bec:	9c 83       	std	Y+4, r25	; 0x04
     bee:	ad 83       	std	Y+5, r26	; 0x05
     bf0:	be 83       	std	Y+6, r27	; 0x06

		if(inBoundsPoint(g, &p)) {
     bf2:	9e 01       	movw	r18, r28
     bf4:	2d 5f       	subi	r18, 0xFD	; 253
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	8f 81       	ldd	r24, Y+7	; 0x07
     bfa:	98 85       	ldd	r25, Y+8	; 0x08
     bfc:	b9 01       	movw	r22, r18
     bfe:	92 de       	rcall	.-732    	; 0x924 <inBoundsPoint>
     c00:	88 23       	and	r24, r24
     c02:	99 f0       	breq	.+38     	; 0xc2a <place+0x72>
			g->tiles[p.x][p.y] = 1;
     c04:	2b 81       	ldd	r18, Y+3	; 0x03
     c06:	3c 81       	ldd	r19, Y+4	; 0x04
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	4f 81       	ldd	r20, Y+7	; 0x07
     c0e:	58 85       	ldd	r21, Y+8	; 0x08
     c10:	22 95       	swap	r18
     c12:	32 95       	swap	r19
     c14:	30 7f       	andi	r19, 0xF0	; 240
     c16:	32 27       	eor	r19, r18
     c18:	20 7f       	andi	r18, 0xF0	; 240
     c1a:	32 27       	eor	r19, r18
     c1c:	24 0f       	add	r18, r20
     c1e:	35 1f       	adc	r19, r21
     c20:	82 0f       	add	r24, r18
     c22:	93 1f       	adc	r25, r19
     c24:	21 e0       	ldi	r18, 0x01	; 1
     c26:	fc 01       	movw	r30, r24
     c28:	20 83       	st	Z, r18
	Tetra shifted = *t;
	left(&shifted);
	return inBounds(g, &shifted);
}
void place(Grid *g, Tetra *t) {
	FOR_TETRA {
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	9a 81       	ldd	r25, Y+2	; 0x02
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	04 97       	sbiw	r24, 0x04	; 4
     c3a:	78 f2       	brcs	.-98     	; 0xbda <place+0x22>

		if(inBoundsPoint(g, &p)) {
			g->tiles[p.x][p.y] = 1;
		}
	}
}
     c3c:	00 00       	nop
     c3e:	2a 96       	adiw	r28, 0x0a	; 10
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	08 95       	ret

00000c50 <remove>:
void remove(Grid *g, Tetra *t) {
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	2a 97       	sbiw	r28, 0x0a	; 10
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	98 87       	std	Y+8, r25	; 0x08
     c66:	8f 83       	std	Y+7, r24	; 0x07
     c68:	7a 87       	std	Y+10, r23	; 0x0a
     c6a:	69 87       	std	Y+9, r22	; 0x09
	FOR_TETRA {
     c6c:	1a 82       	std	Y+2, r1	; 0x02
     c6e:	19 82       	std	Y+1, r1	; 0x01
     c70:	2c c0       	rjmp	.+88     	; 0xcca <remove+0x7a>
		Point p = getTile(t, i);
     c72:	29 81       	ldd	r18, Y+1	; 0x01
     c74:	3a 81       	ldd	r19, Y+2	; 0x02
     c76:	89 85       	ldd	r24, Y+9	; 0x09
     c78:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7a:	b9 01       	movw	r22, r18
     c7c:	98 dc       	rcall	.-1744   	; 0x5ae <getTile>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	8b 83       	std	Y+3, r24	; 0x03
     c84:	9c 83       	std	Y+4, r25	; 0x04
     c86:	ad 83       	std	Y+5, r26	; 0x05
     c88:	be 83       	std	Y+6, r27	; 0x06
		if(inBoundsPoint(g, &p)) {
     c8a:	9e 01       	movw	r18, r28
     c8c:	2d 5f       	subi	r18, 0xFD	; 253
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	8f 81       	ldd	r24, Y+7	; 0x07
     c92:	98 85       	ldd	r25, Y+8	; 0x08
     c94:	b9 01       	movw	r22, r18
     c96:	46 de       	rcall	.-884    	; 0x924 <inBoundsPoint>
     c98:	88 23       	and	r24, r24
     c9a:	91 f0       	breq	.+36     	; 0xcc0 <remove+0x70>
			g->tiles[p.x][p.y] = 0;
     c9c:	2b 81       	ldd	r18, Y+3	; 0x03
     c9e:	3c 81       	ldd	r19, Y+4	; 0x04
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	9e 81       	ldd	r25, Y+6	; 0x06
     ca4:	4f 81       	ldd	r20, Y+7	; 0x07
     ca6:	58 85       	ldd	r21, Y+8	; 0x08
     ca8:	22 95       	swap	r18
     caa:	32 95       	swap	r19
     cac:	30 7f       	andi	r19, 0xF0	; 240
     cae:	32 27       	eor	r19, r18
     cb0:	20 7f       	andi	r18, 0xF0	; 240
     cb2:	32 27       	eor	r19, r18
     cb4:	24 0f       	add	r18, r20
     cb6:	35 1f       	adc	r19, r21
     cb8:	82 0f       	add	r24, r18
     cba:	93 1f       	adc	r25, r19
     cbc:	fc 01       	movw	r30, r24
     cbe:	10 82       	st	Z, r1
			g->tiles[p.x][p.y] = 1;
		}
	}
}
void remove(Grid *g, Tetra *t) {
	FOR_TETRA {
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	04 97       	sbiw	r24, 0x04	; 4
     cd0:	80 f2       	brcs	.-96     	; 0xc72 <remove+0x22>
		Point p = getTile(t, i);
		if(inBoundsPoint(g, &p)) {
			g->tiles[p.x][p.y] = 0;
		}
	}
}
     cd2:	00 00       	nop
     cd4:	2a 96       	adiw	r28, 0x0a	; 10
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61
     ce0:	df 91       	pop	r29
     ce2:	cf 91       	pop	r28
     ce4:	08 95       	ret

00000ce6 <setScreenState>:
unsigned char score;
typedef enum ScreenState { Title, Game, FinalScore } ScreenState;
typedef enum GameState { Init, Play, RowClear, GameOver } GameState;
ScreenState screenState;
void setScreenState(ScreenState next) {
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	00 d0       	rcall	.+0      	; 0xcec <setScreenState+0x6>
     cec:	1f 92       	push	r1
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	8b 83       	std	Y+3, r24	; 0x03
	screenState = next;
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <screenState>
	unsigned int a = 0;
     cfa:	1a 82       	std	Y+2, r1	; 0x02
     cfc:	19 82       	std	Y+1, r1	; 0x01
	switch(next) {
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	81 30       	cpi	r24, 0x01	; 1
     d06:	91 05       	cpc	r25, r1
     d08:	61 f0       	breq	.+24     	; 0xd22 <setScreenState+0x3c>
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	91 05       	cpc	r25, r1
     d0e:	61 f0       	breq	.+24     	; 0xd28 <setScreenState+0x42>
     d10:	89 2b       	or	r24, r25
     d12:	09 f0       	breq	.+2      	; 0xd16 <setScreenState+0x30>
				store(0, score);
			}
			break;
	}

};
     d14:	17 c0       	rjmp	.+46     	; 0xd44 <setScreenState+0x5e>
void setScreenState(ScreenState next) {
	screenState = next;
	unsigned int a = 0;
	switch(next) {
		case Title:
			score = load(a);
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	17 da       	rcall	.-3026   	; 0x14a <load>
     d1c:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <score>
			break;
     d20:	11 c0       	rjmp	.+34     	; 0xd44 <setScreenState+0x5e>
		case Game:
			screenState = Init;
     d22:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <screenState>
			break;
     d26:	0e c0       	rjmp	.+28     	; 0xd44 <setScreenState+0x5e>
		case FinalScore:
			if(score > load(a)) {
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	0e da       	rcall	.-3044   	; 0x14a <load>
     d2e:	98 2f       	mov	r25, r24
     d30:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <score>
     d34:	98 17       	cp	r25, r24
     d36:	28 f4       	brcc	.+10     	; 0xd42 <setScreenState+0x5c>
				store(0, score);
     d38:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <score>
     d3c:	68 2f       	mov	r22, r24
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	c4 d9       	rcall	.-3192   	; 0xca <store>
			}
			break;
     d42:	00 00       	nop
	}

};
     d44:	00 00       	nop
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <UpdateGame>:

void UpdateGame() {
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	6a 97       	sbiw	r28, 0x1a	; 26
     d5c:	0f b6       	in	r0, 0x3f	; 63
     d5e:	f8 94       	cli
     d60:	de bf       	out	0x3e, r29	; 62
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	cd bf       	out	0x3d, r28	; 61

	static short time = 0;

	static char pressed_prev = 0;

	if(--time > 0) {
     d66:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     d6a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     d74:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     d78:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
     d7c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
     d80:	18 16       	cp	r1, r24
     d82:	19 06       	cpc	r1, r25
     d84:	0c f4       	brge	.+2      	; 0xd88 <UpdateGame+0x36>
     d86:	88 c1       	rjmp	.+784    	; 0x1098 <UpdateGame+0x346>
		return;
	}
	switch(state) {
     d88:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <state.1835>
     d8c:	88 2f       	mov	r24, r24
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	81 30       	cpi	r24, 0x01	; 1
     d92:	91 05       	cpc	r25, r1
     d94:	31 f1       	breq	.+76     	; 0xde2 <UpdateGame+0x90>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	91 05       	cpc	r25, r1
     d9a:	1c f4       	brge	.+6      	; 0xda2 <UpdateGame+0x50>
     d9c:	89 2b       	or	r24, r25
     d9e:	49 f0       	breq	.+18     	; 0xdb2 <UpdateGame+0x60>
     da0:	7c c1       	rjmp	.+760    	; 0x109a <UpdateGame+0x348>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	91 05       	cpc	r25, r1
     da6:	09 f4       	brne	.+2      	; 0xdaa <UpdateGame+0x58>
     da8:	fa c0       	rjmp	.+500    	; 0xf9e <UpdateGame+0x24c>
     daa:	03 97       	sbiw	r24, 0x03	; 3
     dac:	09 f4       	brne	.+2      	; 0xdb0 <UpdateGame+0x5e>
     dae:	56 c1       	rjmp	.+684    	; 0x105c <UpdateGame+0x30a>
     db0:	74 c1       	rjmp	.+744    	; 0x109a <UpdateGame+0x348>
	case Init:
		t = CreateTetra();
     db2:	ce 01       	movw	r24, r28
     db4:	07 96       	adiw	r24, 0x07	; 7
     db6:	a3 db       	rcall	.-2234   	; 0x4fe <CreateTetra>
     db8:	84 e1       	ldi	r24, 0x14	; 20
     dba:	fe 01       	movw	r30, r28
     dbc:	37 96       	adiw	r30, 0x07	; 7
     dbe:	a9 e0       	ldi	r26, 0x09	; 9
     dc0:	b1 e0       	ldi	r27, 0x01	; 1
     dc2:	01 90       	ld	r0, Z+
     dc4:	0d 92       	st	X+, r0
     dc6:	8a 95       	dec	r24
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <UpdateGame+0x70>
		score = 0;
     dca:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <score>
		time = 1000;
     dce:	88 ee       	ldi	r24, 0xE8	; 232
     dd0:	93 e0       	ldi	r25, 0x03	; 3
     dd2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     dd6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		state = Play;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state.1835>
		return;
     de0:	5c c1       	rjmp	.+696    	; 0x109a <UpdateGame+0x348>
	case Play:
		remove(&g, &t);			//Remove so that we can move
     de2:	69 e0       	ldi	r22, 0x09	; 9
     de4:	71 e0       	ldi	r23, 0x01	; 1
     de6:	8d e1       	ldi	r24, 0x1D	; 29
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	32 df       	rcall	.-412    	; 0xc50 <remove>

		char pressed = ~PINA;
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	fc 01       	movw	r30, r24
     df2:	80 81       	ld	r24, Z
     df4:	80 95       	com	r24
     df6:	8d 83       	std	Y+5, r24	; 0x05
		char justPressed = pressed & ~pressed_prev;
     df8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <pressed_prev.1841>
     dfc:	98 2f       	mov	r25, r24
     dfe:	90 95       	com	r25
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	89 23       	and	r24, r25
     e04:	8e 83       	std	Y+6, r24	; 0x06
		switch(justPressed) {
     e06:	8e 81       	ldd	r24, Y+6	; 0x06
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	82 30       	cpi	r24, 0x02	; 2
     e0e:	91 05       	cpc	r25, r1
     e10:	b9 f0       	breq	.+46     	; 0xe40 <UpdateGame+0xee>
     e12:	83 30       	cpi	r24, 0x03	; 3
     e14:	91 05       	cpc	r25, r1
     e16:	1c f4       	brge	.+6      	; 0xe1e <UpdateGame+0xcc>
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	39 f0       	breq	.+14     	; 0xe2a <UpdateGame+0xd8>
     e1c:	37 c0       	rjmp	.+110    	; 0xe8c <UpdateGame+0x13a>
     e1e:	84 30       	cpi	r24, 0x04	; 4
     e20:	91 05       	cpc	r25, r1
     e22:	c9 f0       	breq	.+50     	; 0xe56 <UpdateGame+0x104>
     e24:	05 97       	sbiw	r24, 0x05	; 5
     e26:	29 f1       	breq	.+74     	; 0xe72 <UpdateGame+0x120>
     e28:	31 c0       	rjmp	.+98     	; 0xe8c <UpdateGame+0x13a>
		case 1:
			if(canShiftRight(&g, &t)) {
     e2a:	69 e0       	ldi	r22, 0x09	; 9
     e2c:	71 e0       	ldi	r23, 0x01	; 1
     e2e:	8d e1       	ldi	r24, 0x1D	; 29
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	6a de       	rcall	.-812    	; 0xb08 <canShiftRight>
     e34:	88 23       	and	r24, r24
     e36:	29 f1       	breq	.+74     	; 0xe82 <UpdateGame+0x130>
				right(&t);
     e38:	89 e0       	ldi	r24, 0x09	; 9
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	f5 db       	rcall	.-2070   	; 0x628 <right>
     e3e:	21 c0       	rjmp	.+66     	; 0xe82 <UpdateGame+0x130>
			}
			break;
     e40:	69 e0       	ldi	r22, 0x09	; 9
		case 2:
			if(canTurn(&g, &t)) {
     e42:	71 e0       	ldi	r23, 0x01	; 1
     e44:	8d e1       	ldi	r24, 0x1D	; 29
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	33 de       	rcall	.-922    	; 0xab0 <canTurn>
     e4a:	88 23       	and	r24, r24
     e4c:	e1 f0       	breq	.+56     	; 0xe86 <UpdateGame+0x134>
				turn(&t);
     e4e:	89 e0       	ldi	r24, 0x09	; 9
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	1c dc       	rcall	.-1992   	; 0x68c <turn>
			}
			break;
     e54:	18 c0       	rjmp	.+48     	; 0xe86 <UpdateGame+0x134>
		case 4:
			if(canShiftLeft(&g, &t)) {
     e56:	69 e0       	ldi	r22, 0x09	; 9
     e58:	71 e0       	ldi	r23, 0x01	; 1
     e5a:	8d e1       	ldi	r24, 0x1D	; 29
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	80 de       	rcall	.-768    	; 0xb60 <canShiftLeft>
     e60:	88 23       	and	r24, r24
     e62:	99 f0       	breq	.+38     	; 0xe8a <UpdateGame+0x138>
				left(&t);
     e64:	89 e0       	ldi	r24, 0x09	; 9
     e66:	91 e0       	ldi	r25, 0x01	; 1
     e68:	f8 db       	rcall	.-2064   	; 0x65a <left>
     e6a:	0f c0       	rjmp	.+30     	; 0xe8a <UpdateGame+0x138>
			}
			break;
		case 5:
			while(!land(&g, &t)) {
				down(&t);
     e6c:	89 e0       	ldi	r24, 0x09	; 9
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	c2 db       	rcall	.-2172   	; 0x5f6 <down>
     e72:	69 e0       	ldi	r22, 0x09	; 9
			if(canShiftLeft(&g, &t)) {
				left(&t);
			}
			break;
		case 5:
			while(!land(&g, &t)) {
     e74:	71 e0       	ldi	r23, 0x01	; 1
     e76:	8d e1       	ldi	r24, 0x1D	; 29
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	ca dd       	rcall	.-1132   	; 0xa10 <land>
     e7c:	88 23       	and	r24, r24
     e7e:	b1 f3       	breq	.-20     	; 0xe6c <UpdateGame+0x11a>
     e80:	05 c0       	rjmp	.+10     	; 0xe8c <UpdateGame+0x13a>
     e82:	00 00       	nop
		switch(justPressed) {
		case 1:
			if(canShiftRight(&g, &t)) {
				right(&t);
			}
			break;
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <UpdateGame+0x13a>
     e86:	00 00       	nop
		case 2:
			if(canTurn(&g, &t)) {
				turn(&t);
			}
			break;
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <UpdateGame+0x13a>
     e8a:	00 00       	nop
		case 4:
			if(canShiftLeft(&g, &t)) {
				left(&t);
			}
			break;
     e8c:	69 e0       	ldi	r22, 0x09	; 9
			while(!land(&g, &t)) {
				down(&t);
			}
			break;
		}
		if(land(&g, &t)) {		//See if we stop falling here
     e8e:	71 e0       	ldi	r23, 0x01	; 1
     e90:	8d e1       	ldi	r24, 0x1D	; 29
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	bd dd       	rcall	.-1158   	; 0xa10 <land>
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <UpdateGame+0x14a>
     e9a:	69 c0       	rjmp	.+210    	; 0xf6e <UpdateGame+0x21c>
     e9c:	69 e0       	ldi	r22, 0x09	; 9
			if(inBounds(&g, &t)) {	//We landed in the screen
     e9e:	71 e0       	ldi	r23, 0x01	; 1
     ea0:	8d e1       	ldi	r24, 0x1D	; 29
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	71 dd       	rcall	.-1310   	; 0x988 <inBounds>
     ea6:	88 23       	and	r24, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <UpdateGame+0x15a>
     eaa:	53 c0       	rjmp	.+166    	; 0xf52 <UpdateGame+0x200>
     eac:	69 e0       	ldi	r22, 0x09	; 9
				place(&g, &t);	//Place in grid
     eae:	71 e0       	ldi	r23, 0x01	; 1
     eb0:	8d e1       	ldi	r24, 0x1D	; 29
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	81 de       	rcall	.-766    	; 0xbb8 <place>
     eb6:	1a 82       	std	Y+2, r1	; 0x02
				//Check for rows to clear
				for(unsigned short y = 0; y < HEIGHT; y++) {
     eb8:	19 82       	std	Y+1, r1	; 0x01
     eba:	27 c0       	rjmp	.+78     	; 0xf0a <UpdateGame+0x1b8>
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
					if(rowFull(&g, y)) {
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	bc 01       	movw	r22, r24
     ec2:	8d e1       	ldi	r24, 0x1D	; 29
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	f7 dc       	rcall	.-1554   	; 0x8b6 <rowFull>
     ec8:	88 23       	and	r24, r24
     eca:	d1 f0       	breq	.+52     	; 0xf00 <UpdateGame+0x1ae>
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	9a 81       	ldd	r25, Y+2	; 0x02
						rowCleared = y;
     ed0:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <rowCleared.1836+0x1>
     ed4:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <rowCleared.1836>
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rowState.1837>
						rowState = 4;
     ede:	82 e0       	ldi	r24, 0x02	; 2
     ee0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state.1835>
						state = RowClear;
     ee4:	8a ef       	ldi	r24, 0xFA	; 250
     ee6:	90 e0       	ldi	r25, 0x00	; 0
						time = 250;
     ee8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     eec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     ef0:	99 81       	ldd	r25, Y+1	; 0x01
     ef2:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <score>
						score += 1 + y;
     ef6:	89 0f       	add	r24, r25
     ef8:	8f 5f       	subi	r24, 0xFF	; 255
     efa:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <score>
     efe:	cd c0       	rjmp	.+410    	; 0x109a <UpdateGame+0x348>
     f00:	89 81       	ldd	r24, Y+1	; 0x01
						return;
     f02:	9a 81       	ldd	r25, Y+2	; 0x02
		}
		if(land(&g, &t)) {		//See if we stop falling here
			if(inBounds(&g, &t)) {	//We landed in the screen
				place(&g, &t);	//Place in grid
				//Check for rows to clear
				for(unsigned short y = 0; y < HEIGHT; y++) {
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	9a 83       	std	Y+2, r25	; 0x02
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	40 97       	sbiw	r24, 0x10	; 16
     f10:	a8 f2       	brcs	.-86     	; 0xebc <UpdateGame+0x16a>
     f12:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <placed.1838>
						time = 250;
						score += 1 + y;
						return;
					}
				}
				placed++;
     f16:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <placed.1838+0x1>
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <placed.1838+0x1>
     f20:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <placed.1838>
     f24:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <fall.1839+0x1>
				fall = 0;
     f28:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <fall.1839>
     f2c:	ce 01       	movw	r24, r28
				t = CreateTetra();
     f2e:	07 96       	adiw	r24, 0x07	; 7
     f30:	e6 da       	rcall	.-2612   	; 0x4fe <CreateTetra>
     f32:	84 e1       	ldi	r24, 0x14	; 20
     f34:	fe 01       	movw	r30, r28
     f36:	37 96       	adiw	r30, 0x07	; 7
     f38:	a9 e0       	ldi	r26, 0x09	; 9
     f3a:	b1 e0       	ldi	r27, 0x01	; 1
     f3c:	01 90       	ld	r0, Z+
     f3e:	0d 92       	st	X+, r0
     f40:	8a 95       	dec	r24
     f42:	e1 f7       	brne	.-8      	; 0xf3c <UpdateGame+0x1ea>
     f44:	84 ef       	ldi	r24, 0xF4	; 244
     f46:	91 e0       	ldi	r25, 0x01	; 1
				time = 500;
     f48:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     f4c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     f50:	a4 c0       	rjmp	.+328    	; 0x109a <UpdateGame+0x348>
     f52:	83 e0       	ldi	r24, 0x03	; 3
			down(&t);
			place(&g, &t);		//Place in grid so it shows up
			fall++;
			time = 500;
		}
		return;
     f54:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state.1835>
				t = CreateTetra();
				time = 500;
			} else {
				//We landed above the top of the screen
				//Game over
				state = GameOver;
     f58:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <rowCleared.1836+0x1>
				rowCleared = 0;
     f5c:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <rowCleared.1836>
				time = 1000;
     f60:	88 ee       	ldi	r24, 0xE8	; 232
     f62:	93 e0       	ldi	r25, 0x03	; 3
     f64:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     f68:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			down(&t);
			place(&g, &t);		//Place in grid so it shows up
			fall++;
			time = 500;
		}
		return;
     f6c:	96 c0       	rjmp	.+300    	; 0x109a <UpdateGame+0x348>
				state = GameOver;
				rowCleared = 0;
				time = 1000;
			}
		} else {
			down(&t);
     f6e:	89 e0       	ldi	r24, 0x09	; 9
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	41 db       	rcall	.-2430   	; 0x5f6 <down>
     f74:	69 e0       	ldi	r22, 0x09	; 9
			place(&g, &t);		//Place in grid so it shows up
     f76:	71 e0       	ldi	r23, 0x01	; 1
     f78:	8d e1       	ldi	r24, 0x1D	; 29
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	1d de       	rcall	.-966    	; 0xbb8 <place>
     f7e:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <fall.1839>
			fall++;
     f82:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <fall.1839+0x1>
     f86:	01 96       	adiw	r24, 0x01	; 1
     f88:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <fall.1839+0x1>
     f8c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <fall.1839>
     f90:	84 ef       	ldi	r24, 0xF4	; 244
     f92:	91 e0       	ldi	r25, 0x01	; 1
			time = 500;
     f94:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     f98:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
     f9c:	7e c0       	rjmp	.+252    	; 0x109a <UpdateGame+0x348>
		}
		return;
     f9e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rowState.1837>
	case RowClear:
		if(rowState%2) {
     fa2:	81 70       	andi	r24, 0x01	; 1
     fa4:	88 23       	and	r24, r24
     fa6:	49 f0       	breq	.+18     	; 0xfba <UpdateGame+0x268>
			fillRow(&g, rowCleared);
     fa8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <rowCleared.1836>
     fac:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <rowCleared.1836+0x1>
     fb0:	bc 01       	movw	r22, r24
     fb2:	8d e1       	ldi	r24, 0x1D	; 29
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	ee db       	rcall	.-2084   	; 0x794 <fillRow>
     fb8:	08 c0       	rjmp	.+16     	; 0xfca <UpdateGame+0x278>
     fba:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <rowCleared.1836>
		} else {
			clearRow(&g, rowCleared);
     fbe:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <rowCleared.1836+0x1>
     fc2:	bc 01       	movw	r22, r24
     fc4:	8d e1       	ldi	r24, 0x1D	; 29
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	b2 db       	rcall	.-2204   	; 0x72e <clearRow>
     fca:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rowState.1837>
		}
		if(rowState > 0) {
     fce:	88 23       	and	r24, r24
     fd0:	61 f0       	breq	.+24     	; 0xfea <UpdateGame+0x298>
     fd2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <rowState.1837>
			rowState--;
     fd6:	81 50       	subi	r24, 0x01	; 1
     fd8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rowState.1837>
     fdc:	8a ef       	ldi	r24, 0xFA	; 250
			time = 250;
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
     fe4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
			}

			state = Play;
			time = 500;
		}
		return;
     fe8:	58 c0       	rjmp	.+176    	; 0x109a <UpdateGame+0x348>
		}
		if(rowState > 0) {
			rowState--;
			time = 250;
		} else {
			descendRow(&g, rowCleared);
     fea:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <rowCleared.1836>
     fee:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <rowCleared.1836+0x1>
     ff2:	bc 01       	movw	r22, r24
     ff4:	8d e1       	ldi	r24, 0x1D	; 29
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	01 dc       	rcall	.-2046   	; 0x7fc <descendRow>
     ffa:	1c 82       	std	Y+4, r1	; 0x04

			for(unsigned short y = 0; y < HEIGHT; y++) {
     ffc:	1b 82       	std	Y+3, r1	; 0x03
     ffe:	20 c0       	rjmp	.+64     	; 0x1040 <UpdateGame+0x2ee>
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
				if(rowFull(&g, y)) {
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	bc 01       	movw	r22, r24
    1006:	8d e1       	ldi	r24, 0x1D	; 29
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	55 dc       	rcall	.-1878   	; 0x8b6 <rowFull>
    100c:	88 23       	and	r24, r24
    100e:	99 f0       	breq	.+38     	; 0x1036 <UpdateGame+0x2e4>
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
					rowCleared = y;
    1014:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <rowCleared.1836+0x1>
    1018:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <rowCleared.1836>
    101c:	84 e0       	ldi	r24, 0x04	; 4
    101e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <rowState.1837>
					rowState = 4;
    1022:	82 e0       	ldi	r24, 0x02	; 2
    1024:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state.1835>
					state = RowClear;
    1028:	8a ef       	ldi	r24, 0xFA	; 250
    102a:	90 e0       	ldi	r25, 0x00	; 0
					time = 250;
    102c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
    1030:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
    1034:	32 c0       	rjmp	.+100    	; 0x109a <UpdateGame+0x348>
    1036:	8b 81       	ldd	r24, Y+3	; 0x03
					return;
    1038:	9c 81       	ldd	r25, Y+4	; 0x04
			rowState--;
			time = 250;
		} else {
			descendRow(&g, rowCleared);

			for(unsigned short y = 0; y < HEIGHT; y++) {
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	9c 83       	std	Y+4, r25	; 0x04
    103e:	8b 83       	std	Y+3, r24	; 0x03
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	40 97       	sbiw	r24, 0x10	; 16
    1046:	e0 f2       	brcs	.-72     	; 0x1000 <UpdateGame+0x2ae>
    1048:	81 e0       	ldi	r24, 0x01	; 1
					time = 250;
					return;
				}
			}

			state = Play;
    104a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <state.1835>
    104e:	84 ef       	ldi	r24, 0xF4	; 244
			time = 500;
    1050:	91 e0       	ldi	r25, 0x01	; 1
    1052:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
    1056:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
		}
		return;
    105a:	1f c0       	rjmp	.+62     	; 0x109a <UpdateGame+0x348>
	case GameOver:
		if(rowCleared < HEIGHT) {
    105c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <rowCleared.1836>
    1060:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <rowCleared.1836+0x1>
    1064:	40 97       	sbiw	r24, 0x10	; 16
    1066:	a4 f4       	brge	.+40     	; 0x1090 <UpdateGame+0x33e>
			clearRow(&g, 0);
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	8d e1       	ldi	r24, 0x1D	; 29
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	5e db       	rcall	.-2372   	; 0x72e <clearRow>
			descendRow(&g, 0);
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	8d e1       	ldi	r24, 0x1D	; 29
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	c0 db       	rcall	.-2176   	; 0x7fc <descendRow>
    107c:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <rowCleared.1836>
			rowCleared++;
    1080:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <rowCleared.1836+0x1>
    1084:	01 96       	adiw	r24, 0x01	; 1
    1086:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <rowCleared.1836+0x1>
    108a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <rowCleared.1836>
    108e:	05 c0       	rjmp	.+10     	; 0x109a <UpdateGame+0x348>
		} else {
			setScreenState(FinalScore);
		}
		break;
    1090:	82 e0       	ldi	r24, 0x02	; 2
		if(rowCleared < HEIGHT) {
			clearRow(&g, 0);
			descendRow(&g, 0);
			rowCleared++;
		} else {
			setScreenState(FinalScore);
    1092:	29 de       	rcall	.-942    	; 0xce6 <setScreenState>
    1094:	00 00       	nop
    1096:	01 c0       	rjmp	.+2      	; 0x109a <UpdateGame+0x348>
		}
		break;
    1098:	00 00       	nop
    109a:	6a 96       	adiw	r28, 0x1a	; 26
	static short time = 0;

	static char pressed_prev = 0;

	if(--time > 0) {
		return;
    109c:	0f b6       	in	r0, 0x3f	; 63
		} else {
			setScreenState(FinalScore);
		}
		break;
	}
}
    109e:	f8 94       	cli
    10a0:	de bf       	out	0x3e, r29	; 62
    10a2:	0f be       	out	0x3f, r0	; 63
    10a4:	cd bf       	out	0x3d, r28	; 61
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <main>:
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29

int main(void)
{
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	//Otherwise, we lost
		int done = 1;
		return;
	}
	*/
	while(1) UpdateGame();
    10b4:	4e de       	rcall	.-868    	; 0xd52 <UpdateGame>
    10b6:	fe cf       	rjmp	.-4      	; 0x10b4 <main+0x8>

000010b8 <do_rand>:
    10b8:	8f 92       	push	r8
    10ba:	9f 92       	push	r9
    10bc:	af 92       	push	r10
    10be:	bf 92       	push	r11
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
    10ce:	68 81       	ld	r22, Y
    10d0:	79 81       	ldd	r23, Y+1	; 0x01
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	9b 81       	ldd	r25, Y+3	; 0x03
    10d6:	61 15       	cp	r22, r1
    10d8:	71 05       	cpc	r23, r1
    10da:	81 05       	cpc	r24, r1
    10dc:	91 05       	cpc	r25, r1
    10de:	21 f4       	brne	.+8      	; 0x10e8 <do_rand+0x30>
    10e0:	64 e2       	ldi	r22, 0x24	; 36
    10e2:	79 ed       	ldi	r23, 0xD9	; 217
    10e4:	8b e5       	ldi	r24, 0x5B	; 91
    10e6:	97 e0       	ldi	r25, 0x07	; 7
    10e8:	2d e1       	ldi	r18, 0x1D	; 29
    10ea:	33 ef       	ldi	r19, 0xF3	; 243
    10ec:	41 e0       	ldi	r20, 0x01	; 1
    10ee:	50 e0       	ldi	r21, 0x00	; 0
    10f0:	38 d0       	rcall	.+112    	; 0x1162 <__divmodsi4>
    10f2:	49 01       	movw	r8, r18
    10f4:	5a 01       	movw	r10, r20
    10f6:	9b 01       	movw	r18, r22
    10f8:	ac 01       	movw	r20, r24
    10fa:	a7 ea       	ldi	r26, 0xA7	; 167
    10fc:	b1 e4       	ldi	r27, 0x41	; 65
    10fe:	4d d0       	rcall	.+154    	; 0x119a <__muluhisi3>
    1100:	6b 01       	movw	r12, r22
    1102:	7c 01       	movw	r14, r24
    1104:	ac ee       	ldi	r26, 0xEC	; 236
    1106:	b4 ef       	ldi	r27, 0xF4	; 244
    1108:	a5 01       	movw	r20, r10
    110a:	94 01       	movw	r18, r8
    110c:	52 d0       	rcall	.+164    	; 0x11b2 <__mulohisi3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	8c 0d       	add	r24, r12
    1114:	9d 1d       	adc	r25, r13
    1116:	ae 1d       	adc	r26, r14
    1118:	bf 1d       	adc	r27, r15
    111a:	b7 ff       	sbrs	r27, 7
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <do_rand+0x6c>
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	a1 09       	sbc	r26, r1
    1122:	b0 48       	sbci	r27, 0x80	; 128
    1124:	88 83       	st	Y, r24
    1126:	99 83       	std	Y+1, r25	; 0x01
    1128:	aa 83       	std	Y+2, r26	; 0x02
    112a:	bb 83       	std	Y+3, r27	; 0x03
    112c:	9f 77       	andi	r25, 0x7F	; 127
    112e:	df 91       	pop	r29
    1130:	cf 91       	pop	r28
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	bf 90       	pop	r11
    113c:	af 90       	pop	r10
    113e:	9f 90       	pop	r9
    1140:	8f 90       	pop	r8
    1142:	08 95       	ret

00001144 <rand_r>:
    1144:	b9 cf       	rjmp	.-142    	; 0x10b8 <do_rand>

00001146 <rand>:
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	b6 cf       	rjmp	.-148    	; 0x10b8 <do_rand>

0000114c <srand>:
    114c:	a0 e0       	ldi	r26, 0x00	; 0
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1158:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    115c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1160:	08 95       	ret

00001162 <__divmodsi4>:
    1162:	05 2e       	mov	r0, r21
    1164:	97 fb       	bst	r25, 7
    1166:	16 f4       	brtc	.+4      	; 0x116c <__divmodsi4+0xa>
    1168:	00 94       	com	r0
    116a:	0f d0       	rcall	.+30     	; 0x118a <__negsi2>
    116c:	57 fd       	sbrc	r21, 7
    116e:	05 d0       	rcall	.+10     	; 0x117a <__divmodsi4_neg2>
    1170:	24 d0       	rcall	.+72     	; 0x11ba <__udivmodsi4>
    1172:	07 fc       	sbrc	r0, 7
    1174:	02 d0       	rcall	.+4      	; 0x117a <__divmodsi4_neg2>
    1176:	46 f4       	brtc	.+16     	; 0x1188 <__divmodsi4_exit>
    1178:	08 c0       	rjmp	.+16     	; 0x118a <__negsi2>

0000117a <__divmodsi4_neg2>:
    117a:	50 95       	com	r21
    117c:	40 95       	com	r20
    117e:	30 95       	com	r19
    1180:	21 95       	neg	r18
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	4f 4f       	sbci	r20, 0xFF	; 255
    1186:	5f 4f       	sbci	r21, 0xFF	; 255

00001188 <__divmodsi4_exit>:
    1188:	08 95       	ret

0000118a <__negsi2>:
    118a:	90 95       	com	r25
    118c:	80 95       	com	r24
    118e:	70 95       	com	r23
    1190:	61 95       	neg	r22
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	8f 4f       	sbci	r24, 0xFF	; 255
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	08 95       	ret

0000119a <__muluhisi3>:
    119a:	31 d0       	rcall	.+98     	; 0x11fe <__umulhisi3>
    119c:	a5 9f       	mul	r26, r21
    119e:	90 0d       	add	r25, r0
    11a0:	b4 9f       	mul	r27, r20
    11a2:	90 0d       	add	r25, r0
    11a4:	a4 9f       	mul	r26, r20
    11a6:	80 0d       	add	r24, r0
    11a8:	91 1d       	adc	r25, r1
    11aa:	11 24       	eor	r1, r1
    11ac:	08 95       	ret

000011ae <__mulshisi3>:
    11ae:	b7 ff       	sbrs	r27, 7
    11b0:	f4 cf       	rjmp	.-24     	; 0x119a <__muluhisi3>

000011b2 <__mulohisi3>:
    11b2:	f3 df       	rcall	.-26     	; 0x119a <__muluhisi3>
    11b4:	82 1b       	sub	r24, r18
    11b6:	93 0b       	sbc	r25, r19
    11b8:	08 95       	ret

000011ba <__udivmodsi4>:
    11ba:	a1 e2       	ldi	r26, 0x21	; 33
    11bc:	1a 2e       	mov	r1, r26
    11be:	aa 1b       	sub	r26, r26
    11c0:	bb 1b       	sub	r27, r27
    11c2:	fd 01       	movw	r30, r26
    11c4:	0d c0       	rjmp	.+26     	; 0x11e0 <__udivmodsi4_ep>

000011c6 <__udivmodsi4_loop>:
    11c6:	aa 1f       	adc	r26, r26
    11c8:	bb 1f       	adc	r27, r27
    11ca:	ee 1f       	adc	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	a2 17       	cp	r26, r18
    11d0:	b3 07       	cpc	r27, r19
    11d2:	e4 07       	cpc	r30, r20
    11d4:	f5 07       	cpc	r31, r21
    11d6:	20 f0       	brcs	.+8      	; 0x11e0 <__udivmodsi4_ep>
    11d8:	a2 1b       	sub	r26, r18
    11da:	b3 0b       	sbc	r27, r19
    11dc:	e4 0b       	sbc	r30, r20
    11de:	f5 0b       	sbc	r31, r21

000011e0 <__udivmodsi4_ep>:
    11e0:	66 1f       	adc	r22, r22
    11e2:	77 1f       	adc	r23, r23
    11e4:	88 1f       	adc	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	1a 94       	dec	r1
    11ea:	69 f7       	brne	.-38     	; 0x11c6 <__udivmodsi4_loop>
    11ec:	60 95       	com	r22
    11ee:	70 95       	com	r23
    11f0:	80 95       	com	r24
    11f2:	90 95       	com	r25
    11f4:	9b 01       	movw	r18, r22
    11f6:	ac 01       	movw	r20, r24
    11f8:	bd 01       	movw	r22, r26
    11fa:	cf 01       	movw	r24, r30
    11fc:	08 95       	ret

000011fe <__umulhisi3>:
    11fe:	a2 9f       	mul	r26, r18
    1200:	b0 01       	movw	r22, r0
    1202:	b3 9f       	mul	r27, r19
    1204:	c0 01       	movw	r24, r0
    1206:	a3 9f       	mul	r26, r19
    1208:	70 0d       	add	r23, r0
    120a:	81 1d       	adc	r24, r1
    120c:	11 24       	eor	r1, r1
    120e:	91 1d       	adc	r25, r1
    1210:	b2 9f       	mul	r27, r18
    1212:	70 0d       	add	r23, r0
    1214:	81 1d       	adc	r24, r1
    1216:	11 24       	eor	r1, r1
    1218:	91 1d       	adc	r25, r1
    121a:	08 95       	ret

0000121c <_exit>:
    121c:	f8 94       	cli

0000121e <__stop_program>:
    121e:	ff cf       	rjmp	.-2      	; 0x121e <__stop_program>
