
achen115_lab3_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a5  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000240  00000000  00000000  0000120e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001450  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f6  00000000  00000000  00001484  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000187a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	4e c0       	rjmp	.+156    	; 0x138 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	DDRB = 0;	PINB = -1;
  ac:	84 e2       	ldi	r24, 0x24	; 36
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	fc 01       	movw	r30, r24
  b2:	10 82       	st	Z, r1
  b4:	83 e2       	ldi	r24, 0x23	; 35
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
	DDRD = 0;	PIND = -1;
  be:	8a e2       	ldi	r24, 0x2A	; 42
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	fc 01       	movw	r30, r24
  c4:	10 82       	st	Z, r1
  c6:	89 e2       	ldi	r24, 0x29	; 41
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	fc 01       	movw	r30, r24
  ce:	20 83       	st	Z, r18
    while (1) 
    {
		long weight = (PIND << 1) + PINB0;
  d0:	89 e2       	ldi	r24, 0x29	; 41
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	80 81       	ld	r24, Z
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	09 2e       	mov	r0, r25
  e2:	00 0c       	add	r0, r0
  e4:	aa 0b       	sbc	r26, r26
  e6:	bb 0b       	sbc	r27, r27
  e8:	8a 83       	std	Y+2, r24	; 0x02
  ea:	9b 83       	std	Y+3, r25	; 0x03
  ec:	ac 83       	std	Y+4, r26	; 0x04
  ee:	bd 83       	std	Y+5, r27	; 0x05
		//Clear the bits
		char B = PORTB & 0xF9;;
  f0:	85 e2       	ldi	r24, 0x25	; 37
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	fc 01       	movw	r30, r24
  f6:	80 81       	ld	r24, Z
  f8:	89 7f       	andi	r24, 0xF9	; 249
  fa:	89 83       	std	Y+1, r24	; 0x01
		if(weight > 5) {
  fc:	8a 81       	ldd	r24, Y+2	; 0x02
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	ac 81       	ldd	r26, Y+4	; 0x04
 102:	bd 81       	ldd	r27, Y+5	; 0x05
 104:	06 97       	sbiw	r24, 0x06	; 6
 106:	a1 05       	cpc	r26, r1
 108:	b1 05       	cpc	r27, r1
 10a:	84 f0       	brlt	.+32     	; 0x12c <main+0x8e>
			if(weight < 70) {
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	9b 81       	ldd	r25, Y+3	; 0x03
 110:	ac 81       	ldd	r26, Y+4	; 0x04
 112:	bd 81       	ldd	r27, Y+5	; 0x05
 114:	86 34       	cpi	r24, 0x46	; 70
 116:	91 05       	cpc	r25, r1
 118:	a1 05       	cpc	r26, r1
 11a:	b1 05       	cpc	r27, r1
 11c:	24 f4       	brge	.+8      	; 0x126 <main+0x88>
				B |= 1 << 2;
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	84 60       	ori	r24, 0x04	; 4
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	03 c0       	rjmp	.+6      	; 0x12c <main+0x8e>
			} else {
				B |= 1 << 1;
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		PORTB = B;
 12c:	85 e2       	ldi	r24, 0x25	; 37
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	29 81       	ldd	r18, Y+1	; 0x01
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    }
 136:	cc cf       	rjmp	.-104    	; 0xd0 <main+0x32>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
